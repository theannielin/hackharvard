[{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you declare a reference variable (i.e. an object) you are really creating a pointer to an object. Consider the following code where you declare a variable of primitive type int:</p>\n\n<pre><code>int x;\nx = 10;\n</code></pre>\n\n<p>In this example the variable x is an <code>int</code> and Java will initialize it to 0 for you. When you assign it to 10 in the second line your value 10 is written into the memory location pointed to by x.</p>\n\n<p>But, when you try to declare a reference type something different happens. Take the following code:</p>\n\n<pre><code>Integer num;\nnum = new Integer(10);\n</code></pre>\n\n<p>The first line declares a variable named <code>num</code>, but, it does not contain a primitive value. Instead it contains a pointer (because the type is <code>Integer</code> which is a reference type). Since you did not say as yet what to point to Java sets it to null, meaning \"I am pointing at nothing\".</p>\n\n<p>In the second line, the <code>new</code> keyword is used to instantiate (or create) an object of type Integer and the pointer variable num is assigned this object. You can now reference the object using the dereferencing operator <code>.</code> (a dot).  </p>\n\n<p>The <code>Exception</code> that you asked about occurs when you declare a variable but did not create an object. If you attempt to dereference num BEFORE creating the object you get   a NullPointerException. In the most trivial cases the compiler will catch the problem and let you know that \"num may not have been initialized\" but sometime you write code that does not directly create the object.</p>\n\n<p>For instance you may have a method as follows:</p>\n\n<pre><code>public void doSomething(Integer num){\n   //do something to num\n}\n</code></pre>\n\n<p>in which case you are not creating the object num, rather assuming that is was created before the doSomething method was called. Unfortunately it is possible to call the method like this:</p>\n\n<pre><code>doSomething(null);\n</code></pre>\n\n<p>In which case num is null. The best way to avoid this type of exception is to always check for null when you did not create the object yourself. So doSomething should be re-written as:</p>\n\n<pre><code>public void doSomething(Integer num){\n    if(num != null){\n       //do something to num\n    }\n}\n</code></pre>\n\n<p>Finally, <a href=\"http://stackoverflow.com/q/3988788/2775450\">How to pinpoint the exception location &amp; cause using Stack Trace</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>They're exceptions that occur when you try to use a reference that points to no location in memory (null) as though it were referencing an object.  Calling a method on a null reference or trying to access a field of a null reference will trigger a NPE.  These are the most common, but other ways are listed on the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html\">NullPointerException</a> javadoc page.</p>\n\n<p>Probably the quickest example code I could come up with to illustrate a NPE would be:</p>\n\n<pre><code>public class Example\n{\n    public static void main(String[] args)\n    {\n        Object obj = null;\n        obj.hashCode();\n    }\n}\n</code></pre>\n\n<p>On the first line inside main I'm explicitly setting the Object reference <code>obj</code> to null.  This means I have a reference, but it isn't pointing to any object.  After that, I try to treat the reference as though it points to an object by calling a method on it.  This results in a NPE because there is no code to execute in the location that the reference is pointing.</p>\n\n<p>(This is a technicality, but I think it bears mentioning: A reference that points to null isn't the same as a C pointer that points to an invalid memory location.  A null pointer is literally not pointing <em>anywhere</em>, which is subtly different than pointing to a location that happens to be invalid.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>What is a NullPointerException?</h1>\n\n<p>A good place to start is the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html\">JavaDocs</a>. They have this covered:</p>\n\n<blockquote>\n  <p>Thrown when an application attempts to use null in a case where an\n  object is required. These include:</p>\n  \n  <ul>\n  <li>Calling the instance method of a null object.</li>\n  <li>Accessing or modifying the field of a null object.</li>\n  <li>Taking the length of null as if it were an array.</li>\n  <li>Accessing or modifying the slots of null as if it were an array.</li>\n  <li>Throwing null as if it were a Throwable value. </li>\n  </ul>\n  \n  <p>Applications should throw instances of this class to indicate other\n  illegal uses of the null object.</p>\n</blockquote>\n\n<h1>How do I fix it?</h1>\n\n<p>So you have a NullPointerException, how do you fix it? Let's take a simple example which throws a <code>NullPointerException</code></p>\n\n<pre><code>public class Printer {\n    private String name;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void print() {\n        printString(name);\n    }\n\n    private void printString(String s) {\n        System.out.println(s + \" (\" + s.length() + \")\");\n    }\n\n    public static void main(String[] args) {\n        Printer printer = new Printer();\n        printer.print();\n    }\n}\n</code></pre>\n\n<p><strong>Identify the null values</strong></p>\n\n<p>The first step is identifying exactly <em>which values are causing the exception</em>. For this we need to do some debugging. It's important to learn to read a <em>stacktrace</em>. This will show you where the exception was thrown:</p>\n\n<pre><code>Exception in thread \"main\" java.lang.NullPointerException\n    at Printer.printString(Printer.java:13)\n    at Printer.print(Printer.java:9)\n    at Printer.main(Printer.java:19)\n</code></pre>\n\n<p>Here, we see that the exception is thrown on line 13 (in the printString method). Look at line and check which values are null by\nadding <em>logging statements</em> or using a <em>debugger</em>. We find out that <code>s</code> is null, and calling the <code>length</code>\nmethod on it throws the exception. We can see that the program stops throwing the exception when\n<code>s.length()</code> is removed from the method.</p>\n\n<p><strong>Trace where these values come from</strong></p>\n\n<p>Next check where this value comes from. By following the callers of the method, we see that <code>s</code> is\npassed in with <code>printString(name)</code> in the <code>print()</code> method, and <code>this.name</code> is null.</p>\n\n<p><strong>Trace where these values should be set</strong></p>\n\n<p>Where is <code>this.name</code> set? In the <code>setName(String)</code> method. With some more debugging, we can see that this method isn't called at all. If the method was called, make sure to check the <em>order</em> that these methods are called, and the set method isn't called <em>after</em> the print method.</p>\n\n<p>This is enough to give us a solution: add a call to <code>printer.setName()</code> before calling <code>printer.print()</code>.</p>\n\n<h1>Other fixes</h1>\n\n<p>The variable can have a <em>default value</em> (and <code>setName</code> can prevent it being set to null):</p>\n\n<pre><code>private String name = \"\";\n</code></pre>\n\n<p>Either the <code>print</code> or <code>printString</code> method can <em>check for null</em>, for example:</p>\n\n<pre><code>printString((name == null) ? \"\" : name);\n</code></pre>\n\n<p>Or you can design the class so that <code>name</code> <em>always has a non-null value</em>:</p>\n\n<pre><code>public class Printer {\n    private final String name;\n\n    public Printer(String name) {\n        this.name = Objects.requireNonNull(name);\n    }\n\n    public void print() {\n        printString(name);\n    }\n\n    private void printString(String s) {\n        System.out.println(s + \" (\" + s.length() + \")\");\n    }\n\n    public static void main(String[] args) {\n        Printer printer = new Printer(\"123\");\n        printer.print();\n    }\n}\n</code></pre>\n\n<p><strong>See also:</strong></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/271526/avoiding-null-statements-in-java\">Avoiding \u201c!= null\u201d statements in Java?</a></li>\n</ul>\n\n<h1>I still can't find the problem</h1>\n\n<p>If you tried to debug the problem and still don't have a solution, you can post a question for more help, but make sure to include what you've tried so far. At a minimum, <strong>include the stacktrace</strong> in the question, and <strong>mark the important line numbers</strong> in the code. Also, try simplifying the code first (see <a href=\"http://sscce.org/\">SSCCE</a>).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A null pointer exception is caused when you dereference a variable that is pointing to null. See the following code:</p>\n\n<pre><code>String a = null;\nSystem.out.println(a.toString()); // NullPointerException will be thrown\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Question: What causes a <code>NullPointerException</code>?</h2>\n\n<p>As you should know, Java types are divided into <em>primitive types</em> (<code>boolean</code>, <code>int</code> etc) and <em>reference types</em>.  Reference types in Java allow you to use the special value <code>null</code> which is the Java way of saying \"no object\".</p>\n\n<p>A <code>NullPointerException</code> is thrown at runtime whenever your program attempts to use a <code>null</code> as if it was a real reference.  For example, if you write this:</p>\n\n<pre><code>    public class Test {\n        public static void main(String[] args) {\n            String foo = null;\n            int length = foo.length();   // HERE\n        }\n    }\n</code></pre>\n\n<p>the statement labelled \"HERE\" is going to attempt to run the <code>length()</code> method on a <code>null</code> reference, and this will throw a <code>NullPointerException</code>.</p>\n\n<p>There are many ways that you could use a <code>null</code> value that will result in a <code>NullPointerException</code>.  If fact, the only things that you <em>can</em> do with a <code>null</code> without causing an NPE are:</p>\n\n<ul>\n<li>assign it to a reference variable or read it from a reference variable,</li>\n<li>assign it to an array element or read it from an array element (provided that array reference itself is non-null!),</li>\n<li>pass it as a parameter or return it as a result, or</li>\n<li>test it using the <code>==</code> or <code>!=</code> operators.</li>\n</ul>\n\n<h2>Question: How do I read the NPE stacktrace?</h2>\n\n<p>Suppose that I compile and run the program above:</p>\n\n<pre><code>$ javac Test.java \n$ java Test\nException in thread \"main\" java.lang.NullPointerException\n    at Test.main(Test.java:4)\n$\n</code></pre>\n\n<p>First observation: the compilation succeeds!  The problem in the program is NOT a compilation error.  It is a <em>runtime</em> error.  (Some IDEs may warn your program will always throw an exception ... but the standard <code>javac</code> compiler doesn't.)</p>\n\n<p>Second observation: when I run the program, it outputs too lines of \"gobbledy-gook\".  <strong>WRONG!!</strong>  That's not gobbledy-gook.  It is a stacktrace ... and it provides <em>vital information</em> that will help you track down the error in your code, if you take the time to read it carefully.</p>\n\n<p>So lets look at what is says:</p>\n\n<pre><code>Exception in thread \"main\" java.lang.NullPointerException\n</code></pre>\n\n<p>The first line of the stack trace tells you a number of things:</p>\n\n<ul>\n<li>It tells you the name of the Java thread in which the exception was thrown.  For a simple program with one thread (like this one), it will be \"main\".  Lets move on ...</li>\n<li>It tells you the full name of the exception that was thrown; i.e. <code>java.lang.NullPointerException</code>.</li>\n<li>If the exception has an associated error message, that will be output after the exception name.  <code>NullPointerException</code> is unusual in this respect because it rarely has an error message.</li>\n</ul>\n\n<p>The second line is the most important one in diagnosing an NPE. </p>\n\n<pre><code>at Test.main(Test.java:4)\n</code></pre>\n\n<p>This tells us a number of things:</p>\n\n<ul>\n<li>\"at Test.main\" says that we were in the <code>main</code> method of the <code>Test</code> class.</li>\n<li>\"Test.java:4\" gives the source filename of the class, AND it tells us that the statement where this occurred is in line 4 of the file.</li>\n</ul>\n\n<p>And if you count the lines in the file above, line 4 is the one that I labelled with the \"HERE\" comment.</p>\n\n<p>Note that in a more complicated example, there will be lots of lines in the NPE stack trace.  But you can be sure that the second line (the first \"at\" line) will tell you where the NPE was thrown<sup>1</sup>.</p>\n\n<p>In short the stacktrace will tell us unambiguously which statement of the program has thrown the NPE.</p>\n\n<p><sup>1 - Not quite true.  There are things called nested exceptions ...</sup></p>\n\n<h2>Question: How do I track down the cause of the NPE exception in my code?</h2>\n\n<p>This is the hard part.  The short answer is to apply logical inference to the evidence provided by the stack trace, the source code and the relevant API documentation.</p>\n\n<p>Lets illustrate with the simple example (above) first.  We start by looking at the line that the stacktrace has told us is where the NPE happened:</p>\n\n<pre><code>            int length = foo.length(); // HERE\n</code></pre>\n\n<p>How can that throw an NPE?  </p>\n\n<p>In fact there is only one way: it can only happen if <code>foo</code> has the value <code>null</code>.  We then try to run the <code>length()</code> method on <code>null</code> and .... BANG!</p>\n\n<p>But (I hear you say) what if the NPE was thrown inside the <code>length()</code> method call?</p>\n\n<p>Well if that happened, the stacktrace would look different.  The first \"at\" line would say that the exception was thrown in some line in the <code>java.lang.String</code> class, and line 4 of <code>Test.java</code> would be the second \"at\" line.</p>\n\n<p>So where did that <code>null</code> come from?  In this case it is obvious and it is obvious what we need to do to fix it.  (Assign a non-null value to <code>foo</code>)</p>\n\n<p>OK, so lets try a slightly more tricky example.  This will require some <em>logical deduction</em>.</p>\n\n<pre><code>public class Test {\n\n    private static String[] foo = new String[2];\n\n    private static int test(String[] bar, int pos) {\n        return bar[pos].length();\n    }\n\n    public static void main(String[] args) {\n        int length = test(foo, 1);\n    }\n}\n\n$ javac Test.java \n$ java Test\nException in thread \"main\" java.lang.NullPointerException\n    at Test.test(Test.java:6)\n    at Test.main(Test.java:10)\n$ \n</code></pre>\n\n<p>So now we have 2 \"at\" lines.  The first one is for this line:</p>\n\n<pre><code>    return args[pos].length();\n</code></pre>\n\n<p>and the second one is for this line:</p>\n\n<pre><code>    int length = test(foo, 1);\n</code></pre>\n\n<p>So looking at the first line, how could that throw an NPE?  In fact, there are two ways:</p>\n\n<ul>\n<li>If the value of <code>bar</code> is <code>null</code> then <code>bar[pos]</code> will throw an NPE.</li>\n<li>If the value of <code>bar[pos]</code> is <code>null</code> then calling <code>length()</code> on it will throw an NPE.</li>\n</ul>\n\n<p>So next we need to figure out which of those scenarios explains what is actually happening.  Lets start by exploring the first one:</p>\n\n<p>Where does <code>bar</code> come from?   It is a parameter to the <code>test</code> method call, and if we look at how <code>test</code> was called, we can see that it comes from the <code>foo</code> static variable.  And we can see clearly that we initialized <code>foo</code> to a non-null value.  That is sufficient to tentatively dismiss this explanation.  (In theory, something else could <em>change</em> <code>foo</code> to <code>null</code> ... but that's not happening here.)</p>\n\n<p>So what about our 2nd scenario?  Well we can see that <code>pos</code> is <code>1</code>, so that means that <code>foo[1]</code> must be <code>null</code>.  Is that possible?</p>\n\n<p>Indeed it is!  And that is the problem.  When we initialize like this:</p>\n\n<pre><code>private static String[] foo = new String[2];\n</code></pre>\n\n<p>we allocate a <code>String[]</code> with two elements <em>that are initialized to <code>null</code></em>.  And then we didn't change the contents of <code>foo</code> ... so <code>foo[1]</code> will still be <code>null</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Null pointer exception is thrown when an application attempts to use null in a case where an object is required. These include:</p>\n\n<ol>\n<li>Calling the instance method of a null object.</li>\n<li>Accessing or modifying the field of a null object.</li>\n<li>Taking the length of null as if it were an array.</li>\n<li>Accessing or modifying the slots of null as if it were an array.</li>\n<li>Throwing null as if it were a Throwable value. </li>\n</ol>\n\n<p>Applications should throw instances of this class to indicate other illegal uses of the null object. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A NULL pointer is one that points to nowhere.  When you dereference a pointer \"p\", you say \"give me the data at the location stored in \"p\".  When p is a null pointer, the location stored in \"p\" is \"nowhere\", you're saying \"give me the data at the location 'nowhere'\".  Obviously it can't do this, so it throws a NULL pointer exception.</p>\n\n<p>In general, it's because something hasn't been initialized properly.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Java every things is in the form of class.</p>\n\n<p>If you want to use any object then you have two phases</p>\n\n<ol>\n<li>Declare </li>\n<li>Initialization</li>\n</ol>\n\n<p>Example:</p>\n\n<ul>\n<li>Declaration: <code>int a;</code></li>\n<li>initialization: <code>a=0;</code></li>\n</ul>\n\n<p>Same for Array concept</p>\n\n<ul>\n<li>Declaration: <code>Item i[]=new Item[5];</code></li>\n<li>Initialization: <code>i[0]=new Item();</code></li>\n</ul>\n\n<p>If you not given Initialization section then the <code>NullpointerException</code> arise. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\">Java</a> all the variables you declare are actually \"references\" to the objects (or primitives) and not the objects themselves.</p>\n\n<p>When you attempt to execute one object method, the reference ask the living object to execute that method. But if the reference is referencing NULL (nothing, zero, void, nada)  then there is no way the method gets executed. Then the runtime let you know this by throwing a NullPointerException.</p>\n\n<p>Your reference is \"pointing\" to null, thus \"Null -&gt; Pointer\".</p>\n\n<p>The object lives in the VM memory space and the only way to access it is using <code>this</code> references. Take this example:</p>\n\n<pre><code>public class Some {\n    private int id;\n    public int getId(){\n        return this.id;\n    }\n    public setId( int newId ) {\n        this.id = newId;\n    }\n}\n....\n....\n// Somewhere else...\nSome reference = new Some();    // Point to a new object of type Some()\nSome otherReference = null;     // Initiallly this points to NULL\n\nreference.setId( 1 );           // Execute setId method, now private var id is 1\n\nSystem.out.println( reference.getId() ); // Prints 1 to the console\n\notherReference = reference      // Now they both point to the only object.\n\nreference = null;               // \"reference\" now point to null.\n\n// But \"otherReference\" still point to the \"real\" object so this print 1 too...\nSystem.out.println( otherReference.getId() );\n\n// Guess what will happen\nSystem.out.println( reference.getId() ); // :S Throws NullPointerException because \"reference\" is pointing to NULL remember...\n</code></pre>\n\n<p>This an important thing to know - when there are no more references to an object (in the example above when \"reference\" and \"otherReference\" point to null) then the object is \"unreachable\". There is no way we can work with it, so this object is marked for to be  garbage collected, and at some point the VM will free the memory used by this object and will allocate another.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A null pointer exception is an indicator that you are using Object without initialize it.</p>\n\n<p>e.g below is a student class which will use in our code.</p>\n\n<pre><code>public class student {\n    private int id;\n    public int getId(){ \n        return this.id;\n    }\n    public setId( int newId ) { \n        this.id = newId;\n    }\n}\n</code></pre>\n\n<p>below code give you null pointer exception .</p>\n\n<pre><code>public class School\n{\n\n   student Obj_Student;\n   public school()\n   {\n\n      try\n      {\n\n         Obj_Student.getId();\n      }catch(Exception e)\n      {\n           System.out.println(\"Null Pointer \");\n      }\n   }\n\n}\n</code></pre>\n\n<p>Because you are using 'Obj_Student' but you forgot to initialize it like wise\ncorrect code is shown below</p>\n\n<pre><code>public class School\n    {\n\n       student Obj_Student;\n       public school()\n       {\n\n          try\n          {\n             Obj_Student = new student();\n             Obj_Student.setId(12);  \n             Obj_Student.getId();\n          }catch(Exception e)\n          {\n               System.out.println(\"Null Pointer \");\n          }\n       }\n\n    }\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A lot of explanations are already present to explain how it happens and how to fix it but you should also follow <strong>best practices</strong> to avoid <code>NullPointerException</code> at all.</p>\n\n<p>A good list of best practices is for example here:<br>\n<a href=\"http://javarevisited.blogspot.com/2013/05/ava-tips-and-best-practices-to-avoid-nullpointerexception-program-application.html\">http://javarevisited.blogspot.com/2013/05/ava-tips-and-best-practices-to-avoid-nullpointerexception-program-application.html</a></p>\n\n<p>I would add, very important, make a good use of the <code>final</code> modifier.<br>\n<a href=\"http://stackoverflow.com/questions/137868/using-final-modifier-whenever-applicable-in-java\">Using \"final\" modifier whenever applicable in java</a></p>\n\n<p><strong>Summary:</strong></p>\n\n<ol>\n<li>Use <code>final</code> modifier to enforce good initialization.</li>\n<li>Avoid returning null in methods, for example returning empty collections when applicable. </li>\n<li>Use annotations <code>@NotNull</code> and <code>@Nullable</code></li>\n<li>Fail fast and use asserts to avoid propagation of null objects trough the whole application when they shouldn't be null. </li>\n<li>Use equals with known object first: <code>if(\"knownObject\".equals(unknownObject)</code></li>\n<li>Prefer <code>valueOf()</code> over toString().</li>\n<li>Use null safe <code>StringUtils</code> methods <code>StringUtils.isEmpty(null)</code>.</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another occurrence of a <code>NullPointerException</code> occurs when one declares an object array, then immediately tries to dereference elements inside of it.</p>\n\n<pre><code>String[] phrases = new String[10];\nString keyPhrase = \"Bird\";\nfor(String phrase : phrases) {\n    System.out.println(phrase.equals(keyPhrase));\n}\n</code></pre>\n\n<p><sup>This particular NPE can be avoided if the comparison order is reversed; namely, use <code>.equals</code> on a guaranteed non-null object.</sup></p>\n\n<p>All elements inside of an array <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5\">are initialized to their common initial value</a>; for any type of object array, that means that all elements are <code>null</code>.</p>\n\n<p>You <em>must</em> initialize the elements in the array <em>before</em> accessing or derefencing them.</p>\n\n<pre><code>String[] phrases = new String[] {\"The bird\", \"A bird\", \"My bird\", \"Bird\"};\nString keyPhrase = \"Bird\";\nfor(String phrase : phrases) {\n    System.out.println(phrase.equals(keyPhrase));\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In order to answer <strong>How to call the Frame methods from the PApplet?</strong>, I have modified your code snippet to bare minimum. In this modified version when the user click mouse button a <code>System.out</code> is fired.</p>\n\n<p>Now there are two ways in which you can access your <code>Frame</code> object. But before that let me state these two points:</p>\n\n<ul>\n<li>When you create a PApplet like <code>new ExampleFrame(new Menu());</code> and add it in your <code>JFrame</code> like this <code>add(app, BorderLayout.CENTER);</code> then a complex hierarchy of windows/panels are created. </li>\n</ul>\n\n<p><strong>Like this:</strong></p>\n\n<pre><code>javax.swing.JPanel\n    javax.swing.JLayeredPane\n        javax.swing.JRootPane\n            test.ExampleFrame\n</code></pre>\n\n<ul>\n<li><code>PApplet</code> provides a public field for setting and accessing your frame object. And amazingly it is called <code>frame</code> :). You can set it before calling <code>app.init();</code></li>\n</ul>\n\n<p><strong>&gt;&gt;Code</strong></p>\n\n<p>** Checkout the comments in the code**</p>\n\n<p><strong>Modified ExampleFrame.java</strong></p>\n\n<pre><code>import java.awt.BorderLayout;    \nimport javax.swing.JFrame;    \nimport processing.core.PApplet;\n\npublic class ExampleFrame extends JFrame\n{\n    private static final long serialVersionUID = 4792534036194728580L;\n    PApplet app;\n\n    public ExampleFrame(PApplet emApp)\n    {\n        super(\"Ball Maze Game\");\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setLocation(200, 200);\n\n        app = emApp;\n        setSize(615,438);\n        setVisible(true);\n\n        setLayout(new BorderLayout());\n\n        add(app, BorderLayout.CENTER);\n\n        // Setting my frame object\n        app.frame = this;       \n        app.init();\n    }\n\n    // Sample Method\n    public void sampleMethod(String msg)\n    {\n        System.out.println(\"I think '\"+ msg +\"' called me !!\");\n    }\n}\n</code></pre>\n\n<p><strong>Modified Menu.java</strong></p>\n\n<pre><code>import java.awt.Container;\n\nimport processing.core.PApplet;\nimport processing.core.PImage;\n\npublic class Menu extends PApplet\n{\n    private static final long serialVersionUID = -6557167654705489372L;\n\n    PImage background;\n    static String tab = \"\";\n\n    //simple constructor\n    public Menu()\n    {\n\n    }\n\n    public void setup()\n    {\n        size(600, 400);\n        smooth();\n\n        background = loadImage(\"C:/temp/background.jpg\");\n    }\n\n    public void draw()\n    {\n        image(background, 0, 0);\n    }\n\n    public void mousePressed()\n    {\n        Container p = getParent();\n        tab = \"\";\n\n        // FIRST WAY OF ACCESSING PARENT FRAME\n        while(p != null)\n        {\n            //printParentTree(p);\n            if(p instanceof ExampleFrame)\n            {\n                ExampleFrame myframe = (ExampleFrame)p;\n                myframe.sampleMethod(\"First Way\");\n                break;\n            }\n            p = p.getParent();\n        }\n\n        // SECOND WAY OF ACCESSING PARENT FRAME     \n        if(frame != null &amp;&amp; (frame instanceof ExampleFrame))\n        {\n            ExampleFrame myframe = (ExampleFrame)p;\n            myframe.sampleMethod(\"Second Way\");\n        }\n    }\n\n    void printParentTree(Container p) \n    {\n        System.out.println(tab+p.getClass().getName());\n        tab +='\\t';\n    }\n}\n</code></pre>\n\n<p>Checkout the <code>public void mousePressed()</code> method.</p>\n\n<p>For completeness, I am also including Main.java.</p>\n\n<pre><code>public class Main {\n    public static void main(String[] args){\n        new ExampleFrame(new Menu());\n    }\n}\n</code></pre>\n\n<p>Now to answer <strong>Remove all PApplets contents and load another PApplet in</strong></p>\n\n<p>Well I have not tested it. But you can add a <code>JPanel</code> to your <code>JApplet</code> and do all your drawing on that i.e creating child controls etc. When feel like redrawing then call <code>JPanel.removeAll()</code>. Which as per javadoc: </p>\n\n<blockquote>\n  <p>Removes all the components from this\n  container. This method also notifies\n  the layout manager to remove the\n  components from this container's\n  layout via the removeLayoutComponent\n  method.</p>\n</blockquote>\n\n<p>After this call <code>repaint</code> on the <code>JPanel</code>. Try it out, it might work :).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>What needs to happen when mousePressed == ebtn is all the stuff in the Frame will be removed and a Highscores Screen will be loaded</p>\n</blockquote>\n\n<p>The demo. below of a nested <code>CardLayout</code> adds an <code>ActionListener</code> instead of a <code>MouseListener</code>.  It reacts to both mouse <strong>and</strong> keyboard input.</p>\n\n<p>There are a multitude of other ways to include more than one GUI element in the same screen space.  Off the top of my head, <code>JTabbedPane</code>, <code>JSplitPane</code>, <code>JDesktopPane</code>/<code>JInternalFrame</code>, popping the high scores in a <code>JDialog</code> or <code>JOptionPane</code>..</p>\n\n<h3>Screenshots</h3>\n\n<p><img src=\"http://i.stack.imgur.com/dJLvt.png\" alt=\"Game view\">  <img src=\"http://i.stack.imgur.com/i9ZvK.png\" alt=\"High Scores view\"></p>\n\n<h3>CardLayoutDemo.java</h3>\n\n<pre><code>import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass CardLayoutDemo {\n\n    public static void main(String[] args) {\n\n        Runnable r = new Runnable () {\n            public void run() {\n                final JRadioButton game = new JRadioButton(\"Game\", true);\n                JRadioButton highScores = new JRadioButton(\"High Scores\");\n\n                ButtonGroup bg = new ButtonGroup();\n                bg.add( game );\n                bg.add( highScores );\n\n                JPanel buttons = new JPanel(new \n                    FlowLayout(FlowLayout.CENTER, 5, 5));\n                buttons.add( game );\n                buttons.add( highScores );\n\n                JPanel gui = new JPanel(new BorderLayout(5,5));\n                gui.add(buttons, BorderLayout.SOUTH);\n\n                final CardLayout cl = new CardLayout();\n                final JPanel cards = new JPanel(cl);\n                gui.add(cards);\n                cards.add(new JLabel(\"Level 1\"), \"game\");\n                cards.add(new JLabel(\"High Scores\"), \"scores\");\n\n                ActionListener al = new ActionListener(){\n                    public void actionPerformed(ActionEvent ae) {\n                        if (game.isSelected()) {\n                            cl.show(cards, \"game\");\n                        } else {\n                            cl.show(cards, \"scores\");\n                        }\n                    }\n                };\n                game.addActionListener(al);\n                highScores.addActionListener(al);\n\n                JOptionPane.showMessageDialog(null, gui);\n            }\n        };\n        SwingUtilities.invokeLater(r);\n    }\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are many ways to download files. Following I will post most common ways; it is up to you to decide which method is better for your app.</p>\n\n<h1>1. Use <code>AsyncTask</code> and show the download progress in a dialog</h1>\n\n<p>This method will allow you to execute some background processes and update the UI at the same time (in this case, we'll update a progress bar).</p>\n\n<p>This is an example code:</p>\n\n<pre><code>// declare the dialog as a member field of your activity\nProgressDialog mProgressDialog;\n\n// instantiate it within the onCreate method\nmProgressDialog = new ProgressDialog(YourActivity.this);\nmProgressDialog.setMessage(\"A message\");\nmProgressDialog.setIndeterminate(true);\nmProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\nmProgressDialog.setCancelable(true);\n\n// execute this when the downloader must be fired\nfinal DownloadTask downloadTask = new DownloadTask(YourActivity.this);\ndownloadTask.execute(\"the url to the file you want to download\");\n\nmProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n    @Override\n    public void onCancel(DialogInterface dialog) {\n        downloadTask.cancel(true);\n    }\n});\n</code></pre>\n\n<p>The <code>AsyncTask</code> will look like this:</p>\n\n<pre><code>// usually, subclasses of AsyncTask are declared inside the activity class.\n// that way, you can easily modify the UI thread from here\nprivate class DownloadTask extends AsyncTask&lt;String, Integer, String&gt; {\n\n    private Context context;\n    private PowerManager.WakeLock mWakeLock;\n\n    public DownloadTask(Context context) {\n        this.context = context;\n    }\n\n    @Override\n    protected String doInBackground(String... sUrl) {\n        InputStream input = null;\n        OutputStream output = null;\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(sUrl[0]);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.connect();\n\n            // expect HTTP 200 OK, so we don't mistakenly save error report\n            // instead of the file\n            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                return \"Server returned HTTP \" + connection.getResponseCode()\n                        + \" \" + connection.getResponseMessage();\n            }\n\n            // this will be useful to display download percentage\n            // might be -1: server did not report the length\n            int fileLength = connection.getContentLength();\n\n            // download the file\n            input = connection.getInputStream();\n            output = new FileOutputStream(\"/sdcard/file_name.extension\");\n\n            byte data[] = new byte[4096];\n            long total = 0;\n            int count;\n            while ((count = input.read(data)) != -1) {\n                // allow canceling with back button\n                if (isCancelled()) {\n                    input.close();\n                    return null;\n                }\n                total += count;\n                // publishing the progress....\n                if (fileLength &gt; 0) // only if total length is known\n                    publishProgress((int) (total * 100 / fileLength));\n                output.write(data, 0, count);\n            }\n        } catch (Exception e) {\n            return e.toString();\n        } finally {\n            try {\n                if (output != null)\n                    output.close();\n                if (input != null)\n                    input.close();\n            } catch (IOException ignored) {\n            }\n\n            if (connection != null)\n                connection.disconnect();\n        }\n        return null;\n    }\n</code></pre>\n\n<p>The method above (<code>doInBackground</code>) runs always on a background thread. You shouldn't do any UI tasks there. On the other hand, the <code>onProgressUpdate</code> and <code>onPreExecute</code> run on the UI thread, so there you can change the progress bar:</p>\n\n<pre><code>    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n        // take CPU lock to prevent CPU from going off if the user \n        // presses the power button during download\n        PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\n        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\n             getClass().getName());\n        mWakeLock.acquire();\n        mProgressDialog.show();\n    }\n\n    @Override\n    protected void onProgressUpdate(Integer... progress) {\n        super.onProgressUpdate(progress);\n        // if we get here, length is known, now set indeterminate to false\n        mProgressDialog.setIndeterminate(false);\n        mProgressDialog.setMax(100);\n        mProgressDialog.setProgress(progress[0]);\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        mWakeLock.release();\n        mProgressDialog.dismiss();\n        if (result != null)\n            Toast.makeText(context,\"Download error: \"+result, Toast.LENGTH_LONG).show();\n        else\n            Toast.makeText(context,\"File downloaded\", Toast.LENGTH_SHORT).show();\n    }\n</code></pre>\n\n<p>For this to run, you need the WAKE_LOCK permission.</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.WAKE_LOCK\" /&gt;\n</code></pre>\n\n<h1>2. Download from Service</h1>\n\n<p>The big question here is: <em>how do I update my activity from a service?</em>. In the next example we are going to use two classes you may not be aware of: <code>ResultReceiver</code> and <code>IntentService</code>. <code>ResultReceiver</code> is the one that will allow us to update our thread from a service; <code>IntentService</code> is a subclass of <code>Service</code> which spawns a thread to do background work from there (you should know that a <code>Service</code> runs actually in the same thread of your app; when you extends <code>Service</code>, you must manually spawn new threads to run CPU blocking operations).</p>\n\n<p>Download service can look like this:</p>\n\n<pre><code>public class DownloadService extends IntentService {\n    public static final int UPDATE_PROGRESS = 8344;\n    public DownloadService() {\n        super(\"DownloadService\");\n    }\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        String urlToDownload = intent.getStringExtra(\"url\");\n        ResultReceiver receiver = (ResultReceiver) intent.getParcelableExtra(\"receiver\");\n        try {\n            URL url = new URL(urlToDownload);\n            URLConnection connection = url.openConnection();\n            connection.connect();\n            // this will be useful so that you can show a typical 0-100% progress bar\n            int fileLength = connection.getContentLength();\n\n            // download the file\n            InputStream input = new BufferedInputStream(connection.getInputStream());\n            OutputStream output = new FileOutputStream(\"/sdcard/BarcodeScanner-debug.apk\");\n\n            byte data[] = new byte[1024];\n            long total = 0;\n            int count;\n            while ((count = input.read(data)) != -1) {\n                total += count;\n                // publishing the progress....\n                Bundle resultData = new Bundle();\n                resultData.putInt(\"progress\" ,(int) (total * 100 / fileLength));\n                receiver.send(UPDATE_PROGRESS, resultData);\n                output.write(data, 0, count);\n            }\n\n            output.flush();\n            output.close();\n            input.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        Bundle resultData = new Bundle();\n        resultData.putInt(\"progress\" ,100);\n        receiver.send(UPDATE_PROGRESS, resultData);\n    }\n}\n</code></pre>\n\n<p>Add the service to your manifest:</p>\n\n<pre><code>&lt;service android:name=\".DownloadService\"/&gt;\n</code></pre>\n\n<p>And the activity will look like this:</p>\n\n<pre><code>// initialize the progress dialog like in the first example\n\n// this is how you fire the downloader\nmProgressDialog.show();\nIntent intent = new Intent(this, DownloadService.class);\nintent.putExtra(\"url\", \"url of the file to download\");\nintent.putExtra(\"receiver\", new DownloadReceiver(new Handler()));\nstartService(intent);\n</code></pre>\n\n<p>Here is were <code>ResultReceiver</code> comes to play:</p>\n\n<pre><code>private class DownloadReceiver extends ResultReceiver{\n    public DownloadReceiver(Handler handler) {\n        super(handler);\n    }\n\n    @Override\n    protected void onReceiveResult(int resultCode, Bundle resultData) {\n        super.onReceiveResult(resultCode, resultData);\n        if (resultCode == DownloadService.UPDATE_PROGRESS) {\n            int progress = resultData.getInt(\"progress\");\n            mProgressDialog.setProgress(progress);\n            if (progress == 100) {\n                mProgressDialog.dismiss();\n            }\n        }\n    }\n}\n</code></pre>\n\n<h2>2.1 Use Groundy library</h2>\n\n<p><a href=\"http://casidiablo.github.com/groundy\"><strong>Groundy</strong></a> is a library that basically helps you run pieces of code in a background service, and it is based on the <code>ResultReceiver</code> concept shown above. This library is <strong>deprecated</strong> at the moment. This is how the <strong>whole</strong> code would look like:</p>\n\n<p>The activity where you are showing the dialog...</p>\n\n<pre><code>public class MainActivity extends Activity {\n\n    private ProgressDialog mProgressDialog;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        findViewById(R.id.btn_download).setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n                String url = ((EditText) findViewById(R.id.edit_url)).getText().toString().trim();\n                Bundle extras = new Bundler().add(DownloadTask.PARAM_URL, url).build();\n                Groundy.create(DownloadExample.this, DownloadTask.class)\n                        .receiver(mReceiver)\n                        .params(extras)\n                        .queue();\n\n                mProgressDialog = new ProgressDialog(MainActivity.this);\n                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n                mProgressDialog.setCancelable(false);\n                mProgressDialog.show();\n            }\n        });\n    }\n\n    private ResultReceiver mReceiver = new ResultReceiver(new Handler()) {\n        @Override\n        protected void onReceiveResult(int resultCode, Bundle resultData) {\n            super.onReceiveResult(resultCode, resultData);\n            switch (resultCode) {\n                case Groundy.STATUS_PROGRESS:\n                    mProgressDialog.setProgress(resultData.getInt(Groundy.KEY_PROGRESS));\n                    break;\n                case Groundy.STATUS_FINISHED:\n                    Toast.makeText(DownloadExample.this, R.string.file_downloaded, Toast.LENGTH_LONG);\n                    mProgressDialog.dismiss();\n                    break;\n                case Groundy.STATUS_ERROR:\n                    Toast.makeText(DownloadExample.this, resultData.getString(Groundy.KEY_ERROR), Toast.LENGTH_LONG).show();\n                    mProgressDialog.dismiss();\n                    break;\n            }\n        }\n    };\n}\n</code></pre>\n\n<p>A <code>GroundyTask</code> implementation used by <strong>Groundy</strong> to download the file and show the progress:</p>\n\n<pre><code>public class DownloadTask extends GroundyTask {    \n    public static final String PARAM_URL = \"com.groundy.sample.param.url\";\n\n    @Override\n    protected boolean doInBackground() {\n        try {\n            String url = getParameters().getString(PARAM_URL);\n            File dest = new File(getContext().getFilesDir(), new File(url).getName());\n            DownloadUtils.downloadFile(getContext(), url, dest, DownloadUtils.getDownloadListenerForTask(this));\n            return true;\n        } catch (Exception pokemon) {\n            return false;\n        }\n    }\n}\n</code></pre>\n\n<p>And just add this to the manifest:</p>\n\n<pre><code>&lt;service android:name=\"com.codeslap.groundy.GroundyService\"/&gt;\n</code></pre>\n\n<p>It couldn't be easier I think. Just grab the latest jar <a href=\"https://github.com/casidiablo/groundy/downloads\">from Github</a> and you are ready to go. Keep in mind that <strong>Groundy</strong>'s main purpose is to make calls to external REST apis in a background service and post results to the UI with easily. If you are doing something like that in your app, it could be really useful.</p>\n\n<h2>2.2 Use <a href=\"https://github.com/koush/ion\">https://github.com/koush/ion</a></h2>\n\n<h1>3. Use <code>DownloadManager</code> class (<code>GingerBread</code> and newer only)</h1>\n\n<p>This method is awesome, you do not have to worry about downloading the file manually, handle threads, streams, etc. GingerBread brought a new feature: <code>DownloadManager</code> which allows you to download files easily and delegate the hard work to the system.</p>\n\n<p>First, let's see a utility method:</p>\n\n<pre><code>/**\n * @param context used to check the device version and DownloadManager information\n * @return true if the download manager is available\n */\npublic static boolean isDownloadManagerAvailable(Context context) {\n\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.GINGERBREAD) {\n        return true;\n    }\n    return false;\n}\n</code></pre>\n\n<p>Method's name explains it all. Once you are sure <code>DownloadManager</code> is available, you can do something like this:</p>\n\n<pre><code>String url = \"url you want to download\";\nDownloadManager.Request request = new DownloadManager.Request(Uri.parse(url));\nrequest.setDescription(\"Some descrition\");\nrequest.setTitle(\"Some title\");\n// in order for this if to run, you must use the android 3.2 to compile your app\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {\n    request.allowScanningByMediaScanner();\n    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n}\nrequest.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, \"name-of-the-file.ext\");\n\n// get download service and enqueue file\nDownloadManager manager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nmanager.enqueue(request);\n</code></pre>\n\n<p>Download progress will be showing in the notification bar.</p>\n\n<h1>Final thoughts</h1>\n\n<p>First and second methods are just the tip of the iceberg. There are lots of things you have to keep in mind if you want your app to be robust. Here is a brief list:</p>\n\n<ul>\n<li>You must check whether user has an internet connection available</li>\n<li>Make sure you have the right permissions (<code>INTERNET</code> and <code>WRITE_EXTERNAL_STORAGE</code>); also <code>ACCESS_NETWORK_STATE</code> if you want to check internet availability.</li>\n<li>Make sure the directory were you are going to download files exist and has write permissions.</li>\n<li>If download is too big you may want to implement a way to resume the download if previous attempts failed.</li>\n<li>Users will be grateful if you allow them to interrupt the download.</li>\n</ul>\n\n<p>Unless you want to have full control over the download process, I highly recommend using <code>DownloadManager</code> which already handles most of the items listed above.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Don't forget to add permissions to your manifest file if you're gonna be downloading stuff from the internet!</p>\n\n<pre><code>&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.helloandroid\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\"&gt;\n\n        &lt;uses-sdk android:minSdkVersion=\"10\" /&gt;\n\n        &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"&gt;&lt;/uses-permission&gt;\n        &lt;uses-permission android:name=\"android.permission.INTERNET\"&gt;&lt;/uses-permission&gt;\n        &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"&gt;&lt;/uses-permission&gt;\n        &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\"&gt;&lt;/uses-permission&gt;\n\n        &lt;application \n            android:icon=\"@drawable/icon\" \n            android:label=\"@string/app_name\" \n            android:debuggable=\"true\"&gt;\n\n        &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes the code above will work .But if you are updating your progressbar in <code>onProgressUpdate</code> of <code>Asynctask</code>  and you press back button or finish your activity <code>AsyncTask</code> looses its track with your UI .And when you go back to your activity, even if  download is running in background you will see no update on progressbar. So on <code>OnResume()</code> try to run a thread like <code>runOnUIThread</code> with   a timer task that updates ur progressbar with values updating from the <code>AsyncTask</code> running background.</p>\n\n<pre><code>private void updateProgressBar(){\n    Runnable runnable = new updateProgress();\n    background = new Thread(runnable);\n    background.start();\n}\n\npublic class updateProgress implements Runnable {\n    public void run() {\n        while(Thread.currentThread()==background)\n            //while (!Thread.currentThread().isInterrupted()) {\n            try {\n                Thread.sleep(1000); \n                Message msg = new Message();\n                progress = getProgressPercentage();        \n                handler.sendMessage(msg);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            } catch (Exception e) {\n        }\n    }\n}\n\nprivate Handler handler = new Handler(){\n    @Override\n    public void handleMessage(Message msg) {\n        progress.setProgress(msg.what);\n    }\n};\n</code></pre>\n\n<p>Don't forget to Destroy the thread when ur activity is not visible.</p>\n\n<pre><code>private void destroyRunningThreads() {\n    if (background != null) {\n        background.interrupt();\n        background=null;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'd recommend you to use my Project <a href=\"https://github.com/vince-styling/Netroid\">Netroid</a>, It base on <a href=\"https://www.captechconsulting.com/blog/raymond-robinson/google-io-2013-volley-image-cache-tutorial\">Volley</a> which Google IO 2013 presentation, I extend it, add some features such as multi-events callback, file download management, I think that's what you looking for.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found <a href=\"http://www.logisticinfotech.com/blog/android-download-file-progressbar-really-easy/\" rel=\"nofollow\">this</a> blog post very helpful, Its using loopJ to download file, it has only one Simple function, will be helpful to some new android guys.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Do not forget to replace \"/sdcard...\" by <strong><em>new File</em></strong>(\"/mnt/sdcard/...\") otherwise you will get a <strong>FileNotFoundException</strong></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My personal advice is to use <strong>Progress Dialog</strong> and build up before execution , or initiate at <code>OnPreExecute()</code> , publish progress often if you use horizontal style of progress bar of the progress dialog. The remaining part is to optimize the algorithm of <code>doInBackground</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This post is great .. thanks all</p>\n\n<p>I have modified AsyncTask class to handle creation of progressDialog at the same context .I think fllowing code will be more reusable.\n(it can be called from any activity just pass context,target File,dialog message)</p>\n\n<pre><code>public static class DownloadTask extends AsyncTask&lt;String, Integer, String&gt; {\n    private ProgressDialog mPDialog;\n    private Context mContext;\n    private PowerManager.WakeLock mWakeLock;\n    private File mTargetFile;\n    //Constructor parameters :\n    // @context (current Activity)\n    // @targetFile (File object to write,it will be overwritten if exist)\n    // @dialogMessage (message of the ProgresDialog)\n    public DownloadTask(Context context,File targetFile,String dialogMessage) {\n        this.mContext = context;\n        this.mTargetFile = targetFile;\n        mPDialog = new ProgressDialog(context);\n\n        mPDialog.setMessage(dialogMessage);\n        mPDialog.setIndeterminate(true);\n        mPDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n        mPDialog.setCancelable(true);\n        // reference to instance to use inside listener\n        final DownloadTask me = this;\n        mPDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n            @Override\n            public void onCancel(DialogInterface dialog) {\n                me.cancel(true);\n            }\n        });\n        Log.i(\"DownloadTask\",\"Constructor done\");\n    }\n\n    @Override\n    protected String doInBackground(String... sUrl) {\n        InputStream input = null;\n        OutputStream output = null;\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(sUrl[0]);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.connect();\n\n            // expect HTTP 200 OK, so we don't mistakenly save error report\n            // instead of the file\n            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                return \"Server returned HTTP \" + connection.getResponseCode()\n                        + \" \" + connection.getResponseMessage();\n            }\n            Log.i(\"DownloadTask\",\"Response \" + connection.getResponseCode());\n\n            // this will be useful to display download percentage\n            // might be -1: server did not report the length\n            int fileLength = connection.getContentLength();\n\n            // download the file\n            input = connection.getInputStream();\n            output = new FileOutputStream(mTargetFile,false);\n\n            byte data[] = new byte[4096];\n            long total = 0;\n            int count;\n            while ((count = input.read(data)) != -1) {\n                // allow canceling with back button\n                if (isCancelled()) {\n                    Log.i(\"DownloadTask\",\"Cancelled\");\n                    input.close();\n                    return null;\n                }\n                total += count;\n                // publishing the progress....\n                if (fileLength &gt; 0) // only if total length is known\n                    publishProgress((int) (total * 100 / fileLength));\n                output.write(data, 0, count);\n            }\n        } catch (Exception e) {\n            return e.toString();\n        } finally {\n            try {\n                if (output != null)\n                    output.close();\n                if (input != null)\n                    input.close();\n            } catch (IOException ignored) {\n            }\n\n            if (connection != null)\n                connection.disconnect();\n        }\n        return null;\n    }\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n        // take CPU lock to prevent CPU from going off if the user\n        // presses the power button during download\n        PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);\n        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\n                getClass().getName());\n        mWakeLock.acquire();\n\n        mPDialog.show();\n\n    }\n\n    @Override\n    protected void onProgressUpdate(Integer... progress) {\n        super.onProgressUpdate(progress);\n        // if we get here, length is known, now set indeterminate to false\n        mPDialog.setIndeterminate(false);\n        mPDialog.setMax(100);\n        mPDialog.setProgress(progress[0]);\n\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        Log.i(\"DownloadTask\", \"Work Done! PostExecute\");\n        mWakeLock.release();\n        mPDialog.dismiss();\n        if (result != null)\n            Toast.makeText(mContext,\"Download error: \"+result, Toast.LENGTH_LONG).show();\n        else\n            Toast.makeText(mContext,\"File Downloaded\", Toast.LENGTH_SHORT).show();\n    }\n}\n</code></pre>\n\n<p>I hope this will help...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While I was starting to learn android development, I had learnt that ProgressDialog is the way to go. There is the setProgress method of ProgressDialog which can be invoked to update the progress level as the file gets downloaded.</p>\n\n<p>The best I have seen in many apps is that they customize this progress dialog's attributes to give a better look and feel to the progress dialog than the stock version. Good to keeping the user engaged with some animation of like frog, elephant or cute cats/puppies. Any animation with in the progress dialog attracts users and they don't feel like being kept waiting for long.</p>\n\n<p>I will write a blog post on ProgressDialog and share here soon.</p>\n\n<p>Edit:\n<a href=\"http://www.javaexperience.com/show-progress-bar-when-downloading-a-file-in-android/\" rel=\"nofollow\">Show Progress Bar when downloading a file in android</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use Android Query library, very cool indeed... You can change it to use ProgressDialog as you see in other examples, this one will show progress view from your layout and hide it after completion.</p>\n\n<pre><code>File target = new File(new File(Environment.getExternalStorageDirectory(), \"ApplicationName\"), \"tmp.pdf\");\n            new AQuery(this).progress(R.id.progress_view).download(_competition.qualificationScoreCardsPdf(), target, new AjaxCallback&lt;File&gt;() {\n                public void callback(String url, File file, AjaxStatus status) {\n                    if (file != null) {\n                      //do something with file  \n                    } \n                }\n            });\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>With JDK1.6, you can use the built-in Javascript engine.</p>\n\n<pre><code>import javax.script.ScriptEngineManager;\nimport javax.script.ScriptEngine;\n\npublic class Test {\n  public static void main(String[] args) throws Exception{\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String foo = \"40+2\";\n    System.out.println(engine.eval(foo));\n    } \n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've written a simple parser for arithmetic expressions as an example to answer this question. It supports addition, subtraction, multiplication, division, and exponentiation (using the <code>^</code> symbol). It supports grouping using <code>(</code>...<code>)</code>, and it gets the operator <a href=\"https://en.wikipedia.org/wiki/Order_of_operations\">precedence</a> and <a href=\"https://en.wikipedia.org/wiki/Operator_associativity\">associativity</a> rules correct.</p>\n\n<pre><code>public static double eval(final String str) {\n    class Parser {\n        int pos = -1, c;\n\n        void eatChar() {\n            c = (++pos &lt; str.length()) ? str.charAt(pos) : -1;\n        }\n\n        void eatSpace() {\n            while (Character.isWhitespace(c)) eatChar();\n        }\n\n        double parse() {\n            eatChar();\n            double v = parseExpression();\n            if (c != -1) throw new RuntimeException(\"Unexpected: \" + (char)c);\n            return v;\n        }\n\n        // Grammar:\n        // expression = term | expression `+` term | expression `-` term\n        // term = factor | term `*` factor | term `/` factor | term brackets\n        // factor = brackets | number | factor `^` factor\n        // brackets = `(` expression `)`\n\n        double parseExpression() {\n            double v = parseTerm();\n            for (;;) {\n                eatSpace();\n                if (c == '+') { // addition\n                    eatChar();\n                    v += parseTerm();\n                } else if (c == '-') { // subtraction\n                    eatChar();\n                    v -= parseTerm();\n                } else {\n                    return v;\n                }\n            }\n        }\n\n        double parseTerm() {\n            double v = parseFactor();\n            for (;;) {\n                eatSpace();\n                if (c == '/') { // division\n                    eatChar();\n                    v /= parseFactor();\n                } else if (c == '*' || c == '(') { // multiplication\n                    if (c == '*') eatChar();\n                    v *= parseFactor();\n                } else {\n                    return v;\n                }\n            }\n        }\n\n        double parseFactor() {\n            double v;\n            boolean negate = false;\n            eatSpace();\n            if (c == '+' || c == '-') { // unary plus &amp; minus\n                negate = c == '-';\n                eatChar();\n                eatSpace();\n            }\n            if (c == '(') { // brackets\n                eatChar();\n                v = parseExpression();\n                if (c == ')') eatChar();\n            } else { // numbers\n                StringBuilder sb = new StringBuilder();\n                while ((c &gt;= '0' &amp;&amp; c &lt;= '9') || c == '.') {\n                    sb.append((char)c);\n                    eatChar();\n                }\n                if (sb.length() == 0) throw new RuntimeException(\"Unexpected: \" + (char)c);\n                v = Double.parseDouble(sb.toString());\n            }\n            eatSpace();\n            if (c == '^') { // exponentiation\n                eatChar();\n                v = Math.pow(v, parseFactor());\n            }\n            if (negate) v = -v; // unary minus is applied after exponentiation; e.g. -3^2=-9\n            return v;\n        }\n    }\n    return new Parser().parse();\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>System.out.println(eval(\"2^3 - 3 + 1 + 3 * ((4+4*4)/2) / 5 + -5\"));\n</code></pre>\n\n<p>Output: 7.0 <a href=\"https://www.wolframalpha.com/input/?i=2%5E3%20-%203%20%2B%201%20%2B%203%20*%20%28%284%2B4*4%29%2F2%29%20%2F%205%20%2B%20-5\">(which is correct)</a></p>\n\n<p>Code released to public domain. Have fun!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The correct way to solve this is with a <a href=\"http://en.wikipedia.org/wiki/Lexical_analysis\">lexer</a> and a <a href=\"http://en.wikipedia.org/wiki/Parser\">parser</a>. You can write simple versions of these yourself, or those pages also have links to Java lexers and parsers.</p>\n\n<p>Creating a recursive descent parser is a really good learning exercise.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://github.com/uklimaschewski/EvalEx\">HERE</a> is another open source library on GitHub named EvalEx.</p>\n\n<p>Unlike the JavaScript engine this library is focused in evaluating mathematical expressions only. Moreover, the library is extensible and supports use of boolean operators as well as parentheses.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also try the <a href=\"http://www.beanshell.org\">BeanShell</a> interpreter:</p>\n\n<pre><code>Interpreter interpreter = new Interpreter();\ninterpreter.eval(\"result = (7+21*6)/(32-27)\");\nSystem.out.println(interpreter.get(\"result\"));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://www.beyondlinux.com/2011/08/07/3-method-to-evaluate-expressions/\" rel=\"nofollow\">This article</a> points to 3 different approaches, one which is <a href=\"http://www.jarvana.com/jarvana/view/commons-jexl/commons-jexl/1.0-RC1/commons-jexl-1.0-RC1.distribution-zip!/commons-jexl-1.0-RC1/docs/index.html\" rel=\"nofollow\">JEXL from Apache</a> and allows for scripts that include references to java objects.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How about something like this:</p>\n\n<pre><code>String st = \"10+3\";\nint result;\nfor(int i=0;i&lt;st.length();i++)\n{\n  if(st.charAt(i)=='+')\n  {\n    result=Integer.parseInt(st.substring(0, i))+Integer.parseInt(st.substring(i+1, st.length()));\n    System.out.print(result);\n  }         \n}\n</code></pre>\n\n<p>and do the similar thing for every other mathematical operator accordingly .. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It seems like <a href=\"http://sourceforge.net/projects/jep/\" rel=\"nofollow\">JEP</a> should do the job</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another way is to use Spring Expression Language or SpEL which does a whole lot more along with evaluating mathematical expressions therefore maybe slightly overkill. You do not have to be using Spring framework to use this expression library as it is stand-alone. Copying examples from SpEL's documentation: </p>\n\n<pre><code>ExpressionParser parser = new SpelExpressionParser();\nint two = parser.parseExpression(\"1 + 1\").getValue(Integer.class); // 2 \ndouble twentyFour = parser.parseExpression(\"2.0 * 3e0 * 4\").getValue(Double.class); //24.0\n</code></pre>\n\n<p>Read more concise SpEL examples <a href=\"http://syntx.co/languages-frameworks/evaluating-expressions-using-spring-expression-language-spel/\" rel=\"nofollow\">here</a> and the complete docs <a href=\"http://docs.spring.io/spring/docs/3.0.x/reference/expressions.html\" rel=\"nofollow\">here</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is another interesting alternative \n<a href=\"https://github.com/Shy-Ta/expression-evaluator-demo\" rel=\"nofollow\">https://github.com/Shy-Ta/expression-evaluator-demo</a></p>\n\n<p>The usage is very simple and gets the job done, for example:</p>\n\n<pre><code>  ExpressionsEvaluator evalExpr = ExpressionsFactory.create(\"2+3*4-6/2\");  \n  assertEquals(BigDecimal.valueOf(11), evalExpr.eval()); \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think what ever way you do this it's going to involve a lot of conditional statements. But for single operations like in your examples you could limit it to 4 if statements with something like </p>\n\n<pre><code>String math = \"1+4\";\n\nif (math.split(\"+\").length == 2) {\n    //do calculation\n} else if (math.split(\"-\").length == 2) {\n    //do calculation\n} ...\n</code></pre>\n\n<p>It gets a whole lot more complicated when you want to deal with multiple operations like \"4+5*6\".</p>\n\n<p>If you are trying to build a calculator then I'd surgest passing each section of the calculation separatly (each number or operator) rather than as a single string.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import java.util.*;\nStringTokenizer st;\nint ans;\n\npublic class check { \n   String str=\"7 + 5\";\n   StringTokenizer st=new StringTokenizer(str);\n\n   int v1=Integer.parseInt(st.nextToken);\n   String op=st.nextToken;\n   int v2=Integer.parseInt(st.nextToken);\n\n   if(op.equals(\"+\")) { ans= v1 + v2; }\n   if(op.equals(\"-\")) { ans= v1 - v2; }\n   //.........\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>if we are going to implement it then we can can use the below algorithm :--</p>\n\n<ol>\n<li><p>While there are still tokens to be read in,</p>\n\n<p>1.1 Get the next token.\n1.2 If the token is:</p>\n\n<p>1.2.1 A number: push it onto the value stack.</p>\n\n<p>1.2.2 A variable: get its value, and push onto the value stack.</p>\n\n<p>1.2.3 A left parenthesis: push it onto the operator stack.</p>\n\n<p>1.2.4 A right parenthesis:</p>\n\n<pre><code> 1 While the thing on top of the operator stack is not a \n   left parenthesis,\n     1 Pop the operator from the operator stack.\n     2 Pop the value stack twice, getting two operands.\n     3 Apply the operator to the operands, in the correct order.\n     4 Push the result onto the value stack.\n 2 Pop the left parenthesis from the operator stack, and discard it.\n</code></pre>\n\n<p>1.2.5 An operator (call it thisOp):</p>\n\n<pre><code> 1 While the operator stack is not empty, and the top thing on the\n   operator stack has the same or greater precedence as thisOp,\n   1 Pop the operator from the operator stack.\n   2 Pop the value stack twice, getting two operands.\n   3 Apply the operator to the operands, in the correct order.\n   4 Push the result onto the value stack.\n 2 Push thisOp onto the operator stack.\n</code></pre></li>\n<li><p>While the operator stack is not empty,\n1 Pop the operator from the operator stack.\n2 Pop the value stack twice, getting two operands.\n3 Apply the operator to the operands, in the correct order.\n4 Push the result onto the value stack.</p></li>\n<li><p>At this point the operator stack should be empty, and the value\nstack should have only one value in it, which is the final result.</p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is possible to convert any expression string in infix notation to a postfix notation using <a href=\"https://en.wikipedia.org/wiki/Shunting-yard_algorithm\" rel=\"nofollow\">Djikstra's shunting-yard algorithm</a>. The result of the algorithm can then serve as input to the <a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\" rel=\"nofollow\">postfix algorithm</a> with returns the result of the expression.</p>\n\n<p>I wrote an article about it <a href=\"http://emmanueljohn.me/2015/07/05/shunting-yard-algorithm/\" rel=\"nofollow\">here, with an implementation in java</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's too late to answer but I came across same situation to evaluate expression in java, it might help someone</p>\n\n<p><code>MVEL</code> does runtime evaluation of expressions, we can write a java code in <code>String</code> to get it evaluated in this.</p>\n\n<pre><code>    String expressionStr = \"x+y\";\n    Map&lt;String, Object&gt; vars = new HashMap&lt;String, Object&gt;();\n    vars.put(\"x\", 10);\n    vars.put(\"y\", 20);\n    ExecutableStatement statement = (ExecutableStatement) MVEL.compileExpression(expressionStr);\n    Object result = MVEL.executeExpression(statement, vars);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You might have a look at the <a href=\"https://bitbucket.org/axelclk/symja_android_library/wiki/Home\" rel=\"nofollow\">Symja framework</a>:</p>\n\n<pre><code>ExprEvaluator util = new ExprEvaluator(); \nIExpr result = util.evaluate(\"10-40\");\nSystem.out.println(result.toString()); // -&gt; \"-30\" \n</code></pre>\n\n<p>Take note that definitively more complex expressions can be evaluated:</p>\n\n<pre><code>// D(...) gives the derivative of the function Sin(x)*Cos(x)\nIAST function = D(Times(Sin(x), Cos(x)), x);\nIExpr result = util.evaluate(function);\n// print: Cos(x)^2-Sin(x)^2\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>//solve(\"5+3\"), solve(\"10-4\")    \npublic int solve(String str)\n    {\n        int len = str.length();\n        int i=0;\n        String str1 = \"\", str2 = \"\";\n        char op;\n        int num1 = 0, num2 = 0, res=0;\n        for(i=0; i&lt;len; i++)\n        {\n            if(str.charAt(i)=='+' || str.charAt(i)=='-')\n                break;\n            str1 = str1 + str.charAt(i);\n        }\n\n        op = str.charAt(i);\n        i++;\n\n        while(i&lt;len)\n        {\n            str2 = str2 + str.charAt(i);\n            i++;\n        }\n        num1 = Integer.parseInt(str1);\n        num2 = Integer.parseInt(str2);\n\n        if(op=='+')\n            res = num1+num2;\n        else if(op=='-')\n            res = num1-num2;\n\n        return res;\n    }\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>public static void main(String[] args){   \n    System.out.println(\"=\"+evaluate(args[2]));\n\n}\npublic static String[] symbols = new String[]{\"\\\\-\",\"\\\\+\",\"\\\\/\",\"\\\\*\"};\n\npublic static Integer evaluate(String exp){\n    System.out.print(exp);\n    exp = exp.trim(); \n    boolean isint = true;\n    for(int i = 0; i&lt;exp.length() &amp;&amp; isint;i++){\n        if(exp.charAt(i)&gt;'9' || exp.charAt(i) &lt;'0'){\n            isint = false;\n        }\n    }\n    if(isint) return Integer.parseInt(exp);\n\n    for(String symbol:symbols){\n        String[] split = exp.split(symbol);\n        if(split.length&gt;1){\n            int ev = evaluate(split[0]);\n            for(int i = 1;i&lt;split.length;i++){\n                System.out.print(symbol);\n                int val = evaluate(split[i]);\n                if(\"\\\\*\".equals(symbol)) ev*=val;\n                if(\"\\\\/\".equals(symbol)) ev/=val;\n                if(\"\\\\+\".equals(symbol)) ev+=val;\n                if(\"\\\\-\".equals(symbol)) ev-=val;\n            }\n            return ev;\n        }\n    }\n    return null;\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID\"><code>Settings.Secure#ANDROID_ID</code></a> returns the Android ID as an <em>unique</em> 64-bit hex string.</p>\n\n<pre><code>import android.provider.Settings.Secure;\n\nprivate String android_id = Secure.getString(getContext().getContentResolver(),\n                                                        Secure.ANDROID_ID); \n</code></pre>\n\n<h3>Update: 06/05/2015</h3>\n\n<p>When reviewing this as a possible solution, please consider <a href=\"http://stackoverflow.com/a/2853253/166712\">Joe's answer</a> below instead as an alternative.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>UPDATE</strong>: As of recent versions of Android, many of the issues with <code>ANDROID_ID</code> have been resolved, and I believe this approach is no longer necessary. Please take a look at <a href=\"http://stackoverflow.com/a/2785493/231078\">Anthony's answer</a>.</p>\n\n<p>Full disclosure: my app that the below approach was originally used in no longer uses this approach, and we now use the approach outlined in the <a href=\"http://android-developers.blogspot.com/2011/03/identifying-app-installations.html\">Android Developer Blog</a> entry that <a href=\"http://stackoverflow.com/a/5626208/231078\">emmby's answer</a> links to (namely, generating and saving a <a href=\"http://developer.android.com/reference/java/util/UUID.html#randomUUID()\"><code>UUID#randomUUID()</code></a>).</p>\n\n<hr>\n\n<p>There are many answers to this question, most of which will only work \"some\" of the time, and unfortunately that's not good enough.</p>\n\n<p>Based on my tests of devices (all phones, at least one of which is not activated):</p>\n\n<ol>\n<li>All devices tested returned a value for <code>TelephonyManager.getDeviceId()</code></li>\n<li>All GSM devices (all tested with a SIM) returned a value for <code>TelephonyManager.getSimSerialNumber()</code></li>\n<li>All CDMA devices returned null for <code>getSimSerialNumber()</code> (as expected)</li>\n<li>All devices with a Google account added returned a value for <code>ANDROID_ID</code></li>\n<li>All CDMA devices returned the same value (or derivation of the same value) for both <code>ANDROID_ID</code> and <code>TelephonyManager.getDeviceId()</code> -- <em>as long as</em> a Google account has been added during setup.</li>\n<li>I did not yet have a chance to test GSM devices with no SIM, a GSM device with no Google account added, or any of the devices in airplane mode.</li>\n</ol>\n\n<p>So if you want something unique to the device itself, <code>TM.getDeviceId()</code> <em>should</em> be sufficient.  Obviously some users are more paranoid than others, so it might be useful to hash 1 or more of these identifiers, so that the string is still virtually unique to the device, but does not explicitly identify the user's actual device.  For example, using <code>String.hashCode()</code>, combined with a UUID:</p>\n\n<pre><code>    final TelephonyManager tm = (TelephonyManager) getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);\n\n    final String tmDevice, tmSerial, androidId;\n    tmDevice = \"\" + tm.getDeviceId();\n    tmSerial = \"\" + tm.getSimSerialNumber();\n    androidId = \"\" + android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);\n\n    UUID deviceUuid = new UUID(androidId.hashCode(), ((long)tmDevice.hashCode() &lt;&lt; 32) | tmSerial.hashCode());\n    String deviceId = deviceUuid.toString();\n</code></pre>\n\n<p>might result in something like: <code>00000000-54b3-e7c7-0000-000046bffd97</code></p>\n\n<p>It works well enough for me.</p>\n\n<p>As Richard mentions below, don't forget that you need permission to read the <code>TelephonyManager</code> properties, so add this to your manifest:</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As Dave Webb mentions, the <a href=\"http://android-developers.blogspot.com/2011/03/identifying-app-installations.html\">Android Developer Blog has an article</a> that covers this.  Their preferred solution is to track app installs rather than devices, and that will work well for most use cases.  The blog post will show you the necessary code to make that work, and I recommend you check it out.</p>\n\n<p>However, the blog post goes on to discuss solutions if you need a device identifier rather than an app installation identifier.  I spoke with someone at Google to get some additional clarification on a few items in the event that you need to do so.  Here's what I discovered about device identifiers that's NOT mentioned in the aforementioned blog post:</p>\n\n<ul>\n<li>ANDROID_ID is the preferred device identifier.  ANDROID_ID is perfectly reliable on versions of Android &lt;=2.1 or &gt;=2.3.  Only 2.2 has the problems mentioned in the post.</li>\n<li>Several devices by several manufacturers are affected by the ANDROID_ID bug in 2.2.</li>\n<li>As far as I've been able to determine, all affected devices have <a href=\"http://code.google.com/p/android/issues/detail?id=10603\">the same ANDROID_ID</a>, which is <a href=\"http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=9774d56d682e549c\">9774d56d682e549c</a>.  Which is also the same device id reported by the emulator, btw.</li>\n<li>Google believes that OEMs have patched the issue for many or most of their devices, but I was able to verify that as of the beginning of April 2011, at least, it's still quite easy to find devices that have the broken ANDROID_ID.</li>\n</ul>\n\n<p>Based on Google's recommendations, I implemented a class that will generate a unique UUID for each device, using ANDROID_ID as the seed where appropriate, falling back on TelephonyManager.getDeviceId() as necessary, and if that fails, resorting to a randomly generated unique UUID that is persisted across app restarts (but not app re-installations).</p>\n\n<p>Note that for devices that have to fallback on the device ID, the unique ID <strong>WILL</strong> persist across factory resets.  This is something to be aware of.  If you need to ensure that a factory reset will reset your unique ID, you may want to consider falling back directly to the random UUID instead of the device ID.</p>\n\n<p>Again, this code is for a device ID, not an app installation ID.  For most situations, an app installation ID is probably what you're looking for.  But if you do need a device ID, then the following code will probably work for you.</p>\n\n<pre><code>import android.content.Context;\nimport android.content.SharedPreferences;\nimport android.provider.Settings.Secure;\nimport android.telephony.TelephonyManager;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.UUID;\n\npublic class DeviceUuidFactory {\n\n    protected static final String PREFS_FILE = \"device_id.xml\";\n    protected static final String PREFS_DEVICE_ID = \"device_id\";\n    protected volatile static UUID uuid;\n\n    public DeviceUuidFactory(Context context) {\n        if (uuid == null) {\n            synchronized (DeviceUuidFactory.class) {\n                if (uuid == null) {\n                    final SharedPreferences prefs = context\n                            .getSharedPreferences(PREFS_FILE, 0);\n                    final String id = prefs.getString(PREFS_DEVICE_ID, null);\n                    if (id != null) {\n                        // Use the ids previously computed and stored in the\n                        // prefs file\n                        uuid = UUID.fromString(id);\n                    } else {\n                        final String androidId = Secure.getString(\n                            context.getContentResolver(), Secure.ANDROID_ID);\n                        // Use the Android ID unless it's broken, in which case\n                        // fallback on deviceId,\n                        // unless it's not available, then fallback on a random\n                        // number which we store to a prefs file\n                        try {\n                            if (!\"9774d56d682e549c\".equals(androidId)) {\n                                uuid = UUID.nameUUIDFromBytes(androidId\n                                        .getBytes(\"utf8\"));\n                            } else {\n                                final String deviceId = (\n                                    (TelephonyManager) context\n                                    .getSystemService(Context.TELEPHONY_SERVICE))\n                                    .getDeviceId();\n                                uuid = deviceId != null ? UUID\n                                    .nameUUIDFromBytes(deviceId\n                                            .getBytes(\"utf8\")) : UUID\n                                    .randomUUID();\n                            }\n                        } catch (UnsupportedEncodingException e) {\n                            throw new RuntimeException(e);\n                        }\n                        // Write the value out to the prefs file\n                        prefs.edit()\n                                .putString(PREFS_DEVICE_ID, uuid.toString())\n                                .commit();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns a unique UUID for the current android device. As with all UUIDs,\n     * this unique ID is \"very highly likely\" to be unique across all Android\n     * devices. Much more so than ANDROID_ID is.\n     * \n     * The UUID is generated by using ANDROID_ID as the base key if appropriate,\n     * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to\n     * be incorrect, and finally falling back on a random UUID that's persisted\n     * to SharedPreferences if getDeviceID() does not return a usable value.\n     * \n     * In some rare circumstances, this ID may change. In particular, if the\n     * device is factory reset a new device ID may be generated. In addition, if\n     * a user upgrades their phone from certain buggy implementations of Android\n     * 2.2 to a newer, non-buggy version of Android, the device ID may change.\n     * Or, if a user uninstalls your app on a device that has neither a proper\n     * Android ID nor a Device ID, this ID may change on reinstallation.\n     * \n     * Note that if the code falls back on using TelephonyManager.getDeviceId(),\n     * the resulting ID will NOT change after a factory reset. Something to be\n     * aware of.\n     * \n     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID\n     * directly.\n     * \n     * @see http://code.google.com/p/android/issues/detail?id=10603\n     * \n     * @return a UUID that may be used to uniquely identify your device for most\n     *         purposes.\n     */\n    public UUID getDeviceUuid() {\n        return uuid;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Last Updated: 6/2/15</h1>\n\n<hr>\n\n<p>After reading every Stack Overflow post about creating a unique ID, the Google developer blog and Android documentation, I feel as if the 'Pseudo ID' is the best possible option.</p>\n\n<h1>Main Issue: Hardware vs Software</h1>\n\n<h3>Hardware</h3>\n\n<ul>\n<li>User's can change their hardware, Android tablet or phone, so unique IDs based on hard are not good ideas for <strong>TRACKING USERS</strong></li>\n<li>For <strong>TRACKING HARDWARE</strong>, this is a great idea</li>\n</ul>\n\n<h3>Software</h3>\n\n<ul>\n<li>User's can wipe/change their ROM if they are rooted</li>\n<li>You can track users across platforms(iOS, Android, Windows and Web)</li>\n<li>The best want to <strong>TRACK AN INDIVIDUAL USER</strong> with their <strong>consent</strong> is to simply have them login(make this seamless using OAuth)</li>\n</ul>\n\n<hr>\n\n<h1>Overall breakdown with Android</h1>\n\n<h3>- Guarantee uniqueness (include rooted devices) for API =&gt; 9/10 (99.5% of Android devices)</h3>\n\n<h3>- No extra permissions</h3>\n\n<p>Psuedo code:</p>\n\n<pre><code>if API =&gt; 9/10: (99.5% of devices)\n\nreturn unique ID containing serial id (rooted devices may be different)\n\nelse\n\nreturn unique ID of build information (may overlap data - API &lt; 9)\n</code></pre>\n\n<p>Thanks to @stansult for posting <em><a href=\"http://stackoverflow.com/a/9186943/950427\">all of our options</a></em> (in this Stack Overflow question).</p>\n\n<h2>List of options - reasons why/ why not to use them:</h2>\n\n<ul>\n<li><p><strong>User Email - Software</strong></p>\n\n<ul>\n<li>User could change email - HIGHLY unlikely</li>\n<li>API 5+ <code>&lt;uses-permission android:name=\"android.permission.GET_ACCOUNTS\" /&gt;</code> or</li>\n<li>API 14+ <code>&lt;uses-permission android:name=\"android.permission.READ_PROFILE\" /&gt;</code> <code>&lt;uses-permission android:name=\"android.permission.READ_CONTACTS\" /&gt;</code> (<a href=\"http://stackoverflow.com/questions/2112965/how-to-get-the-android-devices-primary-e-mail-address\">How to get the Android device's primary e-mail address</a>)</li>\n</ul></li>\n<li><p><strong>User Phone Number - Software</strong></p>\n\n<ul>\n<li>Users could change phone numbers - HIGHLY unlikely</li>\n<li><code>&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;</code></li>\n</ul></li>\n<li><p><strong>IMEI - Hardware</strong> (only phones, needs <strong><code>android.permission.READ_PHONE_STATE</code></strong>)</p>\n\n<ul>\n<li>Most users hate the fact that it says \"Phone Calls\" in the permission. Some users give bad ratings, because they believe you are simply stealing their personal information, when all you really want to do is track device installs. It is obvious that you are collecting data.</li>\n<li><code>&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;</code></li>\n</ul></li>\n<li><p><strong>Android ID - Hardware</strong> (can be null, can change upon factory reset, can be altered on a rooted device)</p>\n\n<ul>\n<li>Since it can be 'null', we can check for 'null' and change its value, but this means it will no longer be unique.</li>\n<li>If you have a user with a factory reset device, the value may have changed or altered on the rooted device so there may be duplicates entries if you are tracking user installs.</li>\n</ul></li>\n<li><p><strong>WLAN MAC Address - Hardware</strong> (needs <strong><code>android.permission.ACCESS_WIFI_STATE</code></strong>)</p>\n\n<ul>\n<li>This could be the second best option, but you are still collecting and storing a unique identifier that comes directly from a user. This is obvious that you are collecting data.</li>\n<li><code>&lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE \"/&gt;</code></li>\n</ul></li>\n<li><p><strong>Bluetooth MAC Address - Hardware</strong> (devices with Bluetooth, needs <strong><code>android.permission.BLUETOOTH</code></strong>)</p>\n\n<ul>\n<li>Most applications on the market do not use Bluetooth, and so if your application doesn't use Bluetooth and you are including this, the user could become suspicious.</li>\n<li><code>&lt;uses-permission android:name=\"android.permission.BLUETOOTH \"/&gt;</code></li>\n</ul></li>\n<li><p><strong>Pseudo-Unique ID - Software</strong> (for all Android devices)</p>\n\n<ul>\n<li>Very possible, may contain collisions - See my method posted below!</li>\n<li>This allows you to have an 'almost unique' ID from the user without taking anything that is private. You can create you own unanimous ID from device information.</li>\n</ul></li>\n</ul>\n\n<hr>\n\n<p>I know there isn't any 'perfect' way of getting a unique ID without using permissions; however, sometimes we only really need to do is track the device installation. When it comes to creating a unique ID, we can create a 'pseudo unique id' based solely off of information that the Android API gives us without using extra permissions. This way, we can show the user respect and try to offer a good user experience as well.</p>\n\n<p>With a pseudo-unique id, you really only run into the fact that there may be duplicates based on the fact that there are similar devices. You can tweak the combined method to make it more unique; however, some developers need to track device installs and this will do the trick or performance based on similar devices.</p>\n\n<h2>API =&gt; 9:</h2>\n\n<p>If their Android device is API 9 or over, this is guaranteed to be unique because of the 'Build.SERIAL' field.</p>\n\n<p><strong>REMEMBER</strong>, you are technically only missing out on around 0.5% of users <a href=\"http://developer.android.com/about/dashboards/index.html\" rel=\"nofollow\">who have API &lt; 9</a>. So you can focus on the rest: This is 99.5% of the users!</p>\n\n<h2>API &lt; 9:</h2>\n\n<p>If the user's Android device is lower than API 9; hopefully, they have not done a factory reset and their 'Secure.ANDROID_ID' will be preserved or not 'null'. (see <a href=\"http://developer.android.com/about/dashboards/index.html\" rel=\"nofollow\">http://developer.android.com/about/dashboards/index.html</a>)</p>\n\n<h2>If all else fails:</h2>\n\n<p>If all else fails, if the user does have lower than API 9 (lower than Gingerbread), has reset their device or 'Secure.ANDROID_ID' returns 'null', then simply the ID returned will be solely based off their Android device information. This is where the collisions can happen.</p>\n\n<p>Changes:</p>\n\n<ul>\n<li>Removed 'Android.SECURE_ID' because of factory resets could cause the value to change</li>\n<li>Edited the code to change on API</li>\n<li>Changed the Pseudo</li>\n</ul>\n\n<p>Please take a look at the method below:</p>\n\n<pre><code>/**\n * Return pseudo unique ID\n * @return ID\n */\npublic static String getUniquePsuedoID() {\n    // If all else fails, if the user does have lower than API 9 (lower\n    // than Gingerbread), has reset their device or 'Secure.ANDROID_ID'\n    // returns 'null', then simply the ID returned will be solely based\n    // off their Android device information. This is where the collisions\n    // can happen.\n    // Thanks http://www.pocketmagic.net/?p=1662!\n    // Try not to use DISPLAY, HOST or ID - these items could change.\n    // If there are collisions, there will be overlapping data\n    String m_szDevIDShort = \"35\" + (Build.BOARD.length() % 10) + (Build.BRAND.length() % 10) + (Build.CPU_ABI.length() % 10) + (Build.DEVICE.length() % 10) + (Build.MANUFACTURER.length() % 10) + (Build.MODEL.length() % 10) + (Build.PRODUCT.length() % 10);\n\n    // Thanks to @Roman SL!\n    // http://stackoverflow.com/a/4789483/950427\n    // Only devices with API &gt;= 9 have android.os.Build.SERIAL\n    // http://developer.android.com/reference/android/os/Build.html#SERIAL\n    // If a user upgrades software or roots their device, there will be a duplicate entry\n    String serial = null;\n    try {\n        serial = android.os.Build.class.getField(\"SERIAL\").get(null).toString();\n\n        // Go ahead and return the serial for api =&gt; 9\n        return new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();\n    } catch (Exception exception) {\n        // String needs to be initialized\n        serial = \"serial\"; // some value\n    }\n\n    // Thanks @Joe!\n    // http://stackoverflow.com/a/2853253/950427\n    // Finally, combine the values we have found by using the UUID class to create a unique identifier\n    return new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();\n}\n</code></pre>\n\n<hr>\n\n<h1>New(for apps with ads AND Google Play Services):</h1>\n\n<p><strong>From the Google Play Developer's console:</strong></p>\n\n<blockquote>\n  <p>Beginning August 1st, 2014, the Google Play Developer Program Policy\n  requires all new app uploads and updates to use the advertising ID in\n  lieu of any other persistent identifiers for any advertising purposes.\n  Learn more</p>\n</blockquote>\n\n<p><strong>Implementation</strong>:</p>\n\n<p>Permission:</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n</code></pre>\n\n<p>Code:</p>\n\n<pre><code>import com.google.android.gms.ads.identifier.AdvertisingIdClient;\nimport com.google.android.gms.ads.identifier.AdvertisingIdClient.Info;\nimport com.google.android.gms.common.GooglePlayServicesAvailabilityException;\nimport com.google.android.gms.common.GooglePlayServicesNotAvailableException;\nimport java.io.IOException;\n...\n\n// Do not call this function from the main thread. Otherwise, \n// an IllegalStateException will be thrown.\npublic void getIdThread() {\n\n  Info adInfo = null;\n  try {\n    adInfo = AdvertisingIdClient.getAdvertisingIdInfo(mContext);\n\n  } catch (IOException exception) {\n    // Unrecoverable error connecting to Google Play services (e.g.,\n    // the old version of the service doesn't support getting AdvertisingId).\n\n  } catch (GooglePlayServicesAvailabilityException exception) {\n    // Encountered a recoverable error connecting to Google Play services. \n\n  } catch (GooglePlayServicesNotAvailableException exception) {\n    // Google Play services is not available entirely.\n  }\n  final String id = adInfo.getId();\n  final boolean isLAT = adInfo.isLimitAdTrackingEnabled();\n}\n</code></pre>\n\n<p><strong>Source/Docs:</strong></p>\n\n<p><a href=\"http://developer.android.com/google/play-services/id.html\" rel=\"nofollow\">http://developer.android.com/google/play-services/id.html</a>\n<a href=\"http://developer.android.com/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.html\" rel=\"nofollow\">http://developer.android.com/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.html</a></p>\n\n<h2>Important:</h2>\n\n<blockquote>\n  <p>It is intended that the advertising ID completely replace existing\n  usage of other identifiers for ads purposes (such as use of ANDROID_ID\n  in Settings.Secure) when Google Play Services is available. Cases\n  where Google Play Services is unavailable are indicated by a\n  GooglePlayServicesNotAvailableException being thrown by\n  getAdvertisingIdInfo().</p>\n</blockquote>\n\n<h2>Warning, users can reset:</h2>\n\n<p><a href=\"http://en.kioskea.net/faq/34732-android-reset-your-advertising-id\" rel=\"nofollow\">http://en.kioskea.net/faq/34732-android-reset-your-advertising-id</a></p>\n\n<p>I have tried to reference every link that I took information from. If you are missing and need to be included, please comment!</p>\n\n<h2>Google Player Services InstanceID</h2>\n\n<p><a href=\"https://developers.google.com/instance-id/\" rel=\"nofollow\">https://developers.google.com/instance-id/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is the code that Reto Meier used in the <a href=\"https://en.wikipedia.org/wiki/Google_I/O\">Google I/O</a> presentation this year to get a unique id for the user:</p>\n\n<pre><code>private static String uniqueID = null;\nprivate static final String PREF_UNIQUE_ID = \"PREF_UNIQUE_ID\";\n\npublic synchronized static String id(Context context) {\n    if (uniqueID == null) {\n        SharedPreferences sharedPrefs = context.getSharedPreferences(\n                PREF_UNIQUE_ID, Context.MODE_PRIVATE);\n        uniqueID = sharedPrefs.getString(PREF_UNIQUE_ID, null);\n        if (uniqueID == null) {\n            uniqueID = UUID.randomUUID().toString();\n            Editor editor = sharedPrefs.edit();\n            editor.putString(PREF_UNIQUE_ID, uniqueID);\n            editor.commit();\n        }\n    }\n    return uniqueID;\n}\n</code></pre>\n\n<p>If you couple this with a backup strategy to send preferences to the cloud (also described in Reto's <a href=\"http://www.google.com/events/io/2011/sessions/android-protips-advanced-topics-for-expert-android-app-developers.html\">talk</a>, you should have an id that ties to a user and sticks around after the device has been wiped, or even replaced. I plan to use this in analytics going forward (in other words, I have not done that bit yet :).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Also you might consider the Wi-Fi adapter's MAC address. Retrieved thusly:</p>\n\n<pre><code>WifiManager wm = (WifiManager)Ctxt.getSystemService(Context.WIFI_SERVICE);\nreturn wm.getConnectionInfo().getMacAddress();\n</code></pre>\n\n<p>Requires permission <code>android.permission.ACCESS_WIFI_STATE</code> in the manifest.</p>\n\n<p>Reported to be available even when Wi-Fi is not connected. If Joe from the answer above gives this one a try on his many devices, that'd be nice.</p>\n\n<p>On some devices, it's not available when Wi-Fi is turned off.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There\u2019s rather useful info <strong><a href=\"http://www.pocketmagic.net/?p=1662\">here</a></strong>.</p>\n\n<p>It covers five different ID types:</p>\n\n<ol>\n<li><strong>IMEI</strong> (only for Android devices with Phone use; needs <code>android.permission.READ_PHONE_STATE</code>)</li>\n<li><strong>Pseudo-Unique ID</strong> (for all Android devices)</li>\n<li><strong>Android ID</strong> (can be null, can change upon factory reset, can be altered on rooted phone)</li>\n<li><strong>WLAN MAC Address</strong> string (needs <code>android.permission.ACCESS_WIFI_STATE</code>)</li>\n<li><strong>BT MAC Address</strong> string (devices with Bluetooth, needs <code>android.permission.BLUETOOTH</code>)</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The official Android Developers Blog now has a full article just about this very subject, <em><a href=\"http://android-developers.blogspot.com/2011/03/identifying-app-installations.html\">Identifying App Installations</a></em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think this is sure fire way of building a skeleton for a unique ID...  check it out.</p>\n\n<p>Pseudo-Unique ID, that works on all Android devices\nSome devices don't have a phone (eg. Tablets) or for some reason you don't want to include the READ_PHONE_STATE permission. You can still read details like ROM Version, Manufacturer name, CPU type, and other hardware details, that will be well suited if you want to use the ID for a serial key check, or other general purposes. The ID computed in this way won't be unique: it is possible to find two devices with the same ID (based on the same hardware and rom image) but the chances in real world applications are negligible. For this purpose you can use the Build class:</p>\n\n<pre><code>String m_szDevIDShort = \"35\" + //we make this look like a valid IMEI\n            Build.BOARD.length()%10+ Build.BRAND.length()%10 +\n            Build.CPU_ABI.length()%10 + Build.DEVICE.length()%10 +\n            Build.DISPLAY.length()%10 + Build.HOST.length()%10 +\n            Build.ID.length()%10 + Build.MANUFACTURER.length()%10 +\n            Build.MODEL.length()%10 + Build.PRODUCT.length()%10 +\n            Build.TAGS.length()%10 + Build.TYPE.length()%10 +\n            Build.USER.length()%10 ; //13 digits\n</code></pre>\n\n<p>Most of the Build members are strings, what we're doing here is to take their length and transform it via modulo in a digit. We have 13 such digits and we are adding two more in front (35) to have the same size ID like the IMEI (15 digits). There are other possibilities here are well, just have a look at these strings.\nReturns something like: 355715565309247 . No special permission are required, making this approach very convenient.</p>\n\n<hr>\n\n<p>(Extra info: The technique given above was copied from an article on <a href=\"http://www.pocketmagic.net/?p=1662\">Pocket Magic</a>.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The following code returns the device serial number using a hidden Android API. But, this code don't works on Samsung Galaxy Tab because \"ro.serialno\" isn't set on this device.</p>\n\n<pre><code>String serial = null;\n\ntry {\n    Class&lt;?&gt; c = Class.forName(\"android.os.SystemProperties\");\n    Method get = c.getMethod(\"get\", String.class);\n    serial = (String) get.invoke(c, \"ro.serialno\");\n}\ncatch (Exception ignored) {\n\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>At <a href=\"https://en.wikipedia.org/wiki/Google_I/O\">Google I/O</a> Reto Meier released a robust answer to how to approach this which should meet most developers needs to track users across installations. Anthony Nolan shows the direction in his answer, but I thought I'd write out the full approach so that others can easily see how to do it (it took me a while to figure out the details).</p>\n\n<p>This approach will give you an anonymous, secure user ID which will be persistent for the user across different devices (based on the primary Google account) and across installs. The basic approach is to generate a random user ID and to store this in the apps' shared preferences. You then use Google's backup agent to store the shared preferences linked to the Google account in the cloud.</p>\n\n<p>Let's go through the full approach. First, we need to create a backup for our SharedPreferences using the Android Backup Service. Start by registering your app via <code>http://developer.android.com/google/backup/signup.html</code>.</p>\n\n<p>Google will give you a backup service key which you need to add to the manifest. You also need to tell the application to use the BackupAgent as follows:</p>\n\n<pre><code>&lt;application android:label=\"MyApplication\"\n         android:backupAgent=\"MyBackupAgent\"&gt;\n    ...\n    &lt;meta-data android:name=\"com.google.android.backup.api_key\"\n        android:value=\"your_backup_service_key\" /&gt;\n&lt;/application&gt;\n</code></pre>\n\n<p>Then you need to create the backup agent and tell it to use the helper agent for sharedpreferences:</p>\n\n<pre><code>public class MyBackupAgent extends BackupAgentHelper {\n    // The name of the SharedPreferences file\n    static final String PREFS = \"user_preferences\";\n\n    // A key to uniquely identify the set of backup data\n    static final String PREFS_BACKUP_KEY = \"prefs\";\n\n    // Allocate a helper and add it to the backup agent\n    @Override\n    public void onCreate() {\n        SharedPreferencesBackupHelper helper = new SharedPreferencesBackupHelper(this,          PREFS);\n        addHelper(PREFS_BACKUP_KEY, helper);\n    }\n}\n</code></pre>\n\n<p>To complete the backup you need to create an instance of BackupManager in your main Activity:</p>\n\n<pre><code>BackupManager backupManager = new BackupManager(context);\n</code></pre>\n\n<p>Finally create a user ID, if it doesn't already exist, and store it in the SharedPreferences:</p>\n\n<pre><code>  public static String getUserID(Context context) {\n            private static String uniqueID = null;\n        private static final String PREF_UNIQUE_ID = \"PREF_UNIQUE_ID\";\n    if (uniqueID == null) {\n        SharedPreferences sharedPrefs = context.getSharedPreferences(\n                MyBackupAgent.PREFS, Context.MODE_PRIVATE);\n        uniqueID = sharedPrefs.getString(PREF_UNIQUE_ID, null);\n        if (uniqueID == null) {\n            uniqueID = UUID.randomUUID().toString();\n            Editor editor = sharedPrefs.edit();\n            editor.putString(PREF_UNIQUE_ID, uniqueID);\n            editor.commit();\n\n            //backup the changes\n            BackupManager mBackupManager = new BackupManager(context);\n            mBackupManager.dataChanged();\n        }\n    }\n\n    return uniqueID;\n}\n</code></pre>\n\n<p>This User_ID will now be persistent across installations, even if the user moves device.</p>\n\n<p>For more information on this approach see <a href=\"http://www.google.com/events/io/2011/sessions/android-protips-advanced-topics-for-expert-android-app-developers.html\">Reto's talk</a>.</p>\n\n<p>And for full details of how to implement the backup agent see <em><a href=\"http://developer.android.com/guide/topics/data/backup.html\">Data Backup</a></em>. I particularly recommend the section at the bottom on testing as the backup does not happen instantaneously and so to test you have to force the backup.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using the code below, you can get the unique device ID of an Android OS device as a string.</p>\n\n<pre><code>deviceId = Secure.getString(getApplicationContext().getContentResolver(), Secure.ANDROID_ID); \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A <a href=\"http://developer.android.com/reference/android/os/Build.html#SERIAL\" rel=\"nofollow\">Serial</a> field was added to the <code>Build</code> class in API level 9 (Android 2.3 - Gingerbread). Documentation says it represents the hardware serial number. Thus it should be unique, if it exists on the device. </p>\n\n<p>I don't know whether it is actually supported (=not null) by all devices with API level &gt;= 9 though.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For detailed instructions on how to get a unique identifier for each Android device your application is installed from, see the official Android Developers Blog posting <em><a href=\"http://android-developers.blogspot.com/2011/03/identifying-app-installations.html\" rel=\"nofollow\">Identifying App Installations</a></em>.</p>\n\n<p>It seems the best way is for you to generate one yourself upon installation and subsequently read it when the application is re-launched.</p>\n\n<p>I personally find this acceptable but not ideal. No one identifier provided by Android works in all instances as most are dependent on the phone's radio states (Wi-Fi on/off, cellular on/off, Bluetooth on/off). The others, like <code>Settings.Secure.ANDROID_ID</code> must be implemented by the manufacturer and are not guaranteed to be unique.</p>\n\n<p>The following is an example of writing data to an <em>installation</em> file that would be stored along with any other data the application saves locally.</p>\n\n<pre><code>public class Installation {\n    private static String sID = null;\n    private static final String INSTALLATION = \"INSTALLATION\";\n\n    public synchronized static String id(Context context) {\n        if (sID == null) {\n            File installation = new File(context.getFilesDir(), INSTALLATION);\n            try {\n                if (!installation.exists())\n                    writeInstallationFile(installation);\n                sID = readInstallationFile(installation);\n            } \n            catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return sID;\n    }\n\n    private static String readInstallationFile(File installation) throws IOException {\n        RandomAccessFile f = new RandomAccessFile(installation, \"r\");\n        byte[] bytes = new byte[(int) f.length()];\n        f.readFully(bytes);\n        f.close();\n        return new String(bytes);\n    }\n\n    private static void writeInstallationFile(File installation) throws IOException {\n        FileOutputStream out = new FileOutputStream(installation);\n        String id = UUID.randomUUID().toString();\n        out.write(id.getBytes());\n        out.close();\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One thing I'll add - I have one of those unique situations.</p>\n\n<p>Using:</p>\n\n<pre><code>deviceId = Secure.getString(this.getContext().getContentResolver(), Secure.ANDROID_ID);\n</code></pre>\n\n<p>Turns out that even though my Viewsonic G Tablet reports a DeviceID that is not Null, every single G Tablet reports the same number.</p>\n\n<p>Makes it interesting playing \"Pocket Empires\" which gives you instant access to someone's account based on the \"unique\" DeviceID.</p>\n\n<p>My device does not have a cell radio.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How about the <a href=\"http://en.wikipedia.org/wiki/International_Mobile_Equipment_Identity\">IMEI</a>. That is unique for Android or other mobile devices.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Add Below code in class file:</p>\n\n<pre><code>final TelephonyManager tm = (TelephonyManager) getBaseContext()\n            .getSystemService(SplashActivity.TELEPHONY_SERVICE);\n    final String tmDevice, tmSerial, androidId;\n    tmDevice = \"\" + tm.getDeviceId();\n    Log.v(\"DeviceIMEI\", \"\" + tmDevice);\n    tmSerial = \"\" + tm.getSimSerialNumber();\n    Log.v(\"GSM devices Serial Number[simcard] \", \"\" + tmSerial);\n    androidId = \"\" + android.provider.Settings.Secure.getString(getContentResolver(),\n            android.provider.Settings.Secure.ANDROID_ID);\n    Log.v(\"androidId CDMA devices\", \"\" + androidId);\n    UUID deviceUuid = new UUID(androidId.hashCode(),\n            ((long) tmDevice.hashCode() &lt;&lt; 32) | tmSerial.hashCode());\n    String deviceId = deviceUuid.toString();\n    Log.v(\"deviceIdUUID universally unique identifier\", \"\" + deviceId);\n    String deviceModelName = android.os.Build.MODEL;\n    Log.v(\"Model Name\", \"\" + deviceModelName);\n    String deviceUSER = android.os.Build.USER;\n    Log.v(\"Name USER\", \"\" + deviceUSER);\n    String devicePRODUCT = android.os.Build.PRODUCT;\n    Log.v(\"PRODUCT\", \"\" + devicePRODUCT);\n    String deviceHARDWARE = android.os.Build.HARDWARE;\n    Log.v(\"HARDWARE\", \"\" + deviceHARDWARE);\n    String deviceBRAND = android.os.Build.BRAND;\n    Log.v(\"BRAND\", \"\" + deviceBRAND);\n    String myVersion = android.os.Build.VERSION.RELEASE;\n    Log.v(\"VERSION.RELEASE\", \"\" + myVersion);\n    int sdkVersion = android.os.Build.VERSION.SDK_INT;\n    Log.v(\"VERSION.SDK_INT\", \"\" + sdkVersion);\n</code></pre>\n\n<p>Add in AndroidManifest.xml:</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is how I am generating the unique id:</p>\n\n<pre><code>public static String getDeviceId(Context ctx)\n{\n    TelephonyManager tm = (TelephonyManager) ctx.getSystemService(Context.TELEPHONY_SERVICE);\n\n    String tmDevice = tm.getDeviceId();\n    String androidId = Secure.getString(ctx.getContentResolver(), Secure.ANDROID_ID);\n    String serial = null;\n    if(Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.FROYO) serial = Build.SERIAL;\n\n    if(tmDevice != null) return \"01\" + tmDevice;\n    if(androidId != null) return \"02\" + androidId;\n    if(serial != null) return \"03\" + serial;\n    // other alternatives (i.e. Wi-Fi MAC, Bluetooth MAC, etc.)\n\n    return null;\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are a lot of different approaches to work around those <code>ANDROID_ID</code> issues (may be <code>null</code> sometimes or devices of a specific model always return the same ID) with pros and cons:</p>\n\n<ul>\n<li>Implementing a custom ID generation algorithm (based on device properties that are supposed to be static and won't change -&gt; who knows)</li>\n<li>Abusing other IDs like <a href=\"https://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity\" rel=\"nofollow\">IMEI</a>, serial number, Wi-Fi/Bluetooth-MAC address (they won't exist on all devices or additional permissions become necessary)</li>\n</ul>\n\n<p>I myself prefer using an existing OpenUDID implementation (see <a href=\"https://github.com/ylechelle/OpenUDID\" rel=\"nofollow\">https://github.com/ylechelle/OpenUDID</a>) for Android (see <a href=\"https://github.com/vieux/OpenUDID\" rel=\"nofollow\">https://github.com/vieux/OpenUDID</a>). It is easy to integrate and makes use of the <code>ANDROID_ID</code> with fallbacks for those issues mentioned above.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h3>The unique device ID of an Android OS device as String, using <code>TelephonyManager</code> and <code>ANDROID_ID</code>, is obtained by:</h3>\n\n<pre><code>String deviceId;\nfinal TelephonyManager mTelephony = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\nif (mTelephony.getDeviceId() != null) {\n    deviceId = mTelephony.getDeviceId();\n}\nelse {\n    deviceId = Secure.getString(\n                   getApplicationContext().getContentResolver(),\n                   Secure.ANDROID_ID);\n}\n</code></pre>\n\n<p>But I strongly recommend a method suggested by Google, see <em><a href=\"http://android-developers.blogspot.mx/2011/03/identifying-app-installations.html\" rel=\"nofollow\">Identifying App Installations</a></em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Google now has an <a href=\"http://developer.android.com/google/play-services/id.html#get_started\" rel=\"nofollow\">Advertising ID</a>.<br>\nThis can also be used, but note that :</p>\n\n<blockquote>\n  <p>The advertising ID is a user-specific, unique, resettable ID </p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p>enables users to reset their identifier or opt out of interest-based ads within Google Play apps.</p>\n</blockquote>\n\n<p>So though this id may change, it seems that soon <a href=\"http://www.androidpolice.com/2013/11/01/google-play-services-4-0-requires-developers-to-use-the-new-advertising-id-to-identify-your-device-enforcement-starts-aug-2014/\" rel=\"nofollow\">we may not have a choice</a>, depends on the purpose of this id.</p>\n\n<p><a href=\"http://developer.android.com/google/play-services/id.html\" rel=\"nofollow\">More info @ develper.android</a></p>\n\n<p><a href=\"http://developer.android.com/google/play-services/id.html#get_started\" rel=\"nofollow\">Copy-paste code here</a></p>\n\n<p>HTH</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another way is to use <code>/sys/class/android_usb/android0/iSerial</code> in an app without any permissions whatsoever.</p>\n\n<pre><code>user@creep:~$ adb shell ls -l /sys/class/android_usb/android0/iSerial\n-rw-r--r-- root     root         4096 2013-01-10 21:08 iSerial\nuser@creep:~$ adb shell cat /sys/class/android_usb/android0/iSerial\n0A3CXXXXXXXXXX5\n</code></pre>\n\n<p>To do this in Java one would just use a FileInputStream to open the iSerial file and read out the characters. Just be sure you wrap it in an exception handler, because not all devices have this file. </p>\n\n<p>At least the following devices are known to have this file world-readable:</p>\n\n<ul>\n<li>Galaxy Nexus</li>\n<li>Nexus S</li>\n<li>Motorola Xoom 3G</li>\n<li>Toshiba AT300</li>\n<li>HTC One V</li>\n<li>Mini MK802</li>\n<li>Samsung Galaxy S II</li>\n</ul>\n\n<p>You can also see my blog post <em><a href=\"http://insitusec.blogspot.com/2013/01/leaking-android-hardware-serial-number.html\" rel=\"nofollow\">Leaking Android hardware serial number to unprivileged apps</a></em> where I discuss what other files are available for information.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My two cents - NB this is for a <em>device (err) unique ID</em> - not the installation one as discussed in the <a href=\"http://android-developers.blogspot.gr/2011/03/identifying-app-installations.html\" rel=\"nofollow\">Android developers's blog</a>.</p>\n\n<p>Of note that the <a href=\"http://stackoverflow.com/a/5626208/281545\">solution</a> provided by @emmby falls back in a per application ID as the SharedPreferences are not synchronized across processes (see <a href=\"http://stackoverflow.com/a/4695567/281545\">here</a> and <a href=\"http://stackoverflow.com/a/12430507/281545\">here</a>). So I avoided this altogether.</p>\n\n<p>Instead, I encapsulated the various strategies for getting a (device) ID in an enum - changing the order of the enum constants affects the priority of the various ways of getting the ID. The first non-null ID is returned or an exception is thrown (as per good Java practices of not giving null a meaning). So for instance I have the TELEPHONY one first - but a good default choice would be the ANDROID_ID\n<strong>beta:</strong></p>\n\n<pre><code>import android.Manifest.permission;\nimport android.bluetooth.BluetoothAdapter;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.net.wifi.WifiManager;\nimport android.provider.Settings.Secure;\nimport android.telephony.TelephonyManager;\nimport android.util.Log;\n\n// TODO : hash\npublic final class DeviceIdentifier {\n\n    private DeviceIdentifier() {}\n\n    /** @see http://code.google.com/p/android/issues/detail?id=10603 */\n    private static final String ANDROID_ID_BUG_MSG = \"The device suffers from \"\n        + \"the Android ID bug - its ID is the emulator ID : \"\n        + IDs.BUGGY_ANDROID_ID;\n    private static volatile String uuid; // volatile needed - see EJ item 71\n    // need lazy initialization to get a context\n\n    /**\n     * Returns a unique identifier for this device. The first (in the order the\n     * enums constants as defined in the IDs enum) non null identifier is\n     * returned or a DeviceIDException is thrown. A DeviceIDException is also\n     * thrown if ignoreBuggyAndroidID is false and the device has the Android ID\n     * bug\n     *\n     * @param ctx\n     *            an Android constant (to retrieve system services)\n     * @param ignoreBuggyAndroidID\n     *            if false, on a device with the android ID bug, the buggy\n     *            android ID is not returned instead a DeviceIDException is\n     *            thrown\n     * @return a *device* ID - null is never returned, instead a\n     *         DeviceIDException is thrown\n     * @throws DeviceIDException\n     *             if none of the enum methods manages to return a device ID\n     */\n    public static String getDeviceIdentifier(Context ctx,\n            boolean ignoreBuggyAndroidID) throws DeviceIDException {\n        String result = uuid;\n        if (result == null) {\n            synchronized (DeviceIdentifier.class) {\n                result = uuid;\n                if (result == null) {\n                    for (IDs id : IDs.values()) {\n                        try {\n                            result = uuid = id.getId(ctx);\n                        } catch (DeviceIDNotUniqueException e) {\n                            if (!ignoreBuggyAndroidID)\n                                throw new DeviceIDException(e);\n                        }\n                        if (result != null) return result;\n                    }\n                    throw new DeviceIDException();\n                }\n            }\n        }\n        return result;\n    }\n\n    private static enum IDs {\n        TELEPHONY_ID {\n\n            @Override\n            String getId(Context ctx) {\n                // TODO : add a SIM based mechanism ? tm.getSimSerialNumber();\n                final TelephonyManager tm = (TelephonyManager) ctx\n                        .getSystemService(Context.TELEPHONY_SERVICE);\n                if (tm == null) {\n                    w(\"Telephony Manager not available\");\n                    return null;\n                }\n                assertPermission(ctx, permission.READ_PHONE_STATE);\n                return tm.getDeviceId();\n            }\n        },\n        ANDROID_ID {\n\n            @Override\n            String getId(Context ctx) throws DeviceIDException {\n                // no permission needed !\n                final String andoidId = Secure.getString(\n                    ctx.getContentResolver(),\n                    android.provider.Settings.Secure.ANDROID_ID);\n                if (BUGGY_ANDROID_ID.equals(andoidId)) {\n                    e(ANDROID_ID_BUG_MSG);\n                    throw new DeviceIDNotUniqueException();\n                }\n                return andoidId;\n            }\n        },\n        WIFI_MAC {\n\n            @Override\n            String getId(Context ctx) {\n                WifiManager wm = (WifiManager) ctx\n                        .getSystemService(Context.WIFI_SERVICE);\n                if (wm == null) {\n                    w(\"Wifi Manager not available\");\n                    return null;\n                }\n                assertPermission(ctx, permission.ACCESS_WIFI_STATE); // I guess\n                // getMacAddress() has no java doc !!!\n                return wm.getConnectionInfo().getMacAddress();\n            }\n        },\n        BLUETOOTH_MAC {\n\n            @Override\n            String getId(Context ctx) {\n                BluetoothAdapter ba = BluetoothAdapter.getDefaultAdapter();\n                if (ba == null) {\n                    w(\"Bluetooth Adapter not available\");\n                    return null;\n                }\n                assertPermission(ctx, permission.BLUETOOTH);\n                return ba.getAddress();\n            }\n        }\n        // TODO PSEUDO_ID\n        // http://www.pocketmagic.net/2011/02/android-unique-device-id/\n        ;\n\n        static final String BUGGY_ANDROID_ID = \"9774d56d682e549c\";\n        private final static String TAG = IDs.class.getSimpleName();\n\n        abstract String getId(Context ctx) throws DeviceIDException;\n\n        private static void w(String msg) {\n            Log.w(TAG, msg);\n        }\n\n        private static void e(String msg) {\n            Log.e(TAG, msg);\n        }\n    }\n\n    private static void assertPermission(Context ctx, String perm) {\n        final int checkPermission = ctx.getPackageManager().checkPermission(\n            perm, ctx.getPackageName());\n        if (checkPermission != PackageManager.PERMISSION_GRANTED) {\n            throw new SecurityException(\"Permission \" + perm + \" is required\");\n        }\n    }\n\n    // =========================================================================\n    // Exceptions\n    // =========================================================================\n    public static class DeviceIDException extends Exception {\n\n        private static final long serialVersionUID = -8083699995384519417L;\n        private static final String NO_ANDROID_ID = \"Could not retrieve a \"\n            + \"device ID\";\n\n        public DeviceIDException(Throwable throwable) {\n            super(NO_ANDROID_ID, throwable);\n        }\n\n        public DeviceIDException(String detailMessage) {\n            super(detailMessage);\n        }\n\n        public DeviceIDException() {\n            super(NO_ANDROID_ID);\n        }\n    }\n\n    public static final class DeviceIDNotUniqueException extends\n            DeviceIDException {\n\n        private static final long serialVersionUID = -8940090896069484955L;\n\n        public DeviceIDNotUniqueException() {\n            super(ANDROID_ID_BUG_MSG);\n        }\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>TelephonyManger.getDeviceId()</strong> Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones.</p>\n\n<pre><code>final TelephonyManager mTelephony = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);            \nString myAndroidDeviceId = mTelephony.getDeviceId(); \n</code></pre>\n\n<p>But i recommend to use:</p>\n\n<p><strong>Settings.Secure.ANDROID_ID</strong> that returns the Android ID as an unique 64-bit hex string.</p>\n\n<pre><code>    String   myAndroidDeviceId = Secure.getString(getApplicationContext().getContentResolver(), Secure.ANDROID_ID); \n</code></pre>\n\n<p>Sometimes <strong>TelephonyManger.getDeviceId()</strong> will return null, so to assure an unique id you will use this method:</p>\n\n<pre><code>public String getUniqueID(){    \n    String myAndroidDeviceId = \"\";\n    TelephonyManager mTelephony = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\n    if (mTelephony.getDeviceId() != null){\n        myAndroidDeviceId = mTelephony.getDeviceId(); \n    }else{\n         myAndroidDeviceId = Secure.getString(getApplicationContext().getContentResolver(), Secure.ANDROID_ID); \n    }\n    return myAndroidDeviceId;\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Google Instance ID</strong></p>\n\n<p>Released at I/O 2015; on Android requires play services 7.5.</p>\n\n<p><a href=\"https://developers.google.com/instance-id/\" rel=\"nofollow\">https://developers.google.com/instance-id/</a><br>\n<a href=\"https://developers.google.com/instance-id/guides/android-implementation\" rel=\"nofollow\">https://developers.google.com/instance-id/guides/android-implementation</a></p>\n\n<pre><code>InstanceID iid = InstanceID.getInstance( context );   // Google docs are wrong - this requires context\nString id = iid.getId();  // blocking call\n</code></pre>\n\n<p>It seems that Google intends for this ID to be used to identify installations across Android, Chrome, and iOS.</p>\n\n<p>It identifies an installation rather then a device, but then again, ANDROID_ID (which is the accepted answer) now no longer identifies devices either.  With the ARC runtime a new ANDROID_ID is generated for every installation (<a href=\"http://stackoverflow.com/questions/29656101/how-does-android-id-on-arc-chrome-differ-from-android\">details here</a>), just like this new instance ID.  Also, I think that identifying installations (not devices) is what most of us are actually looking for.</p>\n\n<p><strong>The advantages of instance ID</strong></p>\n\n<p>It appears to me that Google intends for it to be used for this purpose (identifying your installations), it is cross-platform, and can be used for a number of other purposes (see the links above).</p>\n\n<p>If you use GCM, then you will eventually need to use this instance ID because you need it in order to get the GCM token (which replaces the old GCM registration ID).</p>\n\n<p><strong>The disadvantages/issues</strong></p>\n\n<p>In the current implementation (GPS 7.5) the instance ID is retrieved from a server when your app requests it.  This means that the call above is a blocking call - in my unscientific testing it takes 1-3 seconds if the device is online, and 0.5 - 1.0 seconds if off-line (presumably this is how long it waits before giving up and generating a random ID).  This was tested in North America on Nexus 5 with Android 5.1.1 and GPS 7.5.</p>\n\n<p>If you use the ID for the purposes they intend - eg. app authentication, app identification, GCM - I think this 1-3 seconds could be a nuisance (depending on your app, of course).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For hardware recognition of a specific Android device you could check the MAC Addresses.</p>\n\n<p>you can do it that way:</p>\n\n<p>in AndroidManifest.xml</p>\n\n<p><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;</code></p>\n\n<p>now in your code:</p>\n\n<pre><code>List&lt;NetworkInterface&gt; interfacesList = Collections.list(NetworkInterface.getNetworkInterfaces());\n\nfor (NetworkInterface interface : interfacesList) {\n   // This will give you the interface MAC ADDRESS\n   interface.getHardwareAddress();\n}\n</code></pre>\n\n<p>In every Android device their is at least a \"wlan0\" Interface witch is the WI-FI chip.\nThis code works even when WI-FI is not turned on.</p>\n\n<p>P.S.\nTheir are a bunch of other Interfaces you will get from the list containing MACS But this can change between phones.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I use the following code to get the IMEI or use Secure.ANDROID_ID as an alternative, when the device doesn't have phone capabilities:</p>\n\n<pre><code>String identifier = null;\nTelephonyManager tm = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE));\nif (tm != null)\n      identifier = tm.getDeviceId();\nif (identifier == null || identifier .length() == 0)\n      identifier = Secure.getString(activity.getContentResolver(),Secure.ANDROID_ID);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Check for\nSystemInfo.deviceUniqueIdentifier</p>\n\n<p>Documentation:\n<a href=\"http://docs.unity3d.com/Documentation/ScriptReference/SystemInfo-deviceUniqueIdentifier.html\" rel=\"nofollow\">http://docs.unity3d.com/Documentation/ScriptReference/SystemInfo-deviceUniqueIdentifier.html</a></p>\n\n<p>A unique device identifier. It is guaranteed to be unique for every device (Read Only).</p>\n\n<p>iOS: on pre-iOS7 devices it will return hash of MAC address. On iOS7 devices it will be UIDevice identifierForVendor or, if that fails for any reason, ASIdentifierManager advertisingIdentifier.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Get the device ID only once, and then store it in a database or a file. In this case, if it is the first boot of the app, it generates an ID and stores it. Next time, it will only take the ID stored in the file.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found a library on Github that seems to bundle a few of the approaches discussed in this thread: <a href=\"https://github.com/thomashaertel/android-device-identification\" rel=\"nofollow\">https://github.com/thomashaertel/android-device-identification</a></p>\n\n<p>Haven't tried it, but maybe it helps.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Don't do it, that's the hard way.  Moreover, those setter methods of <code>java.util.Date</code> are deprecated since Java 1.1 (1997). Simply format date using <a href=\"http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html\"><code>SimpleDateFormat</code></a>.</p>\n\n<pre><code>String string = \"January 2, 2010\";\nDateFormat format = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\nDate date = format.parse(string);\nSystem.out.println(date); // Sat Jan 02 00:00:00 GMT 2010\n</code></pre>\n\n<p>Note the importance of explicit <code>Locale</code> argument. If you omit it, then it will use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#getDefault--\">default locale</a> which is not necessarily English as used in the month name of the string.</p>\n\n<p>Here's an extract of relevance from <a href=\"http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html\">the javadoc</a>, listing all available format patterns:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Letter  Date or Time Component  Presentation        Examples\n------  ----------------------  ------------------  -------------------------------------\nG       Era designator          Text                AD\ny       Year                    Year                1996; 96\nY       Week year               Year                2009; 09\nM/L     Month in year           Month               July; Jul; 07\nw       Week in year            Number              27\nW       Week in month           Number              2\nD       Day in year             Number              189\nd       Day in month            Number              10\nF       Day of week in month    Number              2\nE       Day in week             Text                Tuesday; Tue\nu       Day number of week      Number              1\na       Am/pm marker            Text                PM\nH       Hour in day (0-23)      Number              0\nk       Hour in day (1-24)      Number              24\nK       Hour in am/pm (0-11)    Number              0\nh       Hour in am/pm (1-12)    Number              12\nm       Minute in hour          Number              30\ns       Second in minute        Number              55\nS       Millisecond             Number              978\nz       Time zone               General time zone   Pacific Standard Time; PST; GMT-08:00\nZ       Time zone               RFC 822 time zone   -0800\nX       Time zone               ISO 8601 time zone  -08; -0800; -08:00\n</code></pre>\n\n<p>Here are some examples of valid <code>SimpleDateFormat</code> patterns to parse a given string to date:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Input string                            Pattern\n------------------------------------    ----------------------------\n2001.07.04 AD at 12:08:56 PDT           yyyy.MM.dd G 'at' HH:mm:ss z\nWed, Jul 4, '01                         EEE, MMM d, ''yy\n12:08 PM                                h:mm a\n12 o'clock PM, Pacific Daylight Time    hh 'o''clock' a, zzzz\n0:08 PM, PDT                            K:mm a, z\n02001.July.04 AD 12:08 PM               yyyyy.MMMM.dd GGG hh:mm aaa\nWed, 4 Jul 2001 12:08:56 -0700          EEE, d MMM yyyy HH:mm:ss Z\n010704120856-0700                       yyMMddHHmmssZ\n2001-07-04T12:08:56.235-0700            yyyy-MM-dd'T'HH:mm:ss.SSSZ\n2001-07-04T12:08:56.235-07:00           yyyy-MM-dd'T'HH:mm:ss.SSSXXX\n2001-W27-3                              YYYY-'W'ww-u\n</code></pre>\n\n<p>Important note is that <code>SimpleDateFormat</code> is <strong>not</strong> thread safe. In other words, you should never declare and assign it as a static or instance variable and then reuse from different methods/threads. You should always create it brand new within the method local scope.</p>\n\n<hr>\n\n<h3>Java 8 update</h3>\n\n<p>If you happen to be on Java 8 already, then use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\"><code>DateTimeFormatter</code></a> (also here, click the link to see all predefined formatters and available format patterns; <a href=\"https://docs.oracle.com/javase/tutorial/datetime/iso/format.html\">the tutorial is available here</a>). This new API is inspired by <a href=\"http://www.joda.org/joda-time/\">JodaTime</a>.</p>\n\n<pre><code>String string = \"January 2, 2010\";\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"MMMM d, yyyy\", Locale.ENGLISH);\nLocalDate date = LocalDate.parse(string, formatter);\nSystem.out.println(date); // 2010-01-02\n</code></pre>\n\n<p>Note: if your date string happens to contain the time part as well, then use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#parse-java.lang.CharSequence-java.time.format.DateTimeFormatter-\"><code>LocalDateTime#parse()</code></a> instead of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html#parse-java.lang.CharSequence-java.time.format.DateTimeFormatter-\"><code>LocalDate#parse()</code></a>.</p>\n\n<p>Here's an extract of relevance from <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\">the javadoc</a>, listing all available format patterns:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Symbol  Meaning                     Presentation  Examples\n------  --------------------------  ------------  ----------------------------------------------\nG       era                         text          AD; Anno Domini; A\nu       year                        year          2004; 04\ny       year-of-era                 year          2004; 04\nD       day-of-year                 number        189\nM/L     month-of-year               number/text   7; 07; Jul; July; J\nd       day-of-month                number        10\n\nQ/q     quarter-of-year             number/text   3; 03; Q3; 3rd quarter\nY       week-based-year             year          1996; 96\nw       week-of-week-based-year     number        27\nW       week-of-month               number        4\nE       day-of-week                 text          Tue; Tuesday; T\ne/c     localized day-of-week       number/text   2; 02; Tue; Tuesday; T\nF       week-of-month               number        3\n\na       am-pm-of-day                text          PM\nh       clock-hour-of-am-pm (1-12)  number        12\nK       hour-of-am-pm (0-11)        number        0\nk       clock-hour-of-am-pm (1-24)  number        0\n\nH       hour-of-day (0-23)          number        0\nm       minute-of-hour              number        30\ns       second-of-minute            number        55\nS       fraction-of-second          fraction      978\nA       milli-of-day                number        1234\nn       nano-of-second              number        987654321\nN       nano-of-day                 number        1234000000\n\nV       time-zone ID                zone-id       America/Los_Angeles; Z; -08:30\nz       time-zone name              zone-name     Pacific Standard Time; PST\nO       localized zone-offset       offset-O      GMT+8; GMT+08:00; UTC-08:00;\nX       zone-offset 'Z' for zero    offset-X      Z; -08; -0830; -08:30; -083015; -08:30:15;\nx       zone-offset                 offset-x      +0000; -08; -0830; -08:30; -083015; -08:30:15;\nZ       zone-offset                 offset-Z      +0000; -0800; -08:00;\n</code></pre>\n\n<p>Do note that it has several <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#predefined\">predefined formatters</a> for the more popular patterns. So instead of e.g. <code>DateTimeFormatter.ofPattern(\"EEE, d MMM yyyy HH:mm:ss Z\", Locale.ENGLISH);</code>, you could use <code>DateTimeFormatter.RFC_1123_DATE_TIME</code>. This is possible because they are, on the contrary to <code>SimpleDateFormat</code>, thread safe. You could thus also define your own, if necessary.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Ah yes the Java Date discussion, again.  To deal with date manipulation we use <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/Date.html\">Date</a>, <a href=\"http://download.oracle.com/javase/6/docs/api/java/util/Calendar.html\">Calendar</a>, <a href=\"http://download.oracle.com/javase/6/docs/api/java/util/GregorianCalendar.html\">GregorianCalendar</a>, and <a href=\"http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html\">SimpleDateFormat</a>.  For example using your January date as input:</p>\n\n<pre><code>Calendar mydate = new GregorianCalendar();\nString mystring = \"January 2, 2010\";\nDate thedate = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH).parse(mystring);\nmydate.setTime(thedate);\n//breakdown\nSystem.out.println(\"mydate -&gt; \"+mydate);\nSystem.out.println(\"year   -&gt; \"+mydate.get(Calendar.YEAR));\nSystem.out.println(\"month  -&gt; \"+mydate.get(Calendar.MONTH));\nSystem.out.println(\"dom    -&gt; \"+mydate.get(Calendar.DAY_OF_MONTH));\nSystem.out.println(\"dow    -&gt; \"+mydate.get(Calendar.DAY_OF_WEEK));\nSystem.out.println(\"hour   -&gt; \"+mydate.get(Calendar.HOUR));\nSystem.out.println(\"minute -&gt; \"+mydate.get(Calendar.MINUTE));\nSystem.out.println(\"second -&gt; \"+mydate.get(Calendar.SECOND));\nSystem.out.println(\"milli  -&gt; \"+mydate.get(Calendar.MILLISECOND));\nSystem.out.println(\"ampm   -&gt; \"+mydate.get(Calendar.AM_PM));\nSystem.out.println(\"hod    -&gt; \"+mydate.get(Calendar.HOUR_OF_DAY));\n</code></pre>\n\n<p>Then you can manipulate that with something like:</p>\n\n<pre><code>Calendar now = Calendar.getInstance();\nmydate.set(Calendar.YEAR,2009);\nmydate.set(Calendar.MONTH,Calendar.FEBRUARY);\nmydate.set(Calendar.DAY_OF_MONTH,25);\nmydate.set(Calendar.HOUR_OF_DAY,now.get(Calendar.HOUR_OF_DAY));\nmydate.set(Calendar.MINUTE,now.get(Calendar.MINUTE));\nmydate.set(Calendar.SECOND,now.get(Calendar.SECOND));\n// or with one statement\n//mydate.set(2009, Calendar.FEBRUARY, 25, now.get(Calendar.HOUR_OF_DAY), now.get(Calendar.MINUTE), now.get(Calendar.SECOND));\nSystem.out.println(\"mydate -&gt; \"+mydate);\nSystem.out.println(\"year   -&gt; \"+mydate.get(Calendar.YEAR));\nSystem.out.println(\"month  -&gt; \"+mydate.get(Calendar.MONTH));\nSystem.out.println(\"dom    -&gt; \"+mydate.get(Calendar.DAY_OF_MONTH));\nSystem.out.println(\"dow    -&gt; \"+mydate.get(Calendar.DAY_OF_WEEK));\nSystem.out.println(\"hour   -&gt; \"+mydate.get(Calendar.HOUR));\nSystem.out.println(\"minute -&gt; \"+mydate.get(Calendar.MINUTE));\nSystem.out.println(\"second -&gt; \"+mydate.get(Calendar.SECOND));\nSystem.out.println(\"milli  -&gt; \"+mydate.get(Calendar.MILLISECOND));\nSystem.out.println(\"ampm   -&gt; \"+mydate.get(Calendar.AM_PM));\nSystem.out.println(\"hod    -&gt; \"+mydate.get(Calendar.HOUR_OF_DAY));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>String str_date=\"11-June-07\";\nDateFormat formatter ; \nDate date ; \n   formatter = new SimpleDateFormat(\"dd-MMM-yy\");\n   date = formatter.parse(str_date);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While on dealing with SimpleDateFormat Class, its important to remember that Date is not Thread-safe and you can not share a single Date object with multiple thread.Also there is big difference between \"m\" and \"M\" where small case is used for minutes and capital case is used for Month. Same with \"d\" and \"D\". This can cause subtle bugs which often get overlooked. See <a href=\"http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html\">Javadoc</a> or <a href=\"http://javarevisited.blogspot.com/2011/09/step-by-step-guide-to-convert-string-to.html\">Guide to Convert String to Date in Java</a> for more details</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With Java 8 we get a new Date / Time API (<a href=\"https://jcp.org/en/jsr/detail?id=310\">JSR 310</a>).</p>\n\n<p>The following way can be used to parse the date in Java 8 without relying on <a href=\"http://www.joda.org/joda-time/\">Joda-Time</a>:</p>\n\n<pre><code>String str = \"January 2, 2010\";\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"MMMM d, yyyy\", Locale.ENGLISH);\nLocalDate date = LocalDate.parse(str, formatter);\n\n// access date fields\nint year = date.getYear(); // 2010\nint day = date.getDayOfMonth(); // 2\nMonth month = date.getMonth(); // JANUARY\nint monthAsInt = month.getValue(); // 1\n</code></pre>\n\n<p><a href=\"http://download.java.net/jdk8/docs/api/java/time/LocalDate.html\">LocalDate</a> is the standard Java 8 class for representing a date (without time). If you want to parse values that contain date and time information you should use <a href=\"http://download.java.net/jdk8/docs/api/java/time/LocalDateTime.html\">LocalDateTime</a>. For values with timezones use <a href=\"http://download.java.net/jdk8/docs/api/java/time/ZonedDateTime.html\">ZonedDateTime</a>. Both provide a <code>parse()</code> method similar to <code>LocalDate</code>:</p>\n\n<pre><code>LocalDateTime dateWithTime = LocalDateTime.parse(strWithDateAndTime, dateTimeFormatter);\nZonedDateTime zoned = ZonedDateTime.parse(strWithTimeZone, zoneFormatter);\n</code></pre>\n\n<p>The list formatting characters from <a href=\"http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html\">DateTimeFormatter Javadoc</a>:</p>\n\n<pre><code>All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters. \nThe following pattern letters are defined:\n\nSymbol  Meaning                     Presentation      Examples\n------  -------                     ------------      -------\n G       era                         text              AD; Anno Domini; A\n u       year                        year              2004; 04\n y       year-of-era                 year              2004; 04\n D       day-of-year                 number            189\n M/L     month-of-year               number/text       7; 07; Jul; July; J\n d       day-of-month                number            10\n\n Q/q     quarter-of-year             number/text       3; 03; Q3; 3rd quarter\n Y       week-based-year             year              1996; 96\n w       week-of-week-based-year     number            27\n W       week-of-month               number            4\n E       day-of-week                 text              Tue; Tuesday; T\n e/c     localized day-of-week       number/text       2; 02; Tue; Tuesday; T\n F       week-of-month               number            3\n\n a       am-pm-of-day                text              PM\n h       clock-hour-of-am-pm (1-12)  number            12\n K       hour-of-am-pm (0-11)        number            0\n k       clock-hour-of-am-pm (1-24)  number            0\n\n H       hour-of-day (0-23)          number            0\n m       minute-of-hour              number            30\n s       second-of-minute            number            55\n S       fraction-of-second          fraction          978\n A       milli-of-day                number            1234\n n       nano-of-second              number            987654321\n N       nano-of-day                 number            1234000000\n\n V       time-zone ID                zone-id           America/Los_Angeles; Z; -08:30\n z       time-zone name              zone-name         Pacific Standard Time; PST\n O       localized zone-offset       offset-O          GMT+8; GMT+08:00; UTC-08:00;\n X       zone-offset 'Z' for zero    offset-X          Z; -08; -0830; -08:30; -083015; -08:30:15;\n x       zone-offset                 offset-x          +0000; -08; -0830; -08:30; -083015; -08:30:15;\n Z       zone-offset                 offset-Z          +0000; -0800; -08:00;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While some of the answers are technically correct, they are not advisable. </p>\n\n<ul>\n<li>The java.util.Date &amp; Calendar classes are notoriously troublesome. Because of flaws in design and implementation, avoid them. Fortunately we have our choice of two other excellent date-time libraries:\n<ul>\n<li><strong><a href=\"http://www.joda.org/joda-time/\">Joda-Time</a></strong><br>This popular open-source free-of-cost library can be used across several versions of Java. Many examples of its usage may be found on StackOverflow. Reading some of these will help get you up to speed quickly.</li>\n<li><strong><a href=\"http://download.java.net/jdk8/docs/api/java/time/package-summary.html\">java.time.* package</a></strong><br>This new set of classes are inspired by Joda-Time and defined by JSR 310. These classes are built into Java 8. A project is underway to backport these classes to Java 7, but that backporting is not backed by Oracle.</li>\n</ul></li>\n<li>As Kristopher Johnson correctly noted in his comment on the question, the other answers ignore vital issues of:\n<ul>\n<li><strong>Time of Day</strong><br>Date has both a date portion and a time-of-day portion)</li>\n<li><strong>Time Zone</strong><br>The beginning of a day depends on the time zone. If you fail to specify a time zone, the JVM's default time zone is applied. That means the behavior of your code may change when run on other computers or with a modified time zone setting. Probably not what you want.</li>\n<li><strong>Locale</strong><br>The Locale's language specifies how to interpret the words (name of month and of day) encountered during parsing. (The <a href=\"http://stackoverflow.com/a/4216767/642706\">answer by BalusC</a> handles this properly.) Also, the Locale affects the output of some formatters when generating a string representation of your date-time.</li>\n</ul></li>\n</ul>\n\n<h1>Joda-Time</h1>\n\n<p>A few notes about Joda-Time follow.</p>\n\n<h2>Time Zone</h2>\n\n<p>In <a href=\"http://www.joda.org/joda-time/\">Joda-Time</a>, a <a href=\"http://www.joda.org/joda-time/apidocs/org/joda/time/DateTime.html\">DateTime</a> object truly knows its own assigned time zone. This contrasts the java.util.Date class which <em>seems</em> to have a time zone but does not.</p>\n\n<p>Note in the example code below how we pass a time zone object to the formatter which parses the string. That time zone is used to interpret that date-time as having occurred in that time zone. So you need to think about and determine the time zone represented by that string input.</p>\n\n<p>Since you have no time portion in your input string, Joda-Time assigns the first moment of the day of the specified time zone as the time-of-day. Usually this means <code>00:00:00</code> but not always, because of <a href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\">Daylight Saving Time (DST)</a> or other anomalies. By the way, you can do the same to any DateTime instance by calling <code>withTimeAtStartOfDay</code>.</p>\n\n<h2>Formatter Pattern</h2>\n\n<p>The characters used in a formatter's pattern are similar in Joda-Time to those in java.util.Date/Calendar but not exactly the same. Carefully read the doc.</p>\n\n<h2>Immutability</h2>\n\n<p>We usually use the immutable classes in Joda-Time. Rather than modify an existing Date-Time object, we call methods that create a new fresh instance based on the other object with most aspects copied except where alterations were desired. An example is the call to <code>withZone</code> in last line below. <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">Immutability</a> helps to make Joda-Time very thread-safe, and can also make some work more clear.</p>\n\n<h2>Conversion</h2>\n\n<p>You will need java.util.Date objects for use with other classes/framework that do not know about Joda-Time objects. Fortunately, it is very easy to move back and forth.</p>\n\n<p>Going from a java.util.Date object (here named <code>date</code>) to Joda-Time DateTime\u2026</p>\n\n<pre><code>org.joda.time.DateTime dateTime = new DateTime( date, timeZone );\n</code></pre>\n\n<p>Going the other direction from Joda-Time to a java.util.Date object\u2026</p>\n\n<pre><code>java.util.Date date = dateTime.toDate();\n</code></pre>\n\n<h2>Sample Code</h2>\n\n<pre><code>String input = \"January 2, 2010\";\n\njava.util.Locale locale = java.util.Locale.US;\nDateTimeZone timeZone = DateTimeZone.forID( \"Pacific/Honolulu\" ); // Arbitrarily chosen for example.\nDateTimeFormatter formatter = DateTimeFormat.forPattern( \"MMMM d, yyyy\" ).withZone( timeZone ).withLocale( locale );\nDateTime dateTime = formatter.parseDateTime( input );\n\nSystem.out.println( \"dateTime: \" + dateTime );\nSystem.out.println( \"dateTime in UTC/GMT: \" + dateTime.withZone( DateTimeZone.UTC ) );\n</code></pre>\n\n<p>When run\u2026</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>dateTime: 2010-01-02T00:00:00.000-10:00\ndateTime in UTC/GMT: 2010-01-02T10:00:00.000Z\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Also SimpleDateFormat is not available with some of the client side technologies like gwt.\nIts a good idea to go for Calendar.getInstance() and your requirement is to compare two dates go for long date.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date date;\n    try {\n        date = dateFormat.parse(\"2013-12-4\");\n        System.out.println(date.toString()); // Wed Dec 04 00:00:00 CST 2013\n\n        String output = dateFormat.format(date); \n        System.out.println(output); // 2013-12-04\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n</code></pre>\n\n<p>Thanks for posters. Updated answer and test more. It works fine for me.\nHave Fun! @.@</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My humble test program. I use it to play around with the formatter and look-up long dates that I find in log-files (but who has put them there...).</p>\n\n<p><strong>My test program:</strong></p>\n\n<pre><code>package be.test.package.time;\n\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.TimeZone;\n\npublic class TimeWork {\n\n    public static void main(String[] args) {    \n\n        TimeZone timezone = TimeZone.getTimeZone(\"UTC\");\n\n        List&lt;Long&gt; longs = new ArrayList&lt;&gt;();\n        List&lt;String&gt; strings = new ArrayList&lt;&gt;();\n\n        //Formatting a date needs a timezone - otherwise the date get formatted to your system time zone.\n        //Use 24h format HH. In 12h format hh can be in range 0-11, which makes 12 overflow to 0.\n        DateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss.SSS\");\n        formatter.setTimeZone(timezone);\n\n        Date now = new Date();\n\n        //Test dates\n        strings.add(formatter.format(now));\n        strings.add(\"01-01-1970 00:00:00.000\");\n        strings.add(\"01-01-1970 00:00:01.000\");\n        strings.add(\"01-01-1970 00:01:00.000\");\n        strings.add(\"01-01-1970 01:00:00.000\");\n        strings.add(\"01-01-1970 10:00:00.000\");\n        strings.add(\"01-01-1970 12:00:00.000\");\n        strings.add(\"01-01-1970 24:00:00.000\");\n        strings.add(\"02-01-1970 00:00:00.000\");\n        strings.add(\"01-01-1971 00:00:00.000\");\n        strings.add(\"01-01-2014 00:00:00.000\");\n        strings.add(\"31-12-1969 23:59:59.000\");\n        strings.add(\"31-12-1969 23:59:00.000\");\n        strings.add(\"31-12-1969 23:00:00.000\");\n\n        //Test data\n        longs.add(now.getTime());\n        longs.add(-1L);\n        longs.add(0L); //Long date presentation at - midnight 1/1/1970 UTC - The timezone is important!\n        longs.add(1L);\n        longs.add(1000L);\n        longs.add(60000L);\n        longs.add(3600000L);\n        longs.add(36000000L);\n        longs.add(43200000L);\n        longs.add(86400000L);\n        longs.add(31536000000L);\n        longs.add(1388534400000L);\n        longs.add(7260000L);\n        longs.add(1417706084037L);\n        longs.add(-7260000L);\n\n        System.out.println(\"===== String to long =====\");\n\n        //Show the long value of the date\n        for (String string: strings) {\n            try {\n                Date date = formatter.parse(string);\n                System.out.println(\"Formated date : \" + string + \" = Long = \" + date.getTime());\n            } catch (ParseException e) {\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"===== Long to String =====\");\n\n        //Show the date behind the long\n        for (Long lo : longs) {\n            Date date = new Date(lo);\n            String string = formatter.format(date);\n            System.out.println(\"Formated date : \" + string + \" = Long = \" + lo);        \n        }\n    }\n}\n</code></pre>\n\n<p><strong>Test results:</strong></p>\n\n<pre><code>===== String to long =====\nFormated date : 05-12-2014 10:17:34.873 = Long = 1417774654873\nFormated date : 01-01-1970 00:00:00.000 = Long = 0\nFormated date : 01-01-1970 00:00:01.000 = Long = 1000\nFormated date : 01-01-1970 00:01:00.000 = Long = 60000\nFormated date : 01-01-1970 01:00:00.000 = Long = 3600000\nFormated date : 01-01-1970 10:00:00.000 = Long = 36000000\nFormated date : 01-01-1970 12:00:00.000 = Long = 43200000\nFormated date : 01-01-1970 24:00:00.000 = Long = 86400000\nFormated date : 02-01-1970 00:00:00.000 = Long = 86400000\nFormated date : 01-01-1971 00:00:00.000 = Long = 31536000000\nFormated date : 01-01-2014 00:00:00.000 = Long = 1388534400000\nFormated date : 31-12-1969 23:59:59.000 = Long = -1000\nFormated date : 31-12-1969 23:59:00.000 = Long = -60000\nFormated date : 31-12-1969 23:00:00.000 = Long = -3600000\n===== Long to String =====\nFormated date : 05-12-2014 10:17:34.873 = Long = 1417774654873\nFormated date : 31-12-1969 23:59:59.999 = Long = -1\nFormated date : 01-01-1970 00:00:00.000 = Long = 0\nFormated date : 01-01-1970 00:00:00.001 = Long = 1\nFormated date : 01-01-1970 00:00:01.000 = Long = 1000\nFormated date : 01-01-1970 00:01:00.000 = Long = 60000\nFormated date : 01-01-1970 01:00:00.000 = Long = 3600000\nFormated date : 01-01-1970 10:00:00.000 = Long = 36000000\nFormated date : 01-01-1970 12:00:00.000 = Long = 43200000\nFormated date : 02-01-1970 00:00:00.000 = Long = 86400000\nFormated date : 01-01-1971 00:00:00.000 = Long = 31536000000\nFormated date : 01-01-2014 00:00:00.000 = Long = 1388534400000\nFormated date : 01-01-1970 02:01:00.000 = Long = 7260000\nFormated date : 04-12-2014 15:14:44.037 = Long = 1417706084037\nFormated date : 31-12-1969 21:59:00.000 = Long = -7260000\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>JavaScript side solution:</p>\n\n<p>add hidden field with same input name and store date in a correct format in this field</p>\n\n<p>requires moment.js</p>\n\n<pre><code>$(window).load(function () {\n    $(\"input.hasDatepicker\").each(function () {\n        var thisRef = $(this);\n        var datePickerName = thisRef.attr(\"name\");\n        thisRef.attr(\"name\", datePickerName + \"Display\");\n        var hiddenField = $('&lt;input type=\"hidden\" name=\"' + datePickerName + '\" /&gt;');\n        thisRef.parent().prepend(hiddenField);\n        thisRef.change(function () {\n            $(hiddenField).val($(this).val() != \"\" ? moment($(this).val(), \"DD-MM-YYYY\").format() : \"\");\n        });\n        if (thisRef.val() != \"\") thisRef.trigger(\"change\");\n    });\n});\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>Iterator.remove()</code> is safe, you can use it like this:</p>\n\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();\n\n// This is a clever way to create the iterator and call iterator.hasNext() like\n// you would do in a while-loop. It would be the same as doing:\n//     Iterator&lt;String&gt; iterator = list.iterator();\n//     while (iterator.hasNext()) {\nfor (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext();) {\n    String string = iterator.next();\n    if (string.isEmpty()) {\n        // Remove the current element from the iterator and the list.\n        iterator.remove();\n    }\n}\n</code></pre>\n\n<p>Note that <code>Iterator.remove</code> is the only safe way to modify a collection during iteration; the behavior is unspecified if the underlying collection is modified in any other way while the iteration is in progress.</p>\n\n<p>Source:</p>\n\n<p><a href=\"http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html\">http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html</a></p>\n\n<hr>\n\n<p>And similarly, if you have a <code>ListIterator</code> and want to <em>add</em> items, you can use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#add-E-\"><code>ListIterator#add</code></a>, for the same reason you can use <code>Iterator#remove</code>\u00a0\u2014 it's designed to allow it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Silly me:</p>\n\n<pre><code>Iterator&lt;Integer&gt; iter = l.iterator();\nwhile (iter.hasNext()) {\n    if (iter.next().intValue() == 5) {\n        iter.remove();\n    }\n}\n</code></pre>\n\n<p>I assumed that since a foreach loop is syntactic sugar for iterating, using an iterator wouldn't help... but it gives you this <code>.remove()</code> functionality.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With Java 8 you can use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#removeIf-java.util.function.Predicate-\">the new <code>removeIf</code> method</a>. Applied to your example:</p>\n\n<pre><code>Collection&lt;Integer&gt; coll = new ArrayList&lt;Integer&gt;();\n//populate\n\ncoll.removeIf(i -&gt; i.intValue() == 5);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since the question has been already answered i.e. the best way is to use the remove method of the iterator object, I would go into the specifics of the place where the error <code>\"java.util.ConcurrentModificationException\"</code> is thrown.</p>\n\n<p>Every collection class has a private class which implements the Iterator interface and provides methods like <code>next()</code>, <code>remove()</code> and <code>hasNext()</code>.</p>\n\n<p>The code for next looks something like this...</p>\n\n<pre><code>public E next() {\n    checkForComodification();\n    try {\n        E next = get(cursor);\n        lastRet = cursor++;\n        return next;\n    } catch(IndexOutOfBoundsException e) {\n        checkForComodification();\n        throw new NoSuchElementException();\n    }\n}\n</code></pre>\n\n<p>Here the method <code>checkForComodification</code> is implemented as </p>\n\n<pre><code>final void checkForComodification() {\n    if (modCount != expectedModCount)\n        throw new ConcurrentModificationException();\n}\n</code></pre>\n\n<p>So, as you can see, if you explicitly try to remove an element from the collection. It results in <code>modCount</code> getting different from <code>expectedModCount</code>, resulting in the exception <code>ConcurrentModificationException</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end. This allows you to keep using the type-safety of the for-each loop at the cost of increased memory use and cpu time (shouldn't be a huge problem unless you have really, really big lists or a really old computer)</p>\n\n<pre><code>public static void main(String[] args)\n{\n    Collection&lt;Integer&gt; l = new ArrayList&lt;Integer&gt;();\n    Collection&lt;Integer&gt; itemsToRemove = new ArrayList&lt;Integer&gt;();\n    for (int i=0; i &lt; 10; ++i) {\n    l.add(new Integer(4));\n    l.add(new Integer(5));\n    l.add(new Integer(6));\n    }\n    for (Integer i : l)\n    {\n        if (i.intValue() == 5)\n            itemsToRemove.add(i);\n    }\n\n    l.removeAll(itemsToRemove);\n    System.out.println(l);\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Same answer as <a href=\"http://stackoverflow.com/a/223927/1433392\">Claudius</a> with a for loop:</p>\n\n<pre><code>for (Iterator&lt;Object&gt; it = objects.iterator(); it.hasNext();) {\n    Object object = it.next();\n    if (test) {\n        it.remove();\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In <a href=\"https://github.com/goldmansachs/gs-collections\">GS Collections</a>, the method removeIf defined on <a href=\"https://github.com/goldmansachs/gs-collections/blob/master/collections-api/src/main/java/com/gs/collections/api/collection/MutableCollection.java#L215\">MutableCollection</a> will work:</p>\n\n<pre><code>MutableList&lt;Integer&gt; list = Lists.mutable.of(1, 2, 3, 4, 5);\nlist.removeIf(Predicates.lessThan(3));\nAssert.assertEquals(Lists.mutable.of(3, 4, 5), list);\n</code></pre>\n\n<p>In Java 8 with Lambda support this can be written as follows:</p>\n\n<pre><code>MutableList&lt;Integer&gt; list = Lists.mutable.of(1, 2, 3, 4, 5);\nlist.removeIf(integer -&gt; integer &lt; 3);\nAssert.assertEquals(Lists.mutable.of(3, 4, 5), list);\n</code></pre>\n\n<p>Note: I am a developer on GS Collections</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In such cases a common trick is (was?) to go backwards:</p>\n\n<pre><code>for(int i = l.size() - 1; i &gt;= 0; i --) {\n  if (l.get(i) == 5) {\n    l.remove(i);\n  }\n}\n</code></pre>\n\n<p>That said, I'm more than happy that you have better ways in Java 8, e.g. <code>removeIf</code> or <code>filter</code> on streams.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Make a copy of existing list and iterate over new copy.</p>\n\n<pre><code>for (String str : new ArrayList&lt;String&gt;(listOfStr))     \n{\n    listOfStr.remove(/* object reference or index */);\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have a suggestion for the problem above. No need of secondary list or any extra time. Please find an example which would do the same stuff but in a different way.</p>\n\n<pre><code>//\"list\" is ArrayList&lt;Object&gt;\n//\"state\" is some boolean variable, which when set to true, Object will be removed from the list\nint index = 0;\nwhile(index &lt; list.size()) {\n    Object r = list.get(index);\n    if( state ) {\n        list.remove(index);\n        index = 0;\n        continue;\n    }\n    index += 1;\n}\n</code></pre>\n\n<p>\nThis would avoid the Concurrency Exception.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In addition to <code>@assylias</code> <a href=\"http://stackoverflow.com/a/23908758/303598\">answer</a> you can also use the new <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\" rel=\"nofollow\">Stream</a> api if you use Java 8:</p>\n\n<pre><code>List&lt;Integer&gt; l = Arrays.asList(4, 5, 6);\n\nstatic boolean condition(Integer i) {\n    return i == 5;\n}\n\nstatic Predicate&lt;Integer&gt; predicate = YourClassName::condition;\n\nl.stream()\n    .filter(predicate.negate())\n    .forEach(System.out::println);\n</code></pre>\n\n<hr>\n\n<p>If you invert the condition, the solution is even more concise since you do not need to <code>negate()</code> the predicate, thus allowing you to use just the method reference:</p>\n\n<pre><code>List&lt;Integer&gt; l = Arrays.asList(4, 5, 6);\n\nstatic boolean condition(Integer i) {\n    return i != 5;    // &lt;-- condition has been negated\n}\n\nl.stream()\n    .filter(YourClassName::condition)\n    .forEach(System.out::println);\n</code></pre>\n\n<hr>\n\n<p>One of the beauties of this is that the stream is lazily evaluated, i.e. <code>filter()</code> operation is not actually evaluated until it is used by a terminal operation such as <code>forEach()</code>. More on this can be found in Oracle's <a href=\"https://docs.oracle.com/javase/tutorial/collections/streams/\" rel=\"nofollow\">Tutorial</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>this might not be the best way, but for most of the small cases this should acceptable:</p>\n\n<blockquote>\n  <p><em>\"create a second empty-array and add only the ones you want to keep\"</em></p>\n</blockquote>\n\n<p><sub>I don't remeber where I read this from... for justiness I will make this wiki in hope someone finds it or just to don't earn rep I don't deserve.</sub></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Because floats and doubles cannot accurately represent the base 10 multiples we use for money. This issue isn't just for Java, it's for any programming language that uses native floating-point types, as it stems from how computers handle floating-point numbers by default.</p>\n\n<p>This is how an <a href=\"http://en.wikipedia.org/wiki/IEEE_floating_point\">IEEE-754</a> floating-point number works: it dedicates a bit for the sign, a few bits to store an exponent for the base, and the rest for a multiple of that elevated base. This leads to numbers like 10.25 being represented in a form similar to <code>1025 * 10^-2</code>; except that instead of the base being 10, for <code>float</code>s and <code>double</code>s, it's two (so that would be <code>164 * 2^-4</code>).</p>\n\n<p>Even in base 10, this notation cannot accurately represent most simple fractions. For instance, you can't represent 1/3 as a multiple of a power of 10: you would need to store an infinite amount of 3's and an infinitely large negative exponent, and you simply can't do that. However, for the purpose of money, in most scenarios all you need is to be able to store multiples of 10<sup>-2</sup>, so it's not too bad.</p>\n\n<p>Just as some fractions can't be represented exactly as a multiples of a power of 10, some of them can't be represented exactly as a multiple of a power of 2, either. In fact, the only fractions of a hundred between 0/100 and 100/100 (which are significant when dealing with money because they're integer cents) that can be represented exactly as an IEEE-754 binary floating-point number are 0, 0.25, 0.5, 0.75 and 1. All the others are off by a small amount.</p>\n\n<p>Representing money as a <code>double</code> or <code>float</code> will probably look good at first as the software rounds off the tiny errors, but as you perform more additions, subtractions, multiplications and divisions on inexact numbers, you'll lose more and more precision as the errors add up. This makes floats and doubles inadequate for dealing with money, where perfect accuracy for multiples of base 10 powers is required.</p>\n\n<p>A solution that works in just about any language is to use integers instead, and count cents. For instance, 1025 would be $10.25. Several languages also have built-in types to deal with money. Among others, Java  has the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html\"><code>BigDecimal</code></a> class, and C# has the <a href=\"http://msdn.microsoft.com/en-us/library/364x0z75.aspx\"><code>decimal</code></a> type.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>From Bloch, J., Effective Java, 2nd ed, Item 48:</strong></p>\n\n<blockquote>\n  <p>The <code>float</code> and <code>double</code> types are\n  particularly ill-suited for monetary\n  calculations because it is impossible\n  to represent 0.1 (or any other\n  negative power of ten) as a <code>float</code> or\n  <code>double</code> exactly.</p>\n  \n  <p>For example, suppose you have $1.03\n  and you spend 42c. How much money do\n  you have left?</p>\n\n<pre><code>System.out.println(1.03 - .42);\n</code></pre>\n  \n  <p>prints out <code>0.6100000000000001</code>.</p>\n  \n  <p>The right way to solve this problem is\n  to use <code>BigDecimal</code>, <code>int</code> or <code>long</code>\n  for monetary calculations.</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is not a matter of accuracy, nor is it a matter of precision.  It is a matter of meeting the expectations of humans who use base 10 for calculations instead of base 2.  For example, using doubles for financial calculations does not produce answers that are \"wrong\" in a mathematical sense, but it can produce answers that are not what is expected in a financial sense.</p>\n\n<p>Even if you round off your results at the last minute before output, you can still occasionally get a result using doubles that does not match expectations.</p>\n\n<p>Using a calculator, or calculating results by hand, 1.40 * 165 = 231 exactly.  However, internally using doubles, on my compiler / operating system environment, it is stored as a binary number close to 230.99999... so if you truncate the number, you get 230 instead of 231.  You may reason that rounding instead of truncating would have given the desired result of 231.  That is true, but rounding always involves truncation.  Whatever rounding technique you use, there are still boundary conditions like this one that will round down when you expect it to round up.  They are rare enough that they often will not be found through casual testing or observation.  You may have to write some code to search for examples that illustrate outcomes that do not behave as expected.</p>\n\n<p>Assume you want to round something to the nearest penny.  So you take your final result, multiply by 100, add 0.5, truncate, then divide the result by 100 to get back to pennies.  If the internal number you stored was 3.46499999.... instead of 3.465, you are going to get 3.46 instead 3.47 when you round the number to the nearest penny.  But your base 10 calculations may have indicated that the answer should be 3.465 exactly, which clearly should round up to 3.47, not down to 3.46.  These kinds of things happen occasionally in real life when you use doubles for financial calculations.  It is rare, so it often goes unnoticed as an issue, but it happens.</p>\n\n<p>If you use base 10 for your internal calculations instead of doubles, the answers are always exactly what is expected by humans, assuming no other bugs in your code.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Floats and doubles are approximate. If you create a BigDecimal and pass a float into the constructor you see what the float actually equals:</p>\n\n<pre><code>groovy:000&gt; new BigDecimal(1.0F)\n===&gt; 1\ngroovy:000&gt; new BigDecimal(1.01F)\n===&gt; 1.0099999904632568359375\n</code></pre>\n\n<p>this probably isn't how you want to represent $1.01.</p>\n\n<p>The problem is that the IEEE spec doesn't have a way to exactly represent all fractions, some of them end up as repeating fractions so you end up with approximation errors. Since accountants like things to come out exactly to the penny, and customers will be annoyed if they pay their bill and after the payment is processed they owe .01 and they get charged a fee or can't close their account, it's better to use exact types like decimal (in C#) or java.math.BigDecimal in Java.</p>\n\n<p>It's not that the error isn't controllable if you round: <a href=\"http://vanillajava.blogspot.com/2011/08/double-your-money-again.html\">see this article by Peter Lawrey</a>. It's just easier not to have to round in the first place. Most applications that handle money don't call for a lot of math, the operations consist of adding things or allocating amounts to different buckets. Introducing floating point and rounding just complicates things.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm troubled by some of these responses.  I think doubles and floats have a place in financial calculations.  Certainly, when adding and subtracting non-fractional monetary amounts there will be no loss of precision when using integer classes or BigDecimal classes.  But when performing more complex operations, you often end up with results that go out several or many decimal places, no matter how you store the numbers.  The issue is how you present the result.</p>\n\n<p>If your result is on the borderline between being rounded up and rounded down, and that last penny really matters, you should be probably be telling the viewer that the answer is nearly in the middle - by displaying more decimal places.</p>\n\n<p>The problem with doubles, and more so with floats, is when they are used to combine large numbers and small numbers.  In java,</p>\n\n<pre><code>System.out.println(1000000.0f + 1.2f - 1000000.0f);\n</code></pre>\n\n<p>results in</p>\n\n<pre><code>1.1875\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While it's true that floating point type can represent only approximatively decimal data, it's also true that if one rounds numbers to the necessary precision before presenting them, one obtains the correct result. Usually.</p>\n\n<p>Usually because the double type has a precision less than 16 figures. If you require better precision it's not a suitable type. Also approximations can accumulate.</p>\n\n<p>It must be said that even if you use fixed point arithmetic you still have to round numbers, were it not for the fact that BigInteger and BigDecimal give errors if you obtain periodic decimal numbers. So there is an approximation also here.</p>\n\n<p>For example COBOL, historically used for financial calculations, has a maximum precision of 18 figures. So there is often an implicit rounding.</p>\n\n<p>Concluding, in my opinion the double is unsuitable mostly for its 16 digit precision, which can be insufficient, not because it is approximate.</p>\n\n<p>Consider the following output of the subsequent program. It shows that after rounding double give the same result as BigDecimal up to precision 16.</p>\n\n<pre><code>Precision 14\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.000051110111115611\nDouble                        : 56789.012345 / 1111111111 = 0.000051110111115611\n\nPrecision 15\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.0000511101111156110\nDouble                        : 56789.012345 / 1111111111 = 0.0000511101111156110\n\nPrecision 16\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.00005111011111561101\nDouble                        : 56789.012345 / 1111111111 = 0.00005111011111561101\n\nPrecision 17\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.000051110111115611011\nDouble                        : 56789.012345 / 1111111111 = 0.000051110111115611013\n\nPrecision 18\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.0000511101111156110111\nDouble                        : 56789.012345 / 1111111111 = 0.0000511101111156110125\n\nPrecision 19\n------------------------------------------------------\nBigDecimalNoRound             : 56789.012345 / 1111111111 = Non-terminating decimal expansion; no exact representable decimal result.\nDoubleNoRound                 : 56789.012345 / 1111111111 = 5.111011111561101E-5\nBigDecimal                    : 56789.012345 / 1111111111 = 0.00005111011111561101111\nDouble                        : 56789.012345 / 1111111111 = 0.00005111011111561101252\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class Exercise {\n    public static void main(String[] args) throws IllegalArgumentException,\n            SecurityException, IllegalAccessException,\n            InvocationTargetException, NoSuchMethodException {\n        String amount = \"56789.012345\";\n        String quantity = \"1111111111\";\n        int [] precisions = new int [] {14, 15, 16, 17, 18, 19};\n        for (int i = 0; i &lt; precisions.length; i++) {\n            int precision = precisions[i];\n            System.out.println(String.format(\"Precision %d\", precision));\n            System.out.println(\"------------------------------------------------------\");\n            execute(\"BigDecimalNoRound\", amount, quantity, precision);\n            execute(\"DoubleNoRound\", amount, quantity, precision);\n            execute(\"BigDecimal\", amount, quantity, precision);\n            execute(\"Double\", amount, quantity, precision);\n            System.out.println();\n        }\n    }\n\n    private static void execute(String test, String amount, String quantity,\n            int precision) throws IllegalArgumentException, SecurityException,\n            IllegalAccessException, InvocationTargetException,\n            NoSuchMethodException {\n        Method impl = Exercise.class.getMethod(\"divideUsing\" + test, String.class,\n                String.class, int.class);\n        String price;\n        try {\n            price = (String) impl.invoke(null, amount, quantity, precision);\n        } catch (InvocationTargetException e) {\n            price = e.getTargetException().getMessage();\n        }\n        System.out.println(String.format(\"%-30s: %s / %s = %s\", test, amount,\n                quantity, price));\n    }\n\n    public static String divideUsingDoubleNoRound(String amount,\n            String quantity, int precision) {\n        // acceptance\n        double amount0 = Double.parseDouble(amount);\n        double quantity0 = Double.parseDouble(quantity);\n\n        //calculation\n        double price0 = amount0 / quantity0;\n\n        // presentation\n        String price = Double.toString(price0);\n        return price;\n    }\n\n    public static String divideUsingDouble(String amount, String quantity,\n            int precision) {\n        // acceptance\n        double amount0 = Double.parseDouble(amount);\n        double quantity0 = Double.parseDouble(quantity);\n\n        //calculation\n        double price0 = amount0 / quantity0;\n\n        // presentation\n        MathContext precision0 = new MathContext(precision);\n        String price = new BigDecimal(price0, precision0)\n                .toString();\n        return price;\n    }\n\n    public static String divideUsingBigDecimal(String amount, String quantity,\n            int precision) {\n        // acceptance\n        BigDecimal amount0 = new BigDecimal(amount);\n        BigDecimal quantity0 = new BigDecimal(quantity);\n        MathContext precision0 = new MathContext(precision);\n\n        //calculation\n        BigDecimal price0 = amount0.divide(quantity0, precision0);\n\n        // presentation\n        String price = price0.toString();\n        return price;\n    }\n\n    public static String divideUsingBigDecimalNoRound(String amount, String quantity,\n            int precision) {\n        // acceptance\n        BigDecimal amount0 = new BigDecimal(amount);\n        BigDecimal quantity0 = new BigDecimal(quantity);\n\n        //calculation\n        BigDecimal price0 = amount0.divide(quantity0);\n\n        // presentation\n        String price = price0.toString();\n        return price;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The result of floating point number is not exact, which makes them unsuitable for any financial calculation which requires exact result and not approximation. float and double are designed for engineering and scientific calculation and many times doesn\u2019t produce exact result also result of floating point calculation may vary from JVM to JVM. Look at below example of BigDecimal and double primitive which is used to represent money value, its quite clear that floating point calculation may not be exact and one should use BigDecimal for financial calculations.</p>\n\n<pre><code>    // floating point calculation\n    final double amount1 = 2.0;\n    final double amount2 = 1.1;\n    System.out.println(\"difference between 2.0 and 1.1 using double is: \" + (amount1 - amount2));\n\n    // Use BigDecimal for financial calculation\n    final BigDecimal amount3 = new BigDecimal(\"2.0\");\n    final BigDecimal amount4 = new BigDecimal(\"1.1\");\n    System.out.println(\"difference between 2.0 and 1.1 using BigDecimal is: \" + (amount3.subtract(amount4)));\n</code></pre>\n\n<p>Output:\ndifference between 2.0 and 1.1 using double is: 0.8999999999999999\ndifference between 2.0 and 1.1 using BigDecimal is: 0.9</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I prefer using Integer or Long to represent currency.  BigDecimal junks up the source code too much.</p>\n\n<p>You just have to know that all your values are in cents.  Or the lowest value of whatever currency you're using.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If your computation involves various steps, arbitrary precision arithmetic won't cover you 100%.</p>\n\n<p>The only reliable way to use perfect representation of results(Use a custom Fraction data type that will batch division operations to the last step) and only convert to a decimal notation in last step.</p>\n\n<p>Arbitrary precision won't help because there always can be numbers that has so much decimal places, or some results such as 0.6666666... No arbitrary representation will cover the last example. So you will have small errors in each step.</p>\n\n<p>This errors will add-up, may eventually become not easy to ignore anymore. This is called <a href=\"http://en.wikipedia.org/wiki/Propagation_of_uncertainty\" rel=\"nofollow\">Error Propagation</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Many of the answers posted to this question discuss IEEE and the standards surrounding floating-point arithmetic.</p>\n\n<p>Coming from a non-computer science background (physics and engineering), I tend to look at problems from a different perspective. For me, the reason why I wouldn't use a double or float in a mathematical calculation is that I would lose too much information.</p>\n\n<p>What are the alternatives? There are many (and many more of which I am not aware!).</p>\n\n<p>BigDecimal in Java is native to the Java language.\nApfloat is another arbitrary-precision library for Java.</p>\n\n<p>The decimal data type in C# is Microsoft's .NET alternative for 28 significant figures.</p>\n\n<p>SciPy (Scientific Python) can probably also handle financial calculations (I haven't tried, but I suspect so).</p>\n\n<p>The GNU Multiple Precision Library (GMP) and the GNU MFPR Library are two free and open-source resources for C and C++.</p>\n\n<p>There are also numerical precision libraries for JavaScript(!) and I think PHP which can handle financial calculations.</p>\n\n<p>There are also proprietary (particularly, I think, for Fortran) and open-source solutions as well for many computer languages.</p>\n\n<p>I'm not a computer scientist by training. However, I tend to lean towards either BigDecimal in Java or decimal in C#. I haven't tried the other solutions I've listed, but they are probably very good as well.</p>\n\n<p>For me, I like BigDecimal because of the methods it supports. C#'s decimal is very nice, but I haven't had the chance to work with it as much as I'd like. I do scientific calculations of interest to me in my spare time, and BigDecimal seems to work very well because I can set the precision of my floating point numbers. The disadvantage to BigDecimal? It can be slow at times, especially if you're using the divide method.</p>\n\n<p>You might, for speed, look into the free and proprietary libraries in C, C++, and Fortran.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Some example... this works (actually don't work as expected), on almost any programming language... I've tried with Delphi, VBScript, Visual Basic, JavaScript and now with Java/Android:</p>\n\n<pre><code>    double total = 0.0;\n\n    // do 10 adds of 10 cents\n    for (int i = 0; i &lt; 10; i++) {\n        total += 0.1;  // adds 10 cents\n    }\n\n    Log.d(\"round problems?\", \"current total: \" + total);\n\n    // looks like total equals to 1.0, don't?\n\n    // now, do reverse\n    for (int i = 0; i &lt; 10; i++) {\n        total -= 0.1;  // removes 10 cents\n    }\n\n    // looks like total equals to 0.0, don't?\n    Log.d(\"round problems?\", \"current total: \" + total);\n    if (total == 0.0) {\n        Log.d(\"round problems?\", \"is total equal to ZERO? YES, of course!!\");\n    } else {\n        Log.d(\"round problems?\", \"is total equal to ZERO? NO... thats why you should not use Double for some math!!!\");\n    }\n</code></pre>\n\n<p>OUTPUT:</p>\n\n<p><code>round\u00a0problems?: current total: 0.9999999999999999\n round\u00a0problems?: current total: 2.7755575615628914E-17\n round\u00a0problems?: is total equal to ZERO? NO... thats why you should not use Double for some math!!!</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've reached to a pretty nice precision just dealing with cents.</p>\n\n<p>Here is the class:</p>\n\n<pre><code>public class Money implements Comparable&lt;Money&gt; {\n\nprivate static Locale CURRENT_LOCALE = new Locale(\"pt\", \"br\");\n\nprivate Long amount = 0L;\n\npublic Money() { }\n\npublic Money(long cents) {\n    super();\n    this.setAmount(cents);\n}\n\npublic Money(float cents) {\n    super();\n    this.setAmount(cents);\n}\n\npublic Money(double cents) {\n    super();\n    this.setAmount(cents);\n}\n\npublic void setAmount(Long cents) {\n    this.amount = cents;\n}\n\npublic void setAmount(Float amount) {\n    this.amount = new Long(Math.round(amount * 100));\n}\n\npublic void setAmount(Double amount) {\n    this.amount = Math.round(amount * 100);\n}\n\npublic Double amount() {\n    return ((double) this.amount/100);\n}\n\npublic Money add(Money portion) {\n    if (amount != null) {\n        this.amount += portion.amount;\n    }\n    return this;\n}\n\npublic Money subtract(Money portion) {\n    if (amount != null) {\n        this.amount -= portion.amount;\n    }\n    return this;\n}\n\npublic Money multiplyBy(double times) {\n    this.amount = Math.round(this.amount * times);\n    return this;\n}\n\npublic Money divideBy(double divisor) {\n    this.amount = Math.round(this.amount / divisor);\n    return this;\n}\n\n@Override\npublic String toString() {\n    return NumberFormat.getCurrencyInstance(currentLocale()).format(amount());\n}\n\n@Override\npublic int compareTo(Money value) {\n    return (int) (amount - value.amount);\n}\n\nprotected static void currentLocale(Locale locale) {\n    CURRENT_LOCALE = locale;\n}\n\nprotected static Locale currentLocale() {\n    return CURRENT_LOCALE;\n}\n</code></pre>\n\n<p>}</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;build&gt;\n  &lt;plugins&gt;\n    &lt;plugin&gt;\n      &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n      &lt;configuration&gt;\n        &lt;archive&gt;\n          &lt;manifest&gt;\n            &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;\n          &lt;/manifest&gt;\n        &lt;/archive&gt;\n        &lt;descriptorRefs&gt;\n          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n        &lt;/descriptorRefs&gt;\n      &lt;/configuration&gt;\n    &lt;/plugin&gt;\n  &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>\n\n<p>and you run it with</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>mvn clean compile assembly:single\n</code></pre>\n\n<p><em>Compile goal should be added before assembly:single or otherwise the code on your own project is not included.</em></p>\n\n<p>See more details in comments.</p>\n\n<hr>\n\n<p>Commonly this goal is tied to a build phase to execute automatically. This ensures the JAR is built when executing <code>mvn install</code> or performing a deployment/release.</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n  &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n  &lt;configuration&gt;\n    &lt;archive&gt;\n      &lt;manifest&gt;\n        &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;\n      &lt;/manifest&gt;\n    &lt;/archive&gt;\n    &lt;descriptorRefs&gt;\n      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n    &lt;/descriptorRefs&gt;\n  &lt;/configuration&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;id&gt;make-assembly&lt;/id&gt; &lt;!-- this is used for inheritance merges --&gt;\n      &lt;phase&gt;package&lt;/phase&gt; &lt;!-- bind to the packaging phase --&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;single&lt;/goal&gt;\n      &lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the dependency-plugin to generate all dependencies in a separate directory before the package phase and then include that in the classpath of the manifest:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;copy-dependencies&lt;/id&gt;\n            &lt;phase&gt;prepare-package&lt;/phase&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;copy-dependencies&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt;\n                &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt;\n                &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt;\n                &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n    &lt;configuration&gt;\n        &lt;archive&gt;\n            &lt;manifest&gt;\n                &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;\n                &lt;mainClass&gt;theMainClass&lt;/mainClass&gt;\n            &lt;/manifest&gt;\n        &lt;/archive&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>\n\n<p>Alternatively use <code>${project.build.directory}/classes/lib</code> as OutputDirectory to integrate all jar-files into the main jar, but then you will need to add custom classloading code to load the jars.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Taking Unanswered's answer and reformatting it, we have:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n            &lt;configuration&gt;\n                &lt;archive&gt;\n                    &lt;manifest&gt;\n                        &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                        &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;\n                    &lt;/manifest&gt;\n                &lt;/archive&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n            &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n            &lt;configuration&gt;\n                &lt;descriptorRefs&gt;\n                    &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n                &lt;/descriptorRefs&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>\n\n<p>Next, I would recommend making this a natural part of your build, rather than something to call explicitly.  To make this a integral part of your build, add this plugin to your <code>pom.xml</code> and bind it to the <code>package</code> lifecycle event.  However, a gotcha is that you need to call the <code>assembly:single</code> goal if putting this in your pom.xml, while you would call 'assembly:assembly' if executing it manually from the command line.</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;project&gt;\n  [...]\n  &lt;build&gt;\n      &lt;plugins&gt;\n          &lt;plugin&gt;\n              &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n              &lt;configuration&gt;\n                  &lt;archive&gt;\n                      &lt;manifest&gt;\n                          &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                          &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;\n                      &lt;/manifest&gt;\n                  &lt;/archive&gt;\n                  &lt;descriptorRefs&gt;\n                      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n                  &lt;/descriptorRefs&gt;\n              &lt;/configuration&gt;\n              &lt;executions&gt;\n                  &lt;execution&gt;\n                      &lt;id&gt;make-my-jar-with-dependencies&lt;/id&gt;\n                      &lt;phase&gt;package&lt;/phase&gt;\n                      &lt;goals&gt;\n                          &lt;goal&gt;single&lt;/goal&gt;\n                      &lt;/goals&gt;\n                  &lt;/execution&gt;\n              &lt;/executions&gt;\n          &lt;/plugin&gt;\n      [...]\n      &lt;/plugins&gt;\n    [...]\n  &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the maven-shade-plugin to package all dependencies into one uber-jar. It can also be used to build an executable jar by specifying the main class. After trying to use maven-assembly and maven-jar , I found that this plugin best suited my needs. </p>\n\n<p>I found this plugin particularly useful as it merges content of specific files instead of overwriting them. This is needed when there are resource files that are have the same name across the jars and the plugin tries to package all the resource files</p>\n\n<p>See example below </p>\n\n<pre><code>      &lt;plugins&gt;\n    &lt;!-- This plugin provides the capability to package the artifact in an uber-jar, including its dependencies and to shade - i.e. rename - the packages of some of the dependencies. --&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;\n            &lt;version&gt;1.4&lt;/version&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;phase&gt;package&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;shade&lt;/goal&gt;\n                    &lt;/goals&gt;\n                    &lt;configuration&gt;\n                        &lt;artifactSet&gt;\n                        &lt;!-- signed jars--&gt;\n                            &lt;excludes&gt;\n                                &lt;exclude&gt;bouncycastle:bcprov-jdk15&lt;/exclude&gt;\n                            &lt;/excludes&gt;\n                        &lt;/artifactSet&gt;\n\n                         &lt;transformers&gt;\n                            &lt;transformer\n                                implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"&gt;\n                                &lt;!-- Main class --&gt;\n                                &lt;mainClass&gt;com.main.MyMainClass&lt;/mainClass&gt;\n                            &lt;/transformer&gt;\n                            &lt;!-- Use resource transformers to prevent file overwrites --&gt;\n                            &lt;transformer \n                                 implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\"&gt;\n                                &lt;resource&gt;properties.properties&lt;/resource&gt;\n                            &lt;/transformer&gt;\n                            &lt;transformer\n                                implementation=\"org.apache.maven.plugins.shade.resource.XmlAppendingTransformer\"&gt;\n                                &lt;resource&gt;applicationContext.xml&lt;/resource&gt;\n                            &lt;/transformer&gt;\n                            &lt;transformer\n                                implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\"&gt;\n                                &lt;resource&gt;META-INF/cxf/cxf.extension&lt;/resource&gt;\n                            &lt;/transformer&gt;\n                            &lt;transformer\n                                implementation=\"org.apache.maven.plugins.shade.resource.XmlAppendingTransformer\"&gt;\n                                &lt;resource&gt;META-INF/cxf/bus-extensions.xml&lt;/resource&gt;\n                            &lt;/transformer&gt;\n                     &lt;/transformers&gt;\n                    &lt;/configuration&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n\n    &lt;/plugins&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I blogged about some different ways to do this.</p>\n\n<p>See <a href=\"http://jinahya.wordpress.com/2014/05/22/executable-jar-with-apache-maven/\" rel=\"nofollow\">Executable Jar with Apache Maven</a> (WordPress)</p>\n\n<p>or <a href=\"https://github.com/jinahya/executable-jar-with-maven-example\" rel=\"nofollow\">executable-jar-with-maven-example</a>(GitHub)</p>\n\n<p><strong>maven-jar-plugin with maven-dependency-plugin</strong></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;id&gt;copy-dependencies&lt;/id&gt;\n      &lt;phase&gt;package&lt;/phase&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;copy-dependencies&lt;/goal&gt;\n      &lt;/goals&gt;\n      &lt;configuration&gt;\n        &lt;outputDirectory&gt;${project.build.directory}/${project.build.finalName}.lib&lt;/outputDirectory&gt;\n      &lt;/configuration&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n\n&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n  &lt;configuration&gt;\n    &lt;archive&gt;\n      &lt;manifest&gt;\n        &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n        &lt;classpathPrefix&gt;${project.build.finalName}.lib/&lt;/classpathPrefix&gt;\n        &lt;mainClass&gt;${fully.qualified.main.class}&lt;/mainClass&gt;\n      &lt;/manifest&gt;\n    &lt;/archive&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre>\n\n<ul>\n<li>Cons: Dependencies are out of the final jar.</li>\n</ul>\n\n<p><strong>maven-assembly-plugin</strong></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n  &lt;configuration&gt;\n    &lt;archive&gt;\n      &lt;manifest&gt;\n        &lt;mainClass&gt;${fully.qualified.main.class}&lt;/mainClass&gt;\n      &lt;/manifest&gt;\n    &lt;/archive&gt;\n    &lt;descriptorRefs&gt;\n      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n    &lt;/descriptorRefs&gt;\n  &lt;/configuration&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;phase&gt;package&lt;/phase&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;single&lt;/goal&gt;\n      &lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n\n<ul>\n<li>Cons: No class relocation support (use maven-shade-plugin if class relocation is needed).</li>\n</ul>\n\n<p><strong>maven-shade-plugin</strong></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;\n  &lt;configuration&gt;\n    &lt;shadedArtifactAttached&gt;true&lt;/shadedArtifactAttached&gt;\n    &lt;transformers&gt;\n      &lt;transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"&gt;\n        &lt;mainClass&gt;${fully.qualified.main.class}&lt;/mainClass&gt;\n      &lt;/transformer&gt;\n    &lt;/transformers&gt;\n  &lt;/configuration&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;id&gt;shade&lt;/id&gt;\n      &lt;!--phase&gt;package&lt;/phase--&gt; &lt;!-- default --&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;shade&lt;/goal&gt;\n      &lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n\n<p><strong>onejar-maven-plugin</strong></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n  &lt;!--groupId&gt;org.dstovall&lt;/groupId--&gt; &lt;!-- not available on the central --&gt;\n  &lt;groupId&gt;com.jolira&lt;/groupId&gt;\n  &lt;artifactId&gt;onejar-maven-plugin&lt;/artifactId&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;configuration&gt;\n        &lt;mainClass&gt;${fully.qualified.main.class}&lt;/mainClass&gt;\n        &lt;attachToBuild&gt;true&lt;/attachToBuild&gt;\n        &lt;!-- https://code.google.com/p/onejar-maven-plugin/issues/detail?id=8 --&gt;\n        &lt;!--classifier&gt;onejar&lt;/classifier--&gt;\n        &lt;filename&gt;${project.build.finalName}-onejar.${project.packaging}&lt;/filename&gt;\n      &lt;/configuration&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;one-jar&lt;/goal&gt;\n      &lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n\n<ul>\n<li>Cons: Not actively supported since 2012.</li>\n</ul>\n\n<p><strong>spring-boot-maven-plugin</strong></p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;repackage&lt;/goal&gt;\n      &lt;/goals&gt;\n      &lt;configuration&gt;\n        &lt;classifier&gt;spring-boot&lt;/classifier&gt;\n        &lt;mainClass&gt;${fully.qualified.main.class}&lt;/mainClass&gt;\n      &lt;/configuration&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n\n<ul>\n<li>Cons: Add potential unecessary Spring and Spring Boot related classes.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Long used the <strong>maven assembly plugin</strong>, but I could not find a solution to the problem with <a href=\"http://stackoverflow.com/questions/2596655/how-do-i-surpress-maven-assembly-plugin-skipping-files-that-are-already-added-o\"><code>\"already added, skipping\"</code></a>. Now, I'm using another plugin - <a href=\"http://code.google.com/p/onejar-maven-plugin/\"><strong>onejar-maven-plugin</strong></a>. Example below (<code>mvn package</code> build jar):</p>\n\n<pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.dstovall&lt;/groupId&gt;\n    &lt;artifactId&gt;onejar-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;1.3.0&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;configuration&gt;\n                &lt;mainClass&gt;com.company.MainClass&lt;/mainClass&gt;\n            &lt;/configuration&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;one-jar&lt;/goal&gt;\n            &lt;/goals&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n\n<p>You need to add repository for that plugin:</p>\n\n<pre><code>&lt;pluginRepositories&gt;\n    &lt;pluginRepository&gt;\n        &lt;id&gt;onejar-maven-plugin.googlecode.com&lt;/id&gt;\n        &lt;url&gt;http://onejar-maven-plugin.googlecode.com/svn/mavenrepo&lt;/url&gt;\n    &lt;/pluginRepository&gt;\n&lt;/pluginRepositories&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use maven-dependency-plugin, but the question was how to create an executable JAR. To do that requires the following alteration to Matthew Franglen's response (btw, using the dependency plugin takes longer to build when starting from a clean target):</p>\n\n<pre><code>&lt;build&gt;\n\t&lt;plugins&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n\t\t\t&lt;configuration&gt;\n\t\t\t\t&lt;archive&gt;\n\t\t\t\t\t&lt;manifest&gt;\n\t\t\t\t\t\t&lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;\n\t\t\t\t\t&lt;/manifest&gt;\n\t\t\t\t&lt;/archive&gt;\n\t\t\t&lt;/configuration&gt;\n\t\t&lt;/plugin&gt;\n\t\t&lt;plugin&gt;\n\t\t\t&lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n\t\t\t&lt;executions&gt;\n\t\t\t\t&lt;execution&gt;\n\t\t\t\t\t&lt;id&gt;unpack-dependencies&lt;/id&gt;\n\t\t\t\t\t&lt;phase&gt;package&lt;/phase&gt;\n\t\t\t\t\t&lt;goals&gt;\n\t\t\t\t\t\t&lt;goal&gt;unpack-dependencies&lt;/goal&gt;\n\t\t\t\t\t&lt;/goals&gt;\n\t\t\t\t&lt;/execution&gt;\n\t\t\t&lt;/executions&gt;\n\t\t&lt;/plugin&gt;\n\t&lt;/plugins&gt;\n\t&lt;resources&gt;\n\t\t&lt;resource&gt;\n\t\t\t&lt;directory&gt;${basedir}/target/dependency&lt;/directory&gt;\n\t\t&lt;/resource&gt;\n\t&lt;/resources&gt;\n&lt;/build&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another option if you really want to repackage the other JARs contents inside your single resultant JAR is the <a href=\"http://maven.apache.org/plugins/maven-assembly-plugin/\">Maven Assembly plugin</a>.  It unpacks and then repacks everything into a directory via <code>&lt;unpack&gt;true&lt;/unpack&gt;</code>. Then you'd have a second pass that built it into one massive JAR.</p>\n\n<p><a href=\"http://code.google.com/p/onejar-maven-plugin/\">Another option is the OneJar plugin</a>.  This performs the above repackaging actions all in one step.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can add the following to your <strong>pom.xml</strong>:</p>\n\n<pre><code>&lt;build&gt;\n&lt;defaultGoal&gt;install&lt;/defaultGoal&gt;\n&lt;plugins&gt;\n  &lt;plugin&gt;\n    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.3.2&lt;/version&gt;\n    &lt;configuration&gt;\n      &lt;source&gt;1.6&lt;/source&gt;\n      &lt;target&gt;1.6&lt;/target&gt;\n    &lt;/configuration&gt;\n  &lt;/plugin&gt;\n  &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.3.1&lt;/version&gt;\n    &lt;configuration&gt;\n      &lt;archive&gt;\n        &lt;manifest&gt;\n          &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n          &lt;mainClass&gt;com.mycompany.package.MainClass&lt;/mainClass&gt;\n        &lt;/manifest&gt;\n      &lt;/archive&gt;\n    &lt;/configuration&gt;\n  &lt;/plugin&gt;\n  &lt;plugin&gt;\n    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n    &lt;configuration&gt;\n      &lt;descriptorRefs&gt;\n        &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n      &lt;/descriptorRefs&gt;\n      &lt;archive&gt;\n        &lt;manifest&gt;\n          &lt;mainClass&gt;com.mycompany.package.MainClass&lt;/mainClass&gt;\n        &lt;/manifest&gt;\n      &lt;/archive&gt;\n    &lt;/configuration&gt;\n    &lt;executions&gt;\n      &lt;execution&gt;\n        &lt;id&gt;make-my-jar-with-dependencies&lt;/id&gt;\n        &lt;phase&gt;package&lt;/phase&gt;\n        &lt;goals&gt;\n          &lt;goal&gt;single&lt;/goal&gt;\n        &lt;/goals&gt;\n      &lt;/execution&gt;\n    &lt;/executions&gt;\n  &lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>\n\n<p>Afterwards you have to switch via the console to the directory, where the pom.xml is located. Then you have to execute <strong>mvn assembly:single</strong> and then your executable JAR file with dependencies will be hopefully build. You can check it when switching to the output (target) directory with <strong>cd ./target</strong> and starting your jar with a command similiar to <strong>java -jar mavenproject1-1.0-SNAPSHOT-jar-with-dependencies.jar</strong>. </p>\n\n<p>I tested this with <strong>Apache Maven 3.0.3</strong>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could combine the <code>maven-shade-plugin</code> and <code>maven-jar-plugin</code>.</p>\n\n<ul>\n<li>The <code>maven-shade-plugin</code> packs your classes and all dependencies in a single jar file.</li>\n<li>Configure the <code>maven-jar-plugin</code> to specify the main class of your executable jar (see <a href=\"http://maven.apache.org/shared/maven-archiver/examples/classpath.html\" rel=\"nofollow\">Set Up The Classpath</a>, chapter \"Make The Jar Executable\").</li>\n</ul>\n\n<p>Example POM configuration for <code>maven-jar-plugin</code>:</p>\n\n<pre><code>        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.3.2&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;archive&gt;\n                    &lt;manifest&gt;\n                        &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                        &lt;mainClass&gt;com.example.MyMainClass&lt;/mainClass&gt;\n                    &lt;/manifest&gt;\n                &lt;/archive&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n</code></pre>\n\n<p>Finally create the executable jar by invoking:</p>\n\n<pre><code>mvn clean package shade:shade\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://onejar-maven-plugin.googlecode.com/svn/mavensite/usage.html\" rel=\"nofollow\">onejar plugin</a> to build it as one executable jar file which packages all the dependancy jars in it. That solved my problem which was similar to this. When assembly plugin was used, it unpacked all the dependancy jars into source folder and repackage them as a jar, it had over written all the similar implementations I had inside my code which were having the same class names. onejar is an easy solution in here.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Ken Liu has it right in my opinion. The maven dependency plugin allows you to expand all the dependencies, which you can then treat as resources. This allows you to include them in the <em>main</em> artifact. The use of the assembly plugin creates a secondary artifact which can be difficult to modify - in my case I wanted to add custom manifest entries. My pom ended up as:</p>\n\n<pre><code>&lt;project&gt;\n ...\n &lt;build&gt;\n  &lt;plugins&gt;\n   &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n    &lt;executions&gt;\n     &lt;execution&gt;\n      &lt;id&gt;unpack-dependencies&lt;/id&gt;\n      &lt;phase&gt;package&lt;/phase&gt;\n      &lt;goals&gt;\n       &lt;goal&gt;unpack-dependencies&lt;/goal&gt;\n      &lt;/goals&gt;\n     &lt;/execution&gt;\n    &lt;/executions&gt;\n   &lt;/plugin&gt;\n  &lt;/plugins&gt;\n  ...\n  &lt;resources&gt;\n   &lt;resource&gt;\n    &lt;directory&gt;${basedir}/target/dependency&lt;/directory&gt;\n    &lt;targetPath&gt;/&lt;/targetPath&gt;\n   &lt;/resource&gt;\n  &lt;/resources&gt;\n &lt;/build&gt;\n ...\n&lt;/project&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Problem with locating shared assembly file with maven-assembly-plugin-2.2.1?</p>\n\n<p>Try using descriptorId configuration parameter instead of descriptors/descriptor or descriptorRefs/descriptorRef parameters.</p>\n\n<p>Neither of them do what you need: look for the file on classpath.\nOf course you need adding the package where the shared assembly resides on maven-assembly-plugin's classpath (see below).\nIf you're using Maven 2.x (not Maven 3.x), you may need adding this dependency in top-most parent pom.xml in pluginManagement section.</p>\n\n<p>See <a href=\"http://svn.apache.org/repos/asf/maven/plugins/tags/maven-assembly-plugin-2.2.1\" rel=\"nofollow\">this</a> for more details.</p>\n\n<p>Class: org.apache.maven.plugin.assembly.io.DefaultAssemblyReader</p>\n\n<p>Example:</p>\n\n<pre><code>        &lt;!-- Use the assembly plugin to create a zip file of all our dependencies. --&gt;\n        &lt;plugin&gt;\n            &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.2.1&lt;/version&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;make-assembly&lt;/id&gt;\n                    &lt;phase&gt;package&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;single&lt;/goal&gt;\n                    &lt;/goals&gt;\n                    &lt;configuration&gt;\n                        &lt;descriptorId&gt;assembly-zip-for-wid&lt;/descriptorId&gt;\n                    &lt;/configuration&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n            &lt;dependencies&gt;\n                &lt;dependency&gt;\n                    &lt;groupId&gt;cz.ness.ct.ip.assemblies&lt;/groupId&gt;\n                    &lt;artifactId&gt;TEST_SharedAssemblyDescriptor&lt;/artifactId&gt;\n                    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n                &lt;/dependency&gt;\n            &lt;/dependencies&gt;\n        &lt;/plugin&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I won't answer directly the question as other have already done that before, but I really wonder if it's a good idea to embed all the dependencies in the project's jar itself.</p>\n\n<p>I see the point (ease of deployment / usage) but it depends of the use case of your poject (and there may be alternatives (see below)).</p>\n\n<p>If you use it fully standalone, why not.</p>\n\n<p>But if you use your project in other contexts (like in a webapp, or dropped in a folder where other jars are sitting), you may have jar duplicates in your classpath (the ones in the folder, the one in the jars). Maybe not a bid deal but i usually avoid this.</p>\n\n<p>A good alternative :</p>\n\n<ul>\n<li>deploy your application as a .zip / .war : the archive contains your project's jar and all dependent jars ;</li>\n<li>use a dynamic classloader mechanism (see Spring, or you can easily do this yourself) to have a single entry point of your project (a single class to start - see the Manifest mechanism on another answer), which will add (dynamically) to the current classpath all the other needed jars.</li>\n</ul>\n\n<p>Like this, with in the end just a manifest and a \"special dynamic classloader main\", you can start your project with :</p>\n\n<pre><code>java -jar ProjectMainJar.jar com.stackoverflow.projectName.MainDynamicClassLoaderClass\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>it should be like that</p>\n\n<pre><code>    &lt;plugin&gt;\n                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n                &lt;executions&gt;\n                        &lt;execution&gt;\n                                &lt;id&gt;unpack-dependencies&lt;/id&gt;\n                                &lt;phase&gt;generate-resources&lt;/phase&gt;\n                                &lt;goals&gt;\n                                        &lt;goal&gt;unpack-dependencies&lt;/goal&gt;\n                                &lt;/goals&gt;\n                        &lt;/execution&gt;\n                &lt;/executions&gt;\n        &lt;/plugin&gt;\n</code></pre>\n\n<p>unpacking have to be in generate-resources phase because, if in package phase, will not be included as resources.\nTry clean package and you'll see</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want if from command Line itself . Just run the below command from the project path </p>\n\n<p>mvn assembly:assembly</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also use this plug-in, it is pretty good and I use it for packaging my jars <a href=\"http://sonatype.github.io/jarjar-maven-plugin/\" rel=\"nofollow\">http://sonatype.github.io/jarjar-maven-plugin/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Something that have worked for me was:</p>\n\n<pre><code>  &lt;plugin&gt;\n    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n    &lt;executions&gt;\n      &lt;execution&gt;\n        &lt;id&gt;unpack-dependencies&lt;/id&gt;\n        &lt;phase&gt;prepare-package&lt;/phase&gt;\n        &lt;goals&gt;\n          &lt;goal&gt;unpack-dependencies&lt;/goal&gt;\n        &lt;/goals&gt;\n        &lt;configuration&gt;\n          &lt;outputDirectory&gt;${project.build.directory}/classes&lt;/outputDirectory&gt;\n        &lt;/configuration&gt;\n      &lt;/execution&gt;\n\n    &lt;/executions&gt;\n  &lt;/plugin&gt;\n\n\n  &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n    &lt;executions&gt;\n      &lt;execution&gt;\n        &lt;id&gt;unpack-dependencies&lt;/id&gt;\n        &lt;phase&gt;package&lt;/phase&gt;\n      &lt;/execution&gt;\n    &lt;/executions&gt;\n    &lt;configuration&gt;\n      &lt;archive&gt;\n        &lt;manifest&gt;\n          &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n          &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;\n          &lt;mainClass&gt;SimpleKeyLogger&lt;/mainClass&gt;\n        &lt;/manifest&gt;\n      &lt;/archive&gt;\n    &lt;/configuration&gt;\n  &lt;/plugin&gt;\n</code></pre>\n\n<p>I had extraordinary case because my dependency was system one:</p>\n\n<pre><code>&lt;dependency&gt;\n  ..\n  &lt;scope&gt;system&lt;/scope&gt;\n  &lt;systemPath&gt;${project.basedir}/lib/myjar.jar&lt;/systemPath&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n<p>I have changed the code provided by @user189057 with changes:\n1) maven-dependency-plugin is executed in \"prepare-package\" phase\n2) I am extracting unpacked classess directly to \"target/classes\"</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is the best way i found:</p>\n\n<pre><code>  &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.4&lt;/version&gt;\n    &lt;configuration&gt;\n      &lt;archive&gt;\n        &lt;manifest&gt;\n        &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n        &lt;mainClass&gt;com.myDomain.etc.MainClassName&lt;/mainClass&gt;\n        &lt;classpathPrefix&gt;dependency-jars/&lt;/classpathPrefix&gt;\n        &lt;/manifest&gt;\n      &lt;/archive&gt;\n    &lt;/configuration&gt;\n  &lt;/plugin&gt;\n  &lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.5.1&lt;/version&gt;\n    &lt;executions&gt;\n      &lt;execution&gt;\n        &lt;id&gt;copy-dependencies&lt;/id&gt;\n        &lt;phase&gt;package&lt;/phase&gt;\n        &lt;goals&gt;\n            &lt;goal&gt;copy-dependencies&lt;/goal&gt;\n        &lt;/goals&gt;\n        &lt;configuration&gt;\n            &lt;outputDirectory&gt;\n               ${project.build.directory}/dependency-jars/\n            &lt;/outputDirectory&gt;\n        &lt;/configuration&gt;\n      &lt;/execution&gt;\n    &lt;/executions&gt;\n  &lt;/plugin&gt;\n</code></pre>\n\n<p>With this configuration, all dependencies will be located in <code>/dependency-jars</code>. My application has no <code>Main</code> class, just context ones, but one of my dependencies do have a <code>Main</code> class (<code>com.myDomain.etc.MainClassName</code>) that starts the JMX server, and receives a <code>start</code> or a <code>stop</code> parameter. So with this i was able to start my application like this:</p>\n\n<pre><code>java -jar ./lib/TestApp-1.0-SNAPSHOT.jar start\n</code></pre>\n\n<p>I wait it be useful for you all.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The maven-assembly-plugin worked great for me.\nI spent hours with the maven-dependency-plugin and couldn't make it work. The main reason was that I had to define in the configuration section explicitly the artifact items which should be included as it is described in the <a href=\"http://maven.apache.org/plugins/maven-dependency-plugin/usage.html\" rel=\"nofollow\">documentation</a>. \nThere is an example there for the cases when you want to use it like: <code>mvn dependency:copy</code>, where there are not included any artifactItems but it doesn't work.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I tried the most up-voted answer here, and was able to get the jar runnable. But the program didn't run correctly. I do not know what the reason was. When I try to run from <code>Eclipse</code>, I get a different result but when I run the jar from command-line I get a different result (it crashes with a program-specific runtime error).</p>\n\n<p>I had a similar requirement as the OP just that I had too many (Maven) dependencies for my project. Fortunately, the only solution that worked for me was that using <code>Eclipse</code>. Very simple and very straightforward. This is not a solution to the OP but is a solution for someone who has a similar requirement but with many Maven dependencies,</p>\n\n<p>1) Just right-click on your project folder (in Eclipse) and select <code>Export</code></p>\n\n<p>2) Then select <code>Java</code> -&gt; <code>Runnable Jar</code></p>\n\n<p>3) You will be asked to choose the location of the jar file</p>\n\n<p>4) Finally, select the class that has the Main method that you want to run and choose <code>Package dependencies with the Jar file</code> and click <code>Finish</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Okay, so this is my solution. I know it's not using the pom.xml file. But I had the problem my programmme compiling and running on Netbeans but it failing when I tried Java -jar MyJarFile.jar. Now, I don't fully understand Maven and I think this why was having trouble getting Netbeans 8.0.2 to include my jar file in a library to put them into a jar file. I was thinking about how I used to use jar files with no Maven in Eclipse. </p>\n\n<p>It's Maven that can compile all the dependanices and plugins. Not Netbeans. (If you can get Netbeans and be able to use java .jar to do this please tell me how (^.^)v )</p>\n\n<p>[Solved - for Linux] by opening a terminal. </p>\n\n<p>Then</p>\n\n<p>cd /MyRootDirectoryForMyProject</p>\n\n<p>Next</p>\n\n<p>mvn org.apache.maven.plugins:maven-compiler-plugin:compile</p>\n\n<p>Next</p>\n\n<p>mvn install</p>\n\n<p>This will create jar file in the target directory.</p>\n\n<p>MyJarFile-1.0-jar-with-dependencies.jar</p>\n\n<p>Now</p>\n\n<p>cd target</p>\n\n<p>(You may need to run: chmod +x MyJarFile-1.0-jar-with-dependencies.jar)</p>\n\n<p>And finally</p>\n\n<p>java -jar MyJarFile-1.0-jar-with-dependencies.jar</p>\n\n<p>Please see </p>\n\n<p><a href=\"https://cwiki.apache.org/confluence/display/MAVEN/LifecyclePhaseNotFoundException\" rel=\"nofollow\">https://cwiki.apache.org/confluence/display/MAVEN/LifecyclePhaseNotFoundException</a></p>\n\n<p>I'll post this solution in on a couple of other pages with a similar problem. Hopefully I can save somebody from a week of frustration.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This blog post shows another approach with combining the maven-jar and maven-assembly plugins. With the assembly configuration xml from the blog post it can also be controlled if dependencies will be expanded or just be collected in a folder and referenced by a classpath entry in the manifest:</p>\n\n<blockquote>\n  <p>The ideal solution is to include the jars in a lib folder and the manifest.mf file of the main jar include all the jars in classpath.</p>\n</blockquote>\n\n<p>And exactly that one is described here: <a href=\"https://caffebig.wordpress.com/2013/04/05/executable-jar-file-with-dependent-jars-using-maven/\" rel=\"nofollow\">https://caffebig.wordpress.com/2013/04/05/executable-jar-file-with-dependent-jars-using-maven/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I went through every one of these responses looking to make a fat executable jar containing all dependencies and none of them worked right.  The answer is the shade plugin, its very easy and straightforward.</p>\n\n<pre><code>    &lt;plugin&gt;\n      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n      &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;\n      &lt;version&gt;2.3&lt;/version&gt;\n      &lt;executions&gt;\n         &lt;!-- Run shade goal on package phase --&gt;\n        &lt;execution&gt;\n        &lt;phase&gt;package&lt;/phase&gt;\n        &lt;goals&gt;\n            &lt;goal&gt;shade&lt;/goal&gt;\n        &lt;/goals&gt;\n        &lt;configuration&gt;\n          &lt;transformers&gt;\n             &lt;transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\"&gt;\n                &lt;mainClass&gt;path.to.MainClass&lt;/mainClass&gt;\n             &lt;/transformer&gt;\n          &lt;/transformers&gt;\n        &lt;/configuration&gt;\n          &lt;/execution&gt;\n      &lt;/executions&gt;\n    &lt;/plugin&gt;\n</code></pre>\n\n<p>Be aware that your dependencies need to have a scope of compile or runtime for this to work properly.</p>\n\n<p><a href=\"http://www.mkyong.com/maven/create-a-fat-jar-file-maven-shade-plugin/\" rel=\"nofollow\">This example came from mkyong.com</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This could also be an option,You will be able to build your jar file</p>\n\n<pre><code>&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;!-- Build an executable JAR --&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.4&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;archive&gt;\n                    &lt;manifest&gt;\n                        &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                        &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;\n                        &lt;mainClass&gt;WordListDriver&lt;/mainClass&gt;\n                    &lt;/manifest&gt;\n                &lt;/archive&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>NOTE:</strong>\nBefore trying this code, please find this line in the below code:</p>\n\n<pre><code>private static String DB_NAME =\"YourDbName\"; // Database name\n</code></pre>\n\n<p>DB_NAME here is the name of your database. It is assumed that you have a copy of the database in the assets folder, so for example if your database name is ordersDB, then the value of DB_NAME will be ordersDB,</p>\n\n<pre><code>private static String DB_NAME =\"ordersDB\";\n</code></pre>\n\n<hr>\n\n<p>Keep the database in <strong>assets folder</strong> and then follow the below:</p>\n\n<p>DataHelper class:</p>\n\n<pre><code>import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport android.content.Context;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.util.Log;\n\npublic class DataBaseHelper extends SQLiteOpenHelper\n{\n    private static String TAG = \"DataBaseHelper\"; // Tag just for the LogCat window\n    //destination path (location) of our database on device\n    private static String DB_PATH = \"\";\n    private static String DB_NAME =\"YourDbName\";// Database name\n    private SQLiteDatabase mDataBase;\n    private final Context mContext;\n\n    public DataBaseHelper(Context context)\n    {\n        super(context, DB_NAME, null, 1);// 1? Its database Version\n        if(android.os.Build.VERSION.SDK_INT &gt;= 17){\n           DB_PATH = context.getApplicationInfo().dataDir + \"/databases/\";\n        }\n        else\n        {\n           DB_PATH = \"/data/data/\" + context.getPackageName() + \"/databases/\";\n        }\n        this.mContext = context;\n    }\n\n    public void createDataBase() throws IOException\n    {\n        //If the database does not exist, copy it from the assets.\n\n        boolean mDataBaseExist = checkDataBase();\n        if(!mDataBaseExist)\n        {\n            this.getReadableDatabase();\n            this.close();\n            try\n            {\n                //Copy the database from assests\n                copyDataBase();\n                Log.e(TAG, \"createDatabase database created\");\n            }\n            catch (IOException mIOException)\n            {\n                throw new Error(\"ErrorCopyingDataBase\");\n            }\n        }\n    }\n\n    //Check that the database exists here: /data/data/your package/databases/Da Name\n    private boolean checkDataBase()\n    {\n        File dbFile = new File(DB_PATH + DB_NAME);\n        //Log.v(\"dbFile\", dbFile + \"   \"+ dbFile.exists());\n        return dbFile.exists();\n    }\n\n    //Copy the database from assets\n    private void copyDataBase() throws IOException\n    {\n        InputStream mInput = mContext.getAssets().open(DB_NAME);\n        String outFileName = DB_PATH + DB_NAME;\n        OutputStream mOutput = new FileOutputStream(outFileName);\n        byte[] mBuffer = new byte[1024];\n        int mLength;\n        while ((mLength = mInput.read(mBuffer))&gt;0)\n        {\n            mOutput.write(mBuffer, 0, mLength);\n        }\n        mOutput.flush();\n        mOutput.close();\n        mInput.close();\n    }\n\n    //Open the database, so we can query it\n    public boolean openDataBase() throws SQLException\n    {\n        String mPath = DB_PATH + DB_NAME;\n        //Log.v(\"mPath\", mPath);\n        mDataBase = SQLiteDatabase.openDatabase(mPath, null, SQLiteDatabase.CREATE_IF_NECESSARY);\n        //mDataBase = SQLiteDatabase.openDatabase(mPath, null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);\n        return mDataBase != null;\n    }\n\n    @Override\n    public synchronized void close()\n    {\n        if(mDataBase != null)\n            mDataBase.close();\n        super.close();\n    }\n}\n</code></pre>\n\n<p><strong>Write a DataAdapter class like:</strong></p>\n\n<pre><code>import java.io.IOException;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.util.Log;\n\npublic class TestAdapter\n{\n    protected static final String TAG = \"DataAdapter\";\n\n    private final Context mContext;\n    private SQLiteDatabase mDb;\n    private DataBaseHelper mDbHelper;\n\n    public TestAdapter(Context context)\n    {\n        this.mContext = context;\n        mDbHelper = new DataBaseHelper(mContext);\n    }\n\n    public TestAdapter createDatabase() throws SQLException\n    {\n        try\n        {\n            mDbHelper.createDataBase();\n        }\n        catch (IOException mIOException)\n        {\n            Log.e(TAG, mIOException.toString() + \"  UnableToCreateDatabase\");\n            throw new Error(\"UnableToCreateDatabase\");\n        }\n        return this;\n    }\n\n    public TestAdapter open() throws SQLException\n    {\n        try\n        {\n            mDbHelper.openDataBase();\n            mDbHelper.close();\n            mDb = mDbHelper.getReadableDatabase();\n        }\n        catch (SQLException mSQLException)\n        {\n            Log.e(TAG, \"open &gt;&gt;\"+ mSQLException.toString());\n            throw mSQLException;\n        }\n        return this;\n    }\n\n    public void close()\n    {\n        mDbHelper.close();\n    }\n\n     public Cursor getTestData()\n     {\n         try\n         {\n             String sql =\"SELECT * FROM myTable\";\n\n              Cursor mCur = mDb.rawQuery(sql, null);\n             if (mCur!=null)\n             {\n                mCur.moveToNext();\n             }\n             return mCur;\n         }\n         catch (SQLException mSQLException)\n         {\n             Log.e(TAG, \"getTestData &gt;&gt;\"+ mSQLException.toString());\n             throw mSQLException;\n         }\n     }\n}\n</code></pre>\n\n<p><strong>Now you can use it like:</strong></p>\n\n<pre><code>TestAdapter mDbHelper = new TestAdapter(urContext);\nmDbHelper.createDatabase();\nmDbHelper.open();\n\nCursor testdata = mDbHelper.getTestData();\n\nmDbHelper.close();\n</code></pre>\n\n<p><strong>EDIT: Thanks to JDx</strong></p>\n\n<p>For <a href=\"https://en.wikipedia.org/wiki/Android_version_history#Android_4.1_Jelly_Bean_.28API_level_16.29\" rel=\"nofollow\">Android\u00a04.1</a> (Jelly Bean), change:</p>\n\n<pre><code>DB_PATH = \"/data/data/\" + context.getPackageName() + \"/databases/\";\nto:\n\nDB_PATH = context.getApplicationInfo().dataDir + \"/databases/\";\nin the DataHelper class this code will work on JB 4.2 multi users.\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try out <em><a href=\"http://www.reigndesign.com/blog/using-your-own-sqlite-database-in-android-applications/\">Using your own SQLite database in Android applications</a></em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had trouble with the other DatabaseHelpers regarding this problem, not sure why.<br>\nThis is what worked for me:</p>\n\n<pre><code>import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.util.Log;\n\npublic class DatabaseHelper extends SQLiteOpenHelper {\n\n  private static final String TAG = DatabaseHelper.class.getSimpleName();\n\n  private final Context context;\n  private final String assetPath;\n  private final String dbPath;\n\n  public DatabaseHelper(Context context, String dbName, String assetPath)\n      throws IOException {\n    super(context, dbName, null, 1);\n    this.context = context;\n    this.assetPath = assetPath;\n    this.dbPath = \"/data/data/\"\n        + context.getApplicationContext().getPackageName() + \"/databases/\"\n        + dbName;\n    checkExists();\n  }\n\n  /**\n   * Checks if the database asset needs to be copied and if so copies it to the\n   * default location.\n   * \n   * @throws IOException\n   */\n  private void checkExists() throws IOException {\n    Log.i(TAG, \"checkExists()\");\n\n    File dbFile = new File(dbPath);\n\n    if (!dbFile.exists()) {\n\n      Log.i(TAG, \"creating database..\");\n\n      dbFile.getParentFile().mkdirs();\n      copyStream(context.getAssets().open(assetPath), new FileOutputStream(\n          dbFile));\n\n      Log.i(TAG, assetPath + \" has been copied to \" + dbFile.getAbsolutePath());\n    }\n\n  }\n\n  private void copyStream(InputStream is, OutputStream os) throws IOException {\n    byte buf[] = new byte[1024];\n    int c = 0;\n    while (true) {\n      c = is.read(buf);\n      if (c == -1)\n        break;\n      os.write(buf, 0, c);\n    }\n    is.close();\n    os.close();\n  }\n\n  @Override\n  public void onCreate(SQLiteDatabase db) {\n  }\n\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n  }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are having pre built data base than copy it in asset folder and create an new class as <strong>DataBaseHelper</strong> which implements <strong>SQLiteOpenHelper</strong> \nThan use following code:</p>\n\n<pre><code>import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\npublic class DataBaseHelperClass extends SQLiteOpenHelper{\n //The Android's default system path of your application database.\nprivate static String DB_PATH = \"/data/data/package_name/databases/\";\n// Data Base Name.\nprivate static final String DATABASE_NAME = \"DBName.sqlite\";\n// Data Base Version.\nprivate static final int DATABASE_VERSION = 1;\n// Table Names of Data Base.\nstatic final String TABLE_Name = \"tableName\";\n\npublic Context context;\nstatic SQLiteDatabase sqliteDataBase;\n\n/**\n * Constructor\n * Takes and keeps a reference of the passed context in order to access to the application assets and resources.\n * @param context\n * Parameters of super() are    1. Context\n *                              2. Data Base Name.\n *                              3. Cursor Factory.\n *                              4. Data Base Version.\n */\npublic DataBaseHelperClass(Context context) {       \n    super(context, DATABASE_NAME, null ,DATABASE_VERSION);\n    this.context = context;\n}\n\n/**\n * Creates a empty database on the system and rewrites it with your own database.\n * By calling this method and empty database will be created into the default system path\n * of your application so we are gonna be able to overwrite that database with our database.\n * */\npublic void createDataBase() throws IOException{\n    //check if the database exists\n    boolean databaseExist = checkDataBase();\n\n    if(databaseExist){\n        // Do Nothing.\n    }else{\n        this.getWritableDatabase();         \n        copyDataBase(); \n    }// end if else dbExist\n} // end createDataBase().\n\n/**\n * Check if the database already exist to avoid re-copying the file each time you open the application.\n * @return true if it exists, false if it doesn't\n */\npublic boolean checkDataBase(){\n    File databaseFile = new File(DB_PATH + DATABASE_NAME);\n    return databaseFile.exists();        \n}\n\n/**\n * Copies your database from your local assets-folder to the just created empty database in the\n * system folder, from where it can be accessed and handled.\n * This is done by transferring byte stream.\n * */\nprivate void copyDataBase() throws IOException{ \n    //Open your local db as the input stream\n    InputStream myInput = context.getAssets().open(DATABASE_NAME); \n    // Path to the just created empty db\n    String outFileName = DB_PATH + DATABASE_NAME; \n    //Open the empty db as the output stream\n    OutputStream myOutput = new FileOutputStream(outFileName); \n    //transfer bytes from the input file to the output file\n    byte[] buffer = new byte[1024];\n    int length;\n    while ((length = myInput.read(buffer))&gt;0){\n        myOutput.write(buffer, 0, length);\n    }\n\n    //Close the streams\n    myOutput.flush();\n    myOutput.close();\n    myInput.close(); \n}\n\n/**\n * This method opens the data base connection.\n * First it create the path up till data base of the device.\n * Then create connection with data base.\n */\npublic void openDataBase() throws SQLException{      \n    //Open the database\n    String myPath = DB_PATH + DATABASE_NAME;\n    sqliteDataBase = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READWRITE);  \n}\n\n/**\n * This Method is used to close the data base connection.\n */\n@Override\npublic synchronized void close() { \n    if(sqliteDataBase != null)\n        sqliteDataBase.close(); \n    super.close(); \n}\n\n/**\n* Apply your methods and class to fetch data using raw or queries on data base using \n* following demo example code as:\n*/\npublic String getUserNameFromDB(){\n    String query = \"select User_First_Name From \"+TABLE_USER_DETAILS;\n    Cursor cursor = sqliteDataBase.rawQuery(query, null);\n    String userName = null;\n    if(cursor.getCount()&gt;0){\n        if(cursor.moveToFirst()){\n    do{\n                userName = cursor.getString(0);\n            }while (cursor.moveToNext());\n        }\n    }\n    return userName;\n}\n\n\n@Override\npublic void onCreate(SQLiteDatabase db) {\n    // No need to write the create table query.\n    // As we are using Pre built data base.\n    // Which is ReadOnly.\n}\n\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n    // No need to write the update table query.\n    // As we are using Pre built data base.\n    // Which is ReadOnly.\n    // We should not update it as requirements of application.\n}   \n}\n</code></pre>\n\n<p>Hope this will help you...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you already have a database, keep it in your asset folder and copy it in your application. For more detail, see <em><a href=\"http://sspower3.blogspot.in/2011/09/android-database-basic.html\" rel=\"nofollow\">Android database basics</a></em>. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can do this by using a <a href=\"http://developer.android.com/guide/topics/providers/content-providers.html\" rel=\"nofollow\">content provider</a>. Each data item used in the application remains private to the application. If an application want to share data accross applications, there is only technique to achieve this, using a content provider, which provides interface to access that private data.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try out <em><a href=\"http://zaman91.wordpress.com/2010/09/22/android-how-to-use-own-sqlite-database/\" rel=\"nofollow\">Android: How to use own SQLite database</a></em>. This will help you a lot:</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>tl;dr:</strong> \"PECS\" is from the collection's point of view. If you are <em>only</em> pulling items from a generic collection, it is a producer and you should use <code>extends</code>; if you are <em>only</em> stuffing items in, it is a consumer and you should use <code>super</code>. If you do both with the same collection, you shouldn't use either <code>extends</code> or <code>super</code>.</p>\n\n<hr>\n\n<p>Suppose you have a method that takes as its parameter a collection of things, but you want it to be more flexible than just accepting a <code>Collection&lt;Thing&gt;</code>.</p>\n\n<p><strong>Case 1: You want to go through the collection and do things with each item.</strong><br>\nThen the list is a <strong>producer</strong>, so you should use a <code>Collection&lt;? extends Thing&gt;</code>.</p>\n\n<p>The reasoning is that a <code>Collection&lt;? extends Thing&gt;</code> could hold any subtype of <code>Thing</code>, and thus each element will behave as a <code>Thing</code> when you perform your operation. (You actually cannot add anything to a <code>Collection&lt;? extends Thing&gt;</code>, because you cannot know at runtime which <em>specific</em> subtype of <code>Thing</code> the collection holds.)</p>\n\n<p><strong>Case 2: You want to add things to the collection.</strong><br>\nThen the list is a <strong>consumer</strong>, so you should use a <code>Collection&lt;? super Thing&gt;</code>.</p>\n\n<p>The reasoning here is that unlike <code>Collection&lt;? extends Thing&gt;</code>, <code>Collection&lt;? super Thing&gt;</code> can always hold a <code>Thing</code> no matter what the actual parameterized type is. Here you don't care what is already in the list as long as it will allow a <code>Thing</code> to be added; this is what <code>? super Thing</code> guarantees.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The principles behind this in Computer Science is named after </p>\n\n<ul>\n<li>Covariance - ? extends MyClass, </li>\n<li>Contravariance - ? super MyClass and </li>\n<li>Invariance/non-Variance - MyClass </li>\n</ul>\n\n<p>The picture below should explain the concept.</p>\n\n<p>Picture courtesy : <a href=\"http://stackoverflow.com/users/2707792/andrey-tyukin\">Andrey Tyukin</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/KjDLw.png\" alt=\"Covariance vs Contravariance\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>PECS (short for \"<strong>Producer <code>extends</code> and Consumer <code>super</code></strong>\") can be explained by : <strong>Get and Put Principle</strong></p>\n\n<h2>Get And Put Principle (From Java Generics and Collections)</h2>\n\n<p>It states,</p>\n\n<ol>\n<li>use an <strong>extends wildcard</strong> when you only <strong>get</strong> values out of a structure</li>\n<li>use a <strong>super wildcard</strong> when you only <strong>put</strong> values into a structure</li>\n<li>and <strong>don\u2019t use a wildcard</strong> when you <strong>both get and put</strong>.</li>\n</ol>\n\n<h2>Let's understand it by example:</h2>\n\n<p><strong>1. For Extends Wildcard(get values i.e Producer <code>extends</code>)</strong></p>\n\n<p>Here is a method, that takes a collection of numbers, converts each to a <code>double</code>, and sums them up</p>\n\n<pre><code>public static double sum(Collection&lt;? extends Number&gt; nums) {\n   double s = 0.0;\n   for (Number num : nums) \n      s += num.doubleValue();\n   return s;\n}\n</code></pre>\n\n<p><em>Let's call the method :</em></p>\n\n<pre><code>List&lt;Integer&gt;ints = Arrays.asList(1,2,3);\nassert sum(ints) == 6.0;\nList&lt;Double&gt;doubles = Arrays.asList(2.78,3.14);\nassert sum(doubles) == 5.92;\nList&lt;Number&gt;nums = Arrays.&lt;Number&gt;asList(1,2,2.78,3.14);\nassert sum(nums) == 8.92;\n</code></pre>\n\n<p>Since, <strong><code>sum()</code> method uses <code>extends</code></strong>, all of the following calls are legal.\nThe first two calls would not be legal if extends was not used.</p>\n\n<p><strong><em>EXCEPTION</em></strong> : You <strong>cannot put  anything</strong>  into  a  type  declared  with  an <strong><code>extends</code></strong> wildcard\u2014except  for  the  value <code>null</code>, which belongs to every reference type:</p>\n\n<pre><code>List&lt;Integer&gt; ints = new ArrayList&lt;Integer&gt;();\nints.add(1);\nints.add(2);\nList&lt;? extends Number&gt; nums = ints;\nnums.add(null);  // ok\nassert nums.toString().equals(\"[1, 2, null]\");\n</code></pre>\n\n<p><strong>2. For Super Wildcard(put values i.e Consumer <code>super</code>)</strong></p>\n\n<p>Here is a method, that takes a collection of numbers and an <code>int n</code>, and puts the first <code>n</code> integers, starting from zero, into the collection:</p>\n\n<pre><code>public static void count(Collection&lt;? super Integer&gt; ints, int n) {\n    for (int i = 0; i &lt; n; i++) ints.add(i);\n}\n</code></pre>\n\n<p><em>Let's call the method :</em></p>\n\n<pre><code>List&lt;Integer&gt;ints = new ArrayList&lt;Integer&gt;();\ncount(ints, 5);\nassert ints.toString().equals(\"[0, 1, 2, 3, 4]\");\nList&lt;Number&gt;nums = new ArrayList&lt;Number&gt;();\ncount(nums, 5); nums.add(5.0);\nassert nums.toString().equals(\"[0, 1, 2, 3, 4, 5.0]\");\nList&lt;Object&gt;objs = new ArrayList&lt;Object&gt;();\ncount(objs, 5); objs.add(\"five\");\nassert objs.toString().equals(\"[0, 1, 2, 3, 4, five]\");\n</code></pre>\n\n<p>Since, <strong><code>count()</code> method uses <code>super</code></strong>, all of the following calls are legal:\nThe last two calls would not be legal if super was not used.</p>\n\n<p><strong><em>EXCEPTION</em></strong> : you <strong>cannot get anything</strong> out from a type declared with a <strong><code>super</code></strong> wildcard\u2014except for a value of type <code>Object</code>, which is a supertype of every reference type:</p>\n\n<pre><code>List&lt;Object&gt; objs = Arrays.&lt;Object&gt;asList(1,\"two\");\nList&lt;? super Integer&gt; ints = objs;\nString str = \"\";\nfor (Object obj : ints) str += obj.toString();\nassert str.equals(\"1two\");\n</code></pre>\n\n<p><strong>3. When both Get and Put, don't Use wildcard</strong></p>\n\n<p>Whenever you <strong>both put</strong> values into <strong>and get</strong> values out of the same structure, you <strong>should not use a wildcard</strong>.</p>\n\n<pre><code>public static double sumCount(Collection&lt;Number&gt; nums, int n) {\n   count(nums, n);\n   return sum(nums);\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>public class Test {\n\n    public class A {}\n\n    public class B extends A {}\n\n    public class C extends B {}\n\n    public void testCoVariance(List&lt;? extends B&gt; myBlist) {\n        B b = new B();\n        C c = new C();\n        myBlist.add(b); // does not compile\n        myBlist.add(c); // does not compile\n        A a = myBlist.get(0); \n    }\n\n    public void testContraVariance(List&lt;? super B&gt; myBlist) {\n        B b = new B();\n        C c = new C();\n        myBlist.add(b);\n        myBlist.add(c);\n        A a = myBlist.get(0); // does not compile\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>See my answer to another question <a href=\"http://stackoverflow.com/questions/2248390/java-generics-collections-max-signature-and-comparator/2248503#2248503\">here</a>. I think it answers your question pretty well. Note that generally you should only be using <code>? extends T</code> and <code>? super T</code> for the parameters of some method. Methods should just use <code>T</code> as the type parameter on a generic return type.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In nutshell easy to remember PECS </p>\n\n<ol>\n<li>Use the <code>&lt;? extends T&gt;</code> wildcard if you need to retrieve object of\ntype <code>T</code> from a collection.</li>\n<li>Use the <code>&lt;? super T&gt;</code> wildcard if you need to put objects of type <code>T</code> in\na collection.</li>\n<li>If you need to satisfy both things, well, don\u2019t use any wildcard. As\nsimple as it is.</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>PECS(Producer <code>extends</code> and Consumer <code>super</code>) principle=&gt; Get and Put principle</p>\n</blockquote>\n\n<p>In plain core java without generics:</p>\n\n<pre><code>class Super{\n      void testCoVariance(String parameter){}\n      Object testContraVariance(){ return null;}\n}\nclass Sub extends Super{\n\n  @Override\n  void testCoVariance(Object parameter){} //Note:java doesn't support eventhough String is subtype of Object\n\n  @Override\n  Object testContraVariance(){ return null;}//compiles successfully because return type is don't care \n}\n</code></pre>\n\n<p>This is possible for Generics using <strong><a href=\"http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html#FAQ101\" rel=\"nofollow\">wildcards</a></strong>:   </p>\n\n<p>A wildcard describes a family of types.  There are 3 different flavours of wildcards:   </p>\n\n<ul>\n<li><code>?</code> or <code>? extends Object</code>  - the <strong>unbounded</strong> wildcard. It stands for the family of  all types.</li>\n<li><code>? extends Type</code>  - a wildcard with an <strong>upper bound</strong>. It stands for the family of all types that are subtypes of  <code>Type</code> , type  <code>Type</code> being included.</li>\n<li><code>? super Type</code>  - a wildcard with a <strong>lower bound</strong>. It stands for the family of all types that are supertypes of  <code>Type</code> , type  <code>Type</code> being included.</li>\n</ul>\n\n<p><a href=\"http://i.stack.imgur.com/AP12m.jpg\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/AP12m.jpg\" alt=\"enter image description here\"></a>  </p>\n\n<pre><code>import java.util.List;\n\nclass Shape {\n    void draw() {\n    }\n}\n\nclass Circle extends Shape {\n    void draw() {\n    }\n}\n\nclass Square extends Shape {\n    void draw() {\n    }\n}\n\nclass Rectangle extends Shape {\n    void draw() {\n    }\n}\n\n\n\npublic class TestContraVariance {\n /*\n   * Example for an upper bound wildcard\n   * We can not safely add, because we may have  `List&lt;Circle&gt;`, `List&lt;Square&gt;`and List&lt;Rectangle&gt;.  \n   * \n   * */  \n\n     public void testCoVariance(List&lt;? extends Shape&gt; list) {\n         list.add(new Shape()); // does not compile\n         list.add(new Circle()); // does not compile\n         list.add(new Square()); // does not compile\n         list.add(new Rectangle()); // does not compile\n         Shape shape= list.get(0);//compiles\n        }\n      /* \n * Example for  a lower bound wildcard \n * We can not safely get, because we may have  `List&lt;Circle&gt;`, `List&lt;Square&gt;`and List&lt;Rectangle&gt;.\n * */\n     public void testContraVariance(List&lt;? super Shape&gt; list) {\n            list.add(new Shape());//compiles\n            list.add(new Circle());//compiles\n            list.add(new Square());//compiles\n            list.add(new Rectangle());//compiles\n            Shape shape= list.get(0); // does not compile\n        }\n\n\n}\n</code></pre>\n\n<p><a href=\"http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html\" rel=\"nofollow\">Angelika Langer is best to learn generics</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Some options: </p>\n\n<h3><a href=\"http://csdl.ics.hawaii.edu/~johnson/613f99/modules/04/jar-files.html\">Executable Jar File</a></h3>\n\n<p>See also <a href=\"http://www.cs.princeton.edu/introcs/85application/jar/jar.html\">Distributing your Application as an executable JAR file</a> and the <a href=\"http://docs.oracle.com/javase/tutorial/deployment/jar/index.html\">Oracle docs</a> on how to create a jar file that can be executed with a double-click on Windows.</p>\n\n<h3><a href=\"http://jsmooth.sourceforge.net/\">JSmooth</a></h3>\n\n<p><em>(EDIT: Last release was in 2007)</em></p>\n\n<p>JSmooth is a Java Executable Wrapper. It creates native Windows launchers (standard .exe) for your java applications. It makes java deployment much smoother and user-friendly, as it is able to find any installed Java VM by itself.</p>\n\n<h3><a href=\"http://www.duckware.com/jexepack/index.html\">JexePack</a></h3>\n\n<p><em>(EDIT: Shareware: Last updated in 2012)</em></p>\n\n<p>JexePack is a command line tool (great for automated scripting) that allows you to package your Java application (class files), optionally along with its resources (like GIF/JPG/TXT/etc), into a single compressed 32-bit Windows EXE, which runs using Sun's Java Runtime Environment. Both console and windowed applications are supported.</p>\n\n<h3><a href=\"http://www.zerog.com/iamanual/usermanual_ia55/WebHelp/launchanywhere/abo12e.htm\">LaunchAnywhere</a></h3>\n\n<p><em>(EDIT: Commercial with Free Trial, Last version is from 2012)</em></p>\n\n<p>A LAX Executable is an executable file that is used to launch a Java application on any LaunchAnywhere-compatible platform. Currently, InstallAnywhere creates LaunchAnywheres on Windows 95/98/NT/2000/Me, Solaris, Linux, and Mac OS X. LaunchAnywhere enables end-users to double-click on an icon (Windows or Mac OS X) or type a single command (UNIX) to start a Java application.</p>\n\n<p>See also for reference <a href=\"http://www.excelsior-usa.com/articles/java-to-exe.html\">Convert Java to EXE: Why, When, When Not and How</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://launch4j.sourceforge.net/\"><strong>Launch4j</strong></a></p>\n\n<p><em>Launch4j is a cross-platform tool for wrapping Java applications distributed as jars in lightweight Windows native executables. The executable can be configured to search for a certain JRE version or use a bundled one, and it's possible to set runtime options, like the initial/max heap size. The wrapper also provides better user experience through an application icon, a native pre-JRE splash screen, a custom process name, and a Java download page in case the appropriate JRE cannot be found.</em> </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://gcc.gnu.org/java/\">GCJ: The GNU Compiler for Java</a> can compile Java source code into native machine code, including Windows executables.</p>\n\n<p>Although not everything in Java is supported under GCJ, especially the GUI components (see \n<a href=\"http://gcc.gnu.org/java/faq.html#2_1\">What Java API's are supported? How complete is the support?</a> question from the <a href=\"http://gcc.gnu.org/java/faq.html\">FAQ</a>). I haven't used GCJ much, but from the limited testing I've done with console applications, it seems fine.</p>\n\n<p>One downside of using GCJ to create an standalone executable is that the size of the resulting EXE can be quite large. One time I compiled a trivial console application in GCJ and the result was an executable about 1 MB. (There may be ways around this that I am not aware of. Another option would be executable compression programs.)</p>\n\n<p>In terms of open-source installers, the <a href=\"http://nsis.sourceforge.net/Main_Page\">Nullsoft Scriptable Install System</a> is a scriptable installer. If you're curious, there are <a href=\"http://nsis.sourceforge.net/Category:Code_Examples\">user contributed examples</a> on how to detect the presence of a JRE and install it automatically if the required JRE is not installed. (Just to let you know, I haven't used NSIS before.)</p>\n\n<p>For more information on using NSIS for installing Java applications, please take a look at <a href=\"http://stackoverflow.com/questions/80105/whats-the-best-way-to-distribute-java-applications#101628\">my response</a> for the question \"<a href=\"http://stackoverflow.com/questions/80105/whats-the-best-way-to-distribute-java-applications#101628\">What's the best way to distribute Java applications?</a>\"</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The latest <a href=\"http://stackoverflow.com/tags/java-web-start/info\">Java Web Start</a> has been enhanced to allow good offline operation as well as allowing \"local installation\".  It is worth looking into.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>We're using <a href=\"http://www.ej-technologies.com/products/install4j/overview.html\">Install4J</a> to build installers for windows or unix environments.</p>\n\n<p>It's easily customizable up to the point where you want to write scripts for special actions that cannot be done with standard dialogues. But even though we're setting up windows services with it, we're only using standard components.</p>\n\n<ul>\n<li>installer + launcher</li>\n<li>windows or unix</li>\n<li>scriptable in Java</li>\n<li>ant task</li>\n<li>lots of customizable standard panels and actions</li>\n<li>optionally includes or downloads a JRE</li>\n<li>can also launch windows services</li>\n<li>multiple languages</li>\n</ul>\n\n<p>I think Launch4J is from the same company (just the launcher - no installer).</p>\n\n<p>PS: sadly i'm not getting paid for this endorsement. I just like that tool.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can try many of the java wrappers out there like JSmooth, JWrapper, and other utilities but you can also make a .bat with the following code:<br>\n<code>start javaw -jar JarFile.jar</code><br>\nand convert the bat to an exe using any .bat to .exe converter.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>IMHO <strong>JSmooth</strong> seems to do a pretty good job: <a href=\"http://jsmooth.sourceforge.net/\">http://jsmooth.sourceforge.net/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you need to convert your entire application to native code, i.e. an EXE plus DLLs, there is <a href=\"http://www.excelsior-usa.com/jet.html\">ExcelsiorJET</a>. I found it works well and provided an alternative to bundling a JRE.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alternatively, you can use some java-to-c translator (e.g., <a href=\"http://www.ivmaisoft.com/jcgo/\" rel=\"nofollow\">JCGO</a>) and compile the generated C files to a native binary (.exe) file for the target platform.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I would say launch4j is the best tool for converting a java source code(.java) to .exe file\nYou can even bundle a jre with it for distribution and the exe can even be iconified.\nAlthough the size of application increases, it makes sure that the application will work perfectly even if the user does not have a jre installed. It also makes sure that you are able to provide the specific jre required for your app without the user having to install it separately.\nBut unfortunately, java loses its importance. Its multi platform support is totally ignored and the final app is only supported for windows. But that is not a big deal, if you are catering only to windows users.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I can be forgiven for being against converting a java program to a .exe Application and I have My reasons. the Major one being that a java program can be compiled to a jar file from A lot of IDE's. When the program is in .jar format, it can run in Multiple Platforms as opposed to .exe which would run Only in very limited Environment. I am for the Idea that Java Programs shoudl not be converted to Exe unless it is very neccesary. One can always write .bat files that runs the Java program while it is a jar file.</p>\n\n<p>if it is really neccesary to convert it to exe, Jar2Exe converter silently does that and one can also attach Libraries that are compiled together with the Main Application.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://www.regexlab.com/en/jar2exe/\" rel=\"nofollow\">http://www.regexlab.com/en/jar2exe/</a>. You can convert jar to exe using jar2exe. However you need to purchase the software. If you need a open source software i would suggest JSmooth.\n<a href=\"http://jsmooth.sourceforge.net/\" rel=\"nofollow\">http://jsmooth.sourceforge.net/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <a href=\"http://sourceforge.net/projects/janel/\" rel=\"nofollow\">Janel</a>. This last works as an application launcher or service launcher (available from 4.x).</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The tutorial is probably outdated, attempting to create an activity-based UI instead of the fragment-based UI preferred by wizard-generated code.</p>\n\n<p>The view is in the fragment layout (<code>fragment_main.xml</code>)  and not in the activity layout (<code>activity_main.xml</code>). <code>onCreate()</code> is too early in the lifecycle to find it in the activity view hierarchy, and a <code>null</code> is returned. Invoking a method on <code>null</code> causes the NPE.</p>\n\n<p>The preferred solution is to move the code to the fragment <code>onCreateView()</code>, calling <code>findViewById()</code> on the inflated fragment layout <code>rootView</code>:</p>\n\n<pre><code>@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n    Bundle savedInstanceState) {\n  View rootView = inflater.inflate(R.layout.fragment_main, container,\n      false);\n\n  View something = rootView.findViewById(R.id.something); // not activity findViewById()\n  something.setOnClickListener(new View.OnClickListener() { ... });\n\n  return rootView;\n}\n</code></pre>\n\n<p>As a side note, the fragment layout will eventually be a part of the activity view hierarchy and discoverable with activity <code>findViewById()</code> but only after the fragment transaction has been run. Pending fragment transactions get executed in <code>super.onStart()</code> after <code>onCreate()</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try <strong><code>OnStart()</code></strong> method and just use </p>\n\n<pre><code>View view = getView().findViewById(R.id.something);\n</code></pre>\n\n<p>or Declare any View using <code>getView().findViewById</code> method in <strong><code>onStart()</code></strong> </p>\n\n<p>Declare click listener on view by <code>anyView.setOnClickListener(this);</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Agreed, this is a typical error because people often don't really understand how Fragments work when they begin working on Android development. To alleviate confusion, I created a simple example code that I originally posted on <a href=\"http://stackoverflow.com/questions/24526296/application-is-stopped-in-android-emulator/24527201#24527201\">Application is stopped in android emulator</a> , but I posted it here as well.</p>\n\n<p>An example is the following:</p>\n\n<pre><code>public class ContainerActivity extends FragmentActivity implements ExampleFragment.Callback\n{\n    @Override\n    public void onCreate(Bundle saveInstanceState)\n    {\n        super.onCreate(saveInstanceState);\n        this.setContentView(R.layout.activity_container);\n        if (saveInstanceState == null)\n        {               \n             getSupportFragmentManager().beginTransaction()\n                .add(R.id.activity_container_container, new ExampleFragment())\n                .addToBackStack(null)\n             .commit();\n        }\n        getSupportFragmentManager().addOnBackStackChangedListener(new OnBackStackChangedListener()\n        {\n            public void onBackStackChanged()\n            {\n                int backCount = getSupportFragmentManager().getBackStackEntryCount();\n                if (backCount == 0)\n                {\n                    finish();\n                }\n            }\n        });\n    }\n\n    @Override\n    public void exampleFragmentCallback()\n    {\n        Toast.makeText(this, \"Hello!\", Toast.LENGTH_LONG).show();\n    }\n}\n</code></pre>\n\n<p>activity_container.xml:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\" &gt;\n\n    &lt;FrameLayout\n        android:id=\"@+id/activity_container_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /&gt;\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n\n<p>ExampleFragment:</p>\n\n<pre><code>public class ExampleFragment extends Fragment implements View.OnClickListener\n{\n    public static interface Callback\n    {\n        void exampleFragmentCallback();\n    }\n\n    private Button btnOne;\n    private Button btnTwo;\n    private Button btnThree;\n\n    private Callback callback;\n\n    @Override\n    public void onAttach(Activity activity)\n    {\n        super.onAttach(activity);\n        try\n        {\n            this.callback = (Callback) activity;\n        }\n        catch (ClassCastException e)\n        {\n            Log.e(this.getClass().getSimpleName(), \"Activity must implement Callback interface.\", e);\n            throw e;\n        }\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\n    {\n        View rootView = inflater.inflate(R.layout.fragment_example, container, false);\n\n        btnOne = (Button) rootView.findViewById(R.id.example_button_one);\n        btnTwo = (Button) rootView.findViewById(R.id.example_button_two);\n        btnThree = (Button) rootView.findViewById(R.id.example_button_three);\n\n        btnOne.setOnClickListener(this);\n        btnTwo.setOnClickListener(this);\n        btnThree.setOnClickListener(this);\n        return rootView;\n    }\n\n    @Override\n    public void onClick(View v)\n    {\n        if (btnOne == v)\n        {\n            Toast.makeText(getActivity(), \"One.\", Toast.LENGTH_LONG).show();\n        }\n        else if (btnTwo == v)\n        {\n            Toast.makeText(getActivity(), \"Two.\", Toast.LENGTH_LONG).show();\n        }\n        else if (btnThree == v)\n        {\n            callback.exampleFragmentCallback();\n        }\n    }\n}\n</code></pre>\n\n<p>fragment_example.xml:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" &gt;\n\n        &lt;Button\n            android:id=\"@+id/example_button_one\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentTop=\"true\"\n            android:layout_centerHorizontal=\"true\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"@string/hello\" \n            android:layout_marginLeft=\"20dp\"\n            android:layout_marginRight=\"20dp\"/&gt;\n\n        &lt;Button\n            android:id=\"@+id/example_button_two\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignLeft=\"@+id/example_button_one\"\n            android:layout_alignRight=\"@+id/example_button_one\"\n            android:layout_below=\"@+id/example_button_one\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"@string/hello\" /&gt;\n\n        &lt;Button\n            android:id=\"@+id/example_button_three\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignLeft=\"@+id/example_button_two\"\n            android:layout_alignRight=\"@+id/example_button_two\"\n            android:layout_below=\"@+id/example_button_two\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"@string/hello\" /&gt;\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n\n<p>And that should be a valid example, it shows how you can use an Activity to display a Fragment, and handle events in that Fragment. And also how to communicate with the containing Activity.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since you have declared your View in the <code>fragment_main.xml</code>,move that piece of code where you get the NPE in the <code>onCreateView()</code> method of the fragment.\nThis should solve the issue.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Add the following in your <strong>activity_main.xml</strong></p>\n\n<pre><code>&lt;fragment\n    android:id=\"@+id/myFragment\"\n    android:name=\"packagename.MainActivity$PlaceholderFragment\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\" &gt;\n&lt;/fragment&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>in the posted code above in the question there is a problem :\nyou are using R.layout.activity_main in oncreate method, but the xml files name is \"fragment_main.xml\" , means you are trying to get the view of fragment_main.xml file which is not being shown so it gives null pointer exception. change the code like :</p>\n\n<pre><code>@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.fragment_main);// your xml layout ,where the views are\n\n    View something = findViewById(R.id.something);\n    something.setOnClickListener(new View.OnClickListener() { ... }); // NPE HERE\n\n    if (savedInstanceState == null) {\n        getSupportFragmentManager().beginTransaction()\n                .add(R.id.container, new PlaceholderFragment()).commit();\n    }\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use an enum:</p>\n\n<pre><code>public enum Foo {\n    INSTANCE;\n}\n</code></pre>\n\n<p>Joshua Bloch explained this approach in his <a href=\"http://sites.google.com/site/io/effective-java-reloaded\">Effective Java Reloaded</a> talk at Google I/O 2008: <a href=\"http://www.youtube.com/watch?v=pi_I7oD_uGI#t=28m50s\">link to video</a>. Also see slides 30-32 of his presentation (<a href=\"https://14b1424d-a-62cb3a1a-s-sites.googlegroups.com/site/io/effective-java-reloaded/effective_java_reloaded.pdf?attachauth=ANoY7crKCOet2NEUGW7RV1XfM-Jn4z8YJhs0qJM11OhLRnFW_JbExkJtvJ3UJvTE40dhAciyWcRIeGJ-n3FLGnMOapHShHINh8IY05YViOJoZWzaohMtM-s4HCi5kjREagi8awWtcYD0_6G7GhKr2BndToeqLk5sBhZcQfcYIyAE5A4lGNosDCjODcBAkJn8EuO6572t2wU1LMSEUgjvqcf4I-Fp6VDhDvih_XUEmL9nuVJQynd2DRpxyuNH1SpJspEIdbLw-WWZ&amp;attredirects=0\">effective_java_reloaded.pdf</a>):</p>\n\n<blockquote>\n  <h3>The Right Way to Implement a Serializable Singleton</h3>\n\n<pre><code>public enum Elvis {\n    INSTANCE;\n    private final String[] favoriteSongs =\n        { \"Hound Dog\", \"Heartbreak Hotel\" };\n    public void printFavorites() {\n        System.out.println(Arrays.toString(favoriteSongs));\n    }\n}\n</code></pre>\n</blockquote>\n\n<p><strong>Edit:</strong> An <a href=\"http://www.ddj.com/java/208403883?pgno=3\">online portion of \"Effective Java\"</a> says: </p>\n\n<blockquote>\n  <p>\"This approach is functionally equivalent to the public field approach, except that it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. While this approach has yet to be widely adopted, <strong>a single-element enum type is the best way to implement a singleton</strong>.\"</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Depending on the usage, there are several \"correct\" answers.</p>\n\n<p>Since java5 the best way to do it is to use an enum:</p>\n\n<pre><code>public enum Foo {\n   INSTANCE;\n}\n</code></pre>\n\n<p>Pre java5, the most simple case is:</p>\n\n<pre><code>public final class Foo {\n\n    private static final Foo INSTANCE = new Foo();\n\n    private Foo() {\n        if (INSTANCE != null) {\n            throw new IllegalStateException(\"Already instantiated\");\n        }\n    }\n\n    public static Foo getInstance() {\n        return INSTANCE;\n    }\n}\n</code></pre>\n\n<p>Let's go over the code. First, you want the class to be final. In this case, I've used the <code>final</code> keyword to let the users know it is final. Then you need to make the constructor private to prevent users to create their own Foo. Throwing an exception from the constructor prevents users to use reflection to create a second Foo. Then you create a <code>private static final Foo</code> field to hold the only instance, and a <code>public static Foo getInstance()</code> method to return it. The Java specification makes sure that the constructor is only called when the class is first used.</p>\n\n<p>When you have a very large object or heavy construction code AND also have other accessible static methods or fields that might be used before an instance is needed, then and only then you need to use lazy initialization.</p>\n\n<p>You can use a <code>private static class</code> to load the instance. The code would then look like:</p>\n\n<pre><code>public final class Foo {\n\n    private static class FooLoader {\n        private static final Foo INSTANCE = new Foo();\n    }\n\n    private Foo() {\n        if (FooLoader.INSTANCE != null) {\n            throw new IllegalStateException(\"Already instantiated\");\n        }\n    }\n\n    public static Foo getInstance() {\n        return FooLoader.INSTANCE;\n    }\n}\n</code></pre>\n\n<p>Since the line <code>private static final Foo INSTANCE = new Foo();</code> is only executed when the class FooLoader is actually used, this takes care of the lazy instantiation, and is it guaranteed to be thread safe.</p>\n\n<p>When you also want to be able to serialize your object you need to make sure that deserialization won't create a copy.</p>\n\n<pre><code>public final class Foo implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private static class FooLoader {\n        private static final Foo INSTANCE = new Foo();\n    }\n\n    private Foo() {\n        if (FooLoader.INSTANCE != null) {\n            throw new IllegalStateException(\"Already instantiated\");\n        }\n    }\n\n    public static Foo getInstance() {\n        return FooLoader.INSTANCE;\n    }\n\n    @SuppressWarnings(\"unused\")\n    private Foo readResolve() {\n        return FooLoader.INSTANCE;\n    }\n}\n</code></pre>\n\n<p>The method <code>readResolve()</code> will make sure the only instance will be returned, even when the object was serialized in a previous run of your program.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The solution posted by Stu Thompson is valid in Java5.0 and later. But I would prefer not to use it because I think it is error prone.</p>\n\n<p>It's easy to forget the volatile statement and difficult to understand why it is necessary. Without the volatile this code would not be thread safe anymore due to the double-checked locking antipattern. See more about this in paragraph 16.2.4 of <a href=\"http://jcip.net/\">Java Concurrency in Practice</a>. In short: This pattern (prior to Java5.0 or without the volatile statement) could return a reference to the Bar object that is (still) in an incorrect state.</p>\n\n<p>This pattern was invented for performance optimization. But this is really not a real concern anymore. The following lazy initialization code is fast and -more importantly- easier to read.</p>\n\n<pre><code>class Bar {\n    private static class BarHolder {\n        public static Bar bar = new Bar();\n    }\n\n    public static Bar getBar() {\n        return BarHolder.bar;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Thread safe in Java 5+:</p>\n\n<pre><code>class Foo {\n    private static volatile Bar bar = null;\n    public static Bar getBar() {\n        if (bar == null) {\n            synchronized(Foo.class) {\n                if (bar == null)\n                    bar = new Bar(); \n            }\n        }\n        return bar;\n    }\n}\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT</strong>: Pay attention to the <code>volatile</code> modifier here.  :)  It is important because without it, other threads are not guaranteed by the JMM (Java Memory Model) to see changes to its value.  The synchronization <em>does not</em> take care of that--it only serializes access to that block of code.</p>\n\n<p><strong>EDIT 2</strong>: \n@Bno 's answer details the approach recommended by Bill Pugh (FindBugs) and is arguable better.  Go read and vote up his answer too.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Forget <a href=\"https://en.wikipedia.org/wiki/Lazy_initialization\">lazy initialization</a>, it's too problematic. This is the simplest solution:</p>\n\n<pre><code>public class A {    \n\n    private static final A INSTANCE = new A();\n\n    private A() {}\n\n    public static A getInstance() {\n        return INSTANCE;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Disclaimer:</strong> I have just summarized all of the awesome answers and wrote it in my words.</p>\n\n<hr>\n\n<p>While implementing Singleton we have 2 options<br>\n1. Lazy loading<br>\n2. Early loading</p>\n\n<p>Lazy loading adds bit overhead(lots of to be honest) so use it only when you have a very large object or heavy construction code AND also have other accessible static methods or fields that might be used before an instance is needed, then and only then you need to use lazy initialization.Otherwise choosing early loading is a good choice.</p>\n\n<p>Most simple way of implementing Singleton is </p>\n\n<pre><code>public class Foo {\n\n    // It will be our sole hero\n    private static final Foo INSTANCE = new Foo();\n\n    private Foo() {\n        if (INSTANCE != null) {\n            // SHOUT\n            throw new IllegalStateException(\"Already instantiated\");\n        }\n    }\n\n    public static Foo getInstance() {\n        return INSTANCE;\n    }\n}\n</code></pre>\n\n<p>Everything is good except its early loaded singleton. Lets try lazy loaded singleton</p>\n\n<pre><code>class Foo {\n\n    // Our now_null_but_going_to_be sole hero \n    private static Foo INSTANCE = null;\n\n    private Foo() {\n        if (INSTANCE != null) {\n            // SHOUT  \n            throw new IllegalStateException(\"Already instantiated\");\n        }\n    }\n\n    public static Foo getInstance() {\n        // Creating only  when required.\n        if (INSTANCE == null) {\n            INSTANCE = new Foo();\n        }\n        return INSTANCE;\n    }\n}\n</code></pre>\n\n<p>So far so good but our hero will not survive while fighting alone with multiple evil threads who want many many instance of our hero.\nSo lets protect it from evil multi threading</p>\n\n<pre><code>class Foo {\n\n    private static Foo INSTANCE = null;\n\n    // TODO Add private shouting constructor\n\n    public static Foo getInstance() {\n        // No more tension of threads\n        synchronized (Foo.class) {\n            if (INSTANCE == null) {\n                INSTANCE = new Foo();\n            }\n        }\n        return INSTANCE;\n    }\n}\n</code></pre>\n\n<p>but it is not enough to protect out hero, Really!!! This is the best we can/should do to help our hero  </p>\n\n<pre><code>class Foo {\n\n    // Pay attention to volatile\n    private static volatile Foo INSTANCE = null;\n\n    // TODO Add private shouting constructor\n\n    public static Foo getInstance() {\n        if (INSTANCE == null) { // Check 1\n            synchronized (Foo.class) {\n                if (INSTANCE == null) { // Check 2\n                    INSTANCE = new Foo();\n                }\n            }\n        }\n        return INSTANCE;\n    }\n}\n</code></pre>\n\n<p>This is called \"Double-Checked Locking idiom\". It's easy to forget the volatile statement and difficult to understand why it is necessary.<br>\nFor details :  <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p>\n\n<p>Now we are sure about evil thread but what about the cruel serialization? We have to make sure even while de-serialiaztion no new object is created</p>\n\n<pre><code>class Foo implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    private static volatile Foo INSTANCE = null;\n\n    // Rest of the things are same as above\n\n    // No more fear of serialization\n    @SuppressWarnings(\"unused\")\n    private Foo readResolve() {\n        return INSTANCE;\n    }\n}\n</code></pre>\n\n<p>The method <code>readResolve()</code> will make sure the only instance will be returned, even when the object was serialized in a previous run of our program.</p>\n\n<p>Finally we have added enough protection  against threads and serialization but our code is looking bulky and ugly. Lets give our hero a make over</p>\n\n<pre><code>public final class Foo implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    // Wrapped in a inner static class so that loaded only when required\n    private static class FooLoader {\n\n        // And no more fear of threads\n        private static final Foo INSTANCE = new Foo();\n    }\n\n    // TODO add private shouting construcor\n\n    public static Foo getInstance() {\n        return FooLoader.INSTANCE;\n    }\n\n    // Damn you serialization\n    @SuppressWarnings(\"unused\")\n    private Foo readResolve() {\n        return FooLoader.INSTANCE;\n    }\n}\n</code></pre>\n\n<p>Yes this is our very same hero :)<br>\nSince the line <code>private static final Foo INSTANCE = new Foo();</code> is only executed when the class <code>FooLoader</code> is actually used, this takes care of the lazy instantiation, </p>\n\n<p>and is it guaranteed to be thread safe.</p>\n\n<p>And we have came so far, here is the best way to achieve everything we did is best possible way </p>\n\n<pre><code> public enum Foo {\n       INSTANCE;\n   }\n</code></pre>\n\n<p>Which internally will be treated like  </p>\n\n<pre><code>public class Foo {\n\n    // It will be our sole hero\n    private static final Foo INSTANCE = new Foo();\n}\n</code></pre>\n\n<p>That's it no more fear of serialization, threads and ugly code. Also <a href=\"http://stackoverflow.com/questions/16771373/singleton-via-enum-way-is-lazy-initialized\"><strong>ENUMS singleton are lazily initialized</strong></a>. </p>\n\n<blockquote>\n  <p>This approach is functionally equivalent to the public field approach,\n  except that it is more concise, provides the serialization machinery\n  for free, and provides an  ironclad guarantee against multiple\n  instantiation, even in the face of sophisticated serialization or\n  reflection attacks. While this approach has yet to be widely  adopted,\n  a single-element enum type is the best way to implement a singleton.</p>\n</blockquote>\n\n<p>-Joshua Bloch in \"Effective Java\"      </p>\n\n<p>Now you might have realized why ENUMS are considered as best way to implement Singleton and thanks for your patience :)<br>\nUpdated it on my <a href=\"http://ajinkyaparakh.blogspot.in/2013/05/implementing-singleton-in-java.html\"><strong>blog</strong></a>. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Make sure that you really need it. Do a google for \"singleton anti-pattern\" to see some arguments against it. There's nothing inherently wrong with it I suppose but it's just a mechanism for exposing some global resource/data so make sure that this is the best way. In particular I've found dependency injection more useful particularly if you are also using unit tests because DI allows you to use mocked resources for testing purposes.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Don't forget the Singleton is only a Singleton for the Classloader that loaded it. If you are using multiple loaders (Containers) each COULD have its own version of the Singleton.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm mystified by some of the answers that suggest DI as an alternative to using singletons; these are unrelated concepts. You can use DI to inject either singleton or non-singleton (e.g. per-thread) instances. At least this is true if you use Spring 2.x, I can't speak for other DI frameworks.</p>\n\n<p>So my answer to the OP would be (in all but the most trivial sample code) to:</p>\n\n<ol>\n<li>Use a DI framework like Spring, then</li>\n<li>Make it part of your DI configuration whether your dependencies are singletons, request scoped, session scoped, or whatever.</li>\n</ol>\n\n<p>This approach gives you a nice decoupled (and therefore flexible and testable) architecture where whether to use a singleton is an easily reversible implementation detail (provided any singletons you use are threadsafe, of course).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Really consider why you need a singleton before writing it. There is a quasi-religious debate about using them which you can quite easily stumble over if you google singletons in Java.</p>\n\n<p>Personally I try to avoid singletons as often as possible for many reasons, again most of which can be found by googling singletons. I feel that quite often singletons are abused because they're easy to understand by everybody, they're used as a mechanism for getting \"global\" data into an OO design and they are used because it is easy to circumvent object lifecycle management (or really thinking about how you can do A from inside B). Look at things like Inversion of Control (IoC) or Dependency Injection (DI) for a nice middleground.</p>\n\n<p>If you really need one then wikipedia has a good example of a proper implementation of a singleton.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I use the Spring Framework to manage my singletons.  It doesn't enforce the \"singleton-ness\" of the class (which you can't really do anyway if there are multiple class loaders involved) but provides a really easy way to build and configure different factories for creating different types of objects.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Following are 3 different approaches</p>\n\n<p>1) Enum</p>\n\n<pre><code>/**\n* Singleton pattern example using Java Enumj\n*/\npublic enum EasySingleton{\n    INSTANCE;\n}\n</code></pre>\n\n<p>2) Double checked Locking /Lazy loading</p>\n\n<pre><code>/**\n* Singleton pattern example with Double checked Locking\n*/\npublic class DoubleCheckedLockingSingleton{\n     private static volatile DoubleCheckedLockingSingleton INSTANCE;\n\n     private DoubleCheckedLockingSingleton(){}\n\n     public static DoubleCheckedLockingSingleton getInstance(){\n         if(INSTANCE == null){\n            synchronized(DoubleCheckedLockingSingleton.class){\n                //double checking Singleton instance\n                if(INSTANCE == null){\n                    INSTANCE = new DoubleCheckedLockingSingleton();\n                }\n            }\n         }\n         return INSTANCE;\n     }\n}\n</code></pre>\n\n<p>3) Static factory method</p>\n\n<pre><code>/**\n* Singleton pattern example with static factory method\n*/\n\npublic class Singleton{\n    //initailzed during class loading\n    private static final Singleton INSTANCE = new Singleton();\n\n    //to prevent creating another instance of Singleton\n    private Singleton(){}\n\n    public static Singleton getSingleton(){\n        return INSTANCE;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Wikipedia has some <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">examples</a> of singletons, also in Java. The Java 5 implementation looks pretty complete, and is thread-safe (double-checked locking applied).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you do not need lazy loading then simply try</p>\n\n<pre><code>public class Singleton {\n    private final static Singleton INSTANCE = new Singleton();\n\n    private Singleton() {}\n\n    public static Singleton getInstance() { return Singleton.INSTANCE; }\n\n    protected Object clone() {\n        throw new CloneNotSupportedException();\n    }\n}\n</code></pre>\n\n<p>If you want lazy loading and you want your Singleton to be thread-safe, try the double-checking pattern </p>\n\n<pre><code>public class Singleton {\n        private static Singleton instance = null;\n\n        private Singleton() {}\n\n        public static Singleton getInstance() { \n              if(null == instance) {\n                  synchronized(Singleton.class) {\n                      if(null == instance) {\n                          instance = new Singleton();\n                      }\n                  }\n               }\n               return instance;\n        }\n\n        protected Object clone() {\n            throw new CloneNotSupportedException();\n        }\n}\n</code></pre>\n\n<p>As the double checking pattern is not guaranteed to work (due to some issue with compilers, I don't know anything more about that.), you could also try to synchronize the whole getInstance-method or create a registry for all your Singletons. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I would say Enum singleton </p>\n\n<p>Singleton using enum in Java is generally way to declare enum singleton. Enum singleton may contain instance variable and instance method. For simplicity's sake, also note that if you are using any instance method than you need to ensure thread safety of that method if at all it affect the state of object.</p>\n\n<p>The use of an enum is very easy to implement and has no drawbacks regarding serializable objects, which have to be circumvented in the other ways.</p>\n\n<pre><code>/**\n* Singleton pattern example using Java Enum\n*/\npublic enum Singleton {\n        INSTANCE;\n        public void execute (String arg) {\n                //perform operation here\n        }\n}\n</code></pre>\n\n<p>You can access it by <code>Singleton.INSTANCE</code>, much easier than calling <code>getInstance()</code> method on Singleton.</p>\n\n<blockquote>\n  <p>1.12    Serialization of Enum Constants</p>\n  \n  <p>Enum constants are serialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values of the constant are not present in the form. To serialize an enum constant, <code>ObjectOutputStream</code> writes the value returned by the enum constant's name method. To deserialize an enum constant, <code>ObjectInputStream</code> reads the constant name from the stream; the deserialized constant is then obtained by calling the <code>java.lang.Enum.valueOf</code> method, passing the constant's enum type along with the received constant name as arguments. Like other serializable or externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream.</p>\n  \n  <p>The process by which enum constants are serialized cannot be customized: any class-specific <code>writeObject</code>, <code>readObject</code>, <code>readObjectNoData</code>, <code>writeReplace</code>, and <code>readResolve</code> methods defined by enum types are ignored during serialization and deserialization. Similarly, any <code>serialPersistentFields</code> or <code>serialVersionUID</code> field declarations are also ignored--all enum types have a fixed <code>serialVersionUID</code> of <code>0L</code>. Documenting serializable fields and data for enum types is unnecessary, since there is no variation in the type of data sent.</p>\n  \n  <p><a href=\"http://docs.oracle.com/javase/1.5.0/docs/guide/serialization/spec/serial-arch.html#enum\" rel=\"nofollow\">Quoted from Oracle docs</a></p>\n</blockquote>\n\n<p>Another problem with conventional Singletons are that once you implement <code>Serializable</code> interface, they no longer remain Singleton because <code>readObject()</code> method always return a new instance  like constructor in Java. This can be avoided by using <code>readResolve()</code> and discarding newly created instance by replacing with singleton like below </p>\n\n<pre><code> // readResolve to prevent another instance of Singleton\n private Object readResolve(){\n     return INSTANCE;\n }\n</code></pre>\n\n<p>This can become even more complex if your Singleton Class maintain state, as you need to make them transient, but with in Enum Singleton, Serialization is guaranteed by JVM.</p>\n\n<hr>\n\n<p><strong>Good Read</strong></p>\n\n<ol>\n<li><a href=\"http://www.oodesign.com/singleton-pattern.html\" rel=\"nofollow\">Singleton Pattern</a></li>\n<li><a href=\"http://stackoverflow.com/questions/13219678/enums-singletons-and-deserialization\">Enums, Singletons and Deserialization</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/java/library/j-dcl/index.html\" rel=\"nofollow\">Double-checked locking and the Singleton pattern</a></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need <a href=\"http://en.wikipedia.org/wiki/Double-checked_locking\" rel=\"nofollow\">double-checking</a> idiom if you need to load the instance variable of a class lazily. \nIf you need to load a static variable or a singleton lazily, you need <a href=\"http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom\" rel=\"nofollow\">initilization on demand holder</a> idiom. </p>\n\n<p>In addition, if the singleton needs to be seriliazble, all other fields needs to be transient and readResolve() method needs to be implemented in order to maintain the singleton object invariant. Otherwise, each time the object is deserialized, a new instance of the object will be created. What readResolve() does is replace the new object read by readObject(), which forced that new object to be garbage collected as there is no variable referring to it.</p>\n\n<pre><code>public static final INSTANCE == ....\nprivate Object readResolve() {\n  return INSTANCE; // original singleton instance.\n} \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Version 1:</strong></p>\n\n<pre><code>public class MySingleton {\n    private static MySingleton instance = null;\n    private MySingleton() {}\n    public static synchronized MySingleton getInstance() {\n        if(instance == null) {\n            instance = new MySingleton();\n        }\n        return instance;\n    }\n}\n</code></pre>\n\n<p>Lazy loading, thread safe with blocking, low performance because of <code>synchronized</code>.</p>\n\n<p><strong>Version 2:</strong></p>\n\n<pre><code>public class MySingleton {\n    private MySingleton() {}\n    private static class MySingletonHolder {\n        public final static MySingleton instance = new MySingleton();\n    }\n    public static MySingleton getInstance() {\n        return MySingletonHolder.instance;\n    }\n}\n</code></pre>\n\n<p>Lazy loading, thread safe with non-blocking, high performance.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For JSE 5.0 and above take the Enum approach, otherwise use static singleton holder approach ( (a lazy loading approach described by Bill Pugh). Latter solution is also thread-safe without requiring special language constructs (i.e. volatile or synchronized).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>simplest singleton class</p>\n\n<pre><code>public class Singleton {\n  private static Singleton singleInstance = new Singleton();\n  private Singleton() {}\n  public static Singleton getSingleInstance() {\n    return singleInstance;\n  }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I still think after java 1.5, enum is the best available singleton implementation available as it also ensures that even in the multi threaded environments - only one instance is created.</p>\n\n<p><code>public enum Singleton{\n  INSTANCE;\n}</code></p>\n\n<p>and you are done !!!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Various ways to make singleton object:</p>\n\n<ol>\n<li><p>As per Joshua Bloch - Enum would be the best.</p></li>\n<li><p>you can use double check locking also.</p></li>\n<li><p>Even inner static class can be used.</p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Have a look at this post.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries\">Examples of GoF Design Patterns in Java's core libraries</a></p>\n\n<p>From the best answer's \"Singleton\" section,</p>\n\n<blockquote>\n  <h3>Singleton (recognizeable by creational methods returning the same instance (usually of itself) everytime)</h3>\n  \n  <ul>\n  <li>java.lang.Runtime#getRuntime()</li>\n  <li>java.awt.Desktop#getDesktop()</li>\n  <li>java.lang.System#getSecurityManager()</li>\n  </ul>\n</blockquote>\n\n<p>You can also learn the example of Singleton from Java native classes themselves.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While looking for the singleton implementation, i found <a href=\"https://community.oracle.com/docs/DOC-918906\" rel=\"nofollow\">Effective ways to implement and Use singleton pattern</a> oracle document very helpful and also author has explained the use-case of implementing database connection using singleton pattern which makes this document perfect.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Check this blog post for everything you need to know abount singletons in Java:\n<a href=\"http://learnjava.today/2015/08/the-best-singleton-in-java/\" rel=\"nofollow\">http://learnjava.today/2015/08/the-best-singleton-in-java/</a></p>\n\n<p>Enum singleton</p>\n\n<p>The simplest way to implement a Singleton that is thread-safe is using an Enum</p>\n\n<pre><code>public enum SingletonEnum {\n  INSTANCE;\n  public void doSomething(){\n    System.out.println(\"This is a singleton\");\n  }\n}\n</code></pre>\n\n<p>This code works since the introduction of Enum in Java 1.5</p>\n\n<p>Double checked locking</p>\n\n<p>If you want to code a \u201cclassic\u201d singleton that works in a multithreaded environment (starting from Java 1.5) you should use this one.</p>\n\n<pre><code>public class Singleton {\n\n  private static volatile Singleton instance = null;\n\n  private Singleton() {\n  }\n\n  public static Singleton getInstance() {\n    if (instance == null) {\n      synchronized (Singleton.class){\n        if (instance == null) {\n          instance = new Singleton();\n        }\n      }\n    }\n    return instance ;\n  }\n}\n</code></pre>\n\n<p>This is not thread-safe before 1.5 because the implementation of the volatile keyword was different.</p>\n\n<p>Early loading Singleton (works even before Java 1.5)</p>\n\n<p>This implementation instantiates the singleton when the class is loaded and provides thread safety.</p>\n\n<pre><code>public class Singleton {\n\n  private static final Singleton instance = new Singleton();\n\n  private Singleton() {\n  }\n\n  public static Singleton getInstance() {\n    return instance;\n  }\n\n  public void doSomething(){\n    System.out.println(\"This is a singleton\");\n  }\n\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sometimes a simple \"<strong><code>static Foo foo = new Foo();</code></strong>\" is not enough. Just think of some basic data insertion you want to do.</p>\n\n<p>On the other hand you would have to synchronize any method that instantiates the singleton variable as such. Synchronisation is not bad as such, but it can lead to performance issues or locking (in very very rare situations using this example. The solution is</p>\n\n<pre><code>public class Singleton {\n\n    private static Singleton instance = null;\n\n    static {\n          instance = new Singleton();\n          // do some of your instantiation stuff here\n    }\n\n    private Singleton() {\n          if(instance!=null) {\n                  throw new ErrorYouWant(\"Singleton double-instantiation, should never happen!\");\n          }\n    }\n\n    public static getSingleton() {\n          return instance;\n    }\n\n}\n</code></pre>\n\n<p>Now what happens? The class is loaded via the class loader. Directly after the class was interpreted from a byte Array, the VM executes the <strong>static { }</strong> - block. that's the whole secret: The static-block is only called once, the time the given class (name) of the given package is loaded by this one class loader.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>public class Singleton {\n\n    private static final Singleton INSTANCE = new Singleton();\n\n    private Singleton(){\n    if (INSTANCE != null)\n        throw new IllegalStateException (\u201cAlready instantiated...\u201d);\n}\n\n    public synchronized static Singleton getInstance() { \n    return INSTANCE;\n\n    }\n\n}\n</code></pre>\n\n<p>As we have added the Synchronized keyword before getInstance, we have avoided the race condition in the case when two threads call the getInstance at the same time.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Indeed, the keyword is \"ajax\": <em>Asynchronous JavaScript and XML</em>. However, last years it's more than often <em>Asynchronous JavaScript and JSON</em>. Basically, you let JS execute an asynchronous HTTP request and update the HTML DOM tree based on the response data.</p>\n\n<p>Since it's pretty a <a href=\"http://www.w3schools.com/ajax/ajax_aspphp.asp\">tedious</a> work to make it to work across all browsers (especially Internet Explorer versus others), there are plenty of libraries out which simplifies this in single functions, like <a href=\"http://jquery.com\">jQuery</a>, <a href=\"http://www.prototypejs.org/\">Prototype</a>, <a href=\"http://mootools.net/\">Mootools</a>. Since jQuery is the most popular, I'll use it in the below examples.</p>\n\n<h1>Kickoff example returning <code>String</code> as plain text</h1>\n\n<p>Create a <code>/some.jsp</code> like below (note: the code doesn't expect the JSP file being placed in a subfolder):</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;SO question 4112686&lt;/title&gt;\n        &lt;script src=\"http://code.jquery.com/jquery-latest.min.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n            $(document).on(\"click\", \"#somebutton\", function() { // When HTML DOM \"click\" event is invoked on element with ID \"somebutton\", execute the following function...\n                $.get(\"someservlet\", function(responseText) {   // Execute Ajax GET request on URL of \"someservlet\" and execute the following function with Ajax response text...\n                    $(\"#somediv\").text(responseText);           // Locate HTML DOM element with ID \"somediv\" and set its text content with the response text.\n                });\n            });\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button id=\"somebutton\"&gt;press here&lt;/button&gt;\n        &lt;div id=\"somediv\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Create a servlet with a <code>doGet()</code> method which look like this:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String text = \"some text\";\n\n    response.setContentType(\"text/plain\");  // Set content type of the response so that jQuery knows what it can expect.\n    response.setCharacterEncoding(\"UTF-8\"); // You want world domination, huh?\n    response.getWriter().write(text);       // Write response body.\n}\n</code></pre>\n\n<p>Map this servlet on an URL pattern of <code>/someservlet</code> or <code>/someservlet/*</code> as below (obviously, the URL pattern is free to your choice, but you'd need to alter the <code>someservlet</code> URL in JS code examples over all place accordingly):</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@WebServlet(\"/someservlet/*\")\npublic class SomeServlet extends HttpServlet {\n    // ...\n}\n</code></pre>\n\n<p>Or, when you're not on a Servlet 3.0 compatible container yet (Tomcat 7, Glassfish 3, JBoss AS 6, etc or newer), then map it in <code>web.xml</code> the old fashioned way (see also <a href=\"http://stackoverflow.com/tags/servlets/info\">our Servlets wiki page</a>):</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;servlet&gt;\n    &lt;servlet-name&gt;someservlet&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.example.SomeServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;someservlet&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/someservlet/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre>\n\n<p>Now open the <a href=\"http://localhost:8080/context/test.jsp\">http://localhost:8080/context/test.jsp</a> in the browser and press the button. You'll see that the content of the div get updated with the servlet response.</p>\n\n<h1>Returning <code>List&lt;String&gt;</code> as JSON</h1>\n\n<p>With <a href=\"http://www.hunlock.com/blogs/Mastering_JSON_%28_JavaScript_Object_Notation_%29\">JSON</a> instead of plaintext as response format you can even get some steps further. It allows for more dynamics. First, you'd like to have a tool to convert between Java objects and JSON strings. There are plenty of them as well (see the bottom of <a href=\"http://json.org/\">this page</a> for an overview). My personal favourite is <a href=\"http://code.google.com/p/google-gson/\">Google Gson</a>. Download and put its JAR file in <code>/WEB-INF/lib</code> folder of your webapplication. </p>\n\n<p>Here's an example which displays <code>List&lt;String&gt;</code> as <code>&lt;ul&gt;&lt;li&gt;</code>. The servlet:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n    list.add(\"item1\");\n    list.add(\"item2\");\n    list.add(\"item3\");\n    String json = new Gson().toJson(list);\n\n    response.setContentType(\"application/json\");\n    response.setCharacterEncoding(\"UTF-8\");\n    response.getWriter().write(json);\n}\n</code></pre>\n\n<p>The JS code:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(document).on(\"click\", \"#somebutton\", function() {  // When HTML DOM \"click\" event is invoked on element with ID \"somebutton\", execute the following function...\n    $.get(\"someservlet\", function(responseJson) {    // Execute Ajax GET request on URL of \"someservlet\" and execute the following function with Ajax response JSON...\n        var $ul = $(\"&lt;ul&gt;\").appendTo($(\"#somediv\")); // Create HTML &lt;ul&gt; element and append it to HTML DOM element with ID \"somediv\".\n        $.each(responseJson, function(index, item) { // Iterate over the JSON array.\n            $(\"&lt;li&gt;\").text(item).appendTo($ul);      // Create HTML &lt;li&gt; element, set its text content with currently iterated item and append it to the &lt;ul&gt;.\n        });\n    });\n});\n</code></pre>\n\n<p>Do note that jQuery automatically parses the response as JSON and gives you directly a JSON object (<code>responseJson</code>) as function argument when you set the response content type to <code>application/json</code>. If you forget to set it or rely on a default of <code>text/plain</code> or <code>text/html</code>, then the <code>responseJson</code> argument wouldn't give you a JSON object, but a plain vanilla string.</p>\n\n<h1>Returning <code>Map&lt;String, String&gt;</code> as JSON</h1>\n\n<p>Here's another example which displays <code>Map&lt;String, String&gt;</code> as <code>&lt;option&gt;</code>:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    Map&lt;String, String&gt; options = new LinkedHashMap&lt;String, String&gt;();\n    options.put(\"value1\", \"label1\");\n    options.put(\"value2\", \"label2\");\n    options.put(\"value3\", \"label3\");\n    String json = new Gson().toJson(options);\n\n    response.setContentType(\"application/json\");\n    response.setCharacterEncoding(\"UTF-8\");\n    response.getWriter().write(json);\n}\n</code></pre>\n\n<p>And the JSP:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(document).on(\"click\", \"#somebutton\", function() {               // When HTML DOM \"click\" event is invoked on element with ID \"somebutton\", execute the following function...\n    $.get(\"someservlet\", function(responseJson) {                 // Execute Ajax GET request on URL of \"someservlet\" and execute the following function with Ajax response JSON...\n        var $select = $(\"#someselect\");                           // Locate HTML DOM element with ID \"someselect\".\n        $select.find(\"option\").remove();                          // Find all child elements with tag name \"option\" and remove them (just to prevent duplicate options when button is pressed again).\n        $.each(responseJson, function(key, value) {               // Iterate over the JSON object.\n            $(\"&lt;option&gt;\").val(key).text(value).appendTo($select); // Create HTML &lt;option&gt; element, set its value with currently iterated key and its text content with currently iterated item and finally append it to the &lt;select&gt;.\n        });\n    });\n});\n</code></pre>\n\n<p>with </p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;select id=\"someselect\"&gt;&lt;/select&gt;\n</code></pre>\n\n<h1>Returning <code>List&lt;Entity&gt;</code> as JSON</h1>\n\n<p>Here's the last example which displays <code>List&lt;Product&gt;</code> in a <code>&lt;table&gt;</code> where the <code>Product</code> class has the properties <code>Long id</code>, <code>String name</code> and <code>BigDecimal price</code>. The servlet:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Override\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    List&lt;Product&gt; products = someProductService.list();\n    String json = new Gson().toJson(products);\n\n    response.setContentType(\"application/json\");\n    response.setCharacterEncoding(\"UTF-8\");\n    response.getWriter().write(json);\n}\n</code></pre>\n\n<p>The JS code:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(document).on(\"click\", \"#somebutton\", function() {        // When HTML DOM \"click\" event is invoked on element with ID \"somebutton\", execute the following function...\n    $.get(\"someservlet\", function(responseJson) {          // Execute Ajax GET request on URL of \"someservlet\" and execute the following function with Ajax response JSON...\n        var $table = $(\"&lt;table&gt;\").appendTo($(\"#somediv\")); // Create HTML &lt;table&gt; element and append it to HTML DOM element with ID \"somediv\".\n        $.each(responseJson, function(index, product) {    // Iterate over the JSON array.\n            $(\"&lt;tr&gt;\").appendTo($table)                     // Create HTML &lt;tr&gt; element, set its text content with currently iterated item and append it to the &lt;table&gt;.\n                .append($(\"&lt;td&gt;\").text(product.id))        // Create HTML &lt;td&gt; element, set its text content with id of currently iterated product and append it to the &lt;tr&gt;.\n                .append($(\"&lt;td&gt;\").text(product.name))      // Create HTML &lt;td&gt; element, set its text content with name of currently iterated product and append it to the &lt;tr&gt;.\n                .append($(\"&lt;td&gt;\").text(product.price));    // Create HTML &lt;td&gt; element, set its text content with price of currently iterated product and append it to the &lt;tr&gt;.\n        });\n    });\n});\n</code></pre>\n\n<h1>Ajaxifying an existing form</h1>\n\n<p>You can use jQuery <a href=\"https://api.jquery.com/serialize/\"><code>$.serialize()</code></a> to easily ajaxify existing POST forms without fiddling around with collecting and passing the individual form input parameters. Assuming an existing form which works perfectly fine without JavaScript/jQuery:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form id=\"someform\" action=\"someservlet\" method=\"post\"&gt;\n    &lt;input type=\"text\" name=\"foo\" /&gt;\n    &lt;input type=\"text\" name=\"bar\" /&gt;\n    &lt;input type=\"text\" name=\"baz\" /&gt;\n    &lt;input type=\"submit\" name=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>You can ajaxify it as below:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(document).on(\"submit\", \"#someform\", function() {\n    var $form = $(this);\n\n    $.post($form.attr(\"action\"), $form.serialize(), function(responseJson) {\n        // ...\n    });\n});\n</code></pre>\n\n<p>You can in the servlet distinguish between normal requests and ajax requests as below:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>@Override\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String foo = request.getParameter(\"foo\");\n    String bar = request.getParameter(\"bar\");\n    String baz = request.getParameter(\"baz\");\n\n    boolean ajax = \"XMLHttpRequest\".equals(request.getHeader(\"X-Requested-With\"));\n\n    // ...\n\n    if (ajax) {\n        // Handle ajax (JSON) response.\n    } else {\n        // Handle regular (JSP) response.\n    }\n}\n</code></pre>\n\n<p>The <a href=\"http://malsup.com/jquery/form/\">jQuery Form plugin</a> does less or more the same as above jQuery example, but it has additional transparent support for <code>multipart/form-data</code> forms as required by file uploads.</p>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4114742/simple-calculator-in-jsp\">Simple calculator in JSP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1900711/handling-servlet-output-in-ajax\">Handling Servlet output in Ajax</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3028490/calling-a-java-servlet-from-javascript\">Calling Servlet from Javascript</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2263996/populating-child-dropdownlists-in-jsp-servlet\">Populating child dropdowns with JSP/Servlet</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2758873/need-json-results-in-a-table-format\">JSON results in a table</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5952670/is-it-a-good-practice-to-use-asynchronous-requests-in-this-scenario/\">Is it a good practice to use asynchronous requests in this scenario?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2600582/how-to-switch-easily-between-ajax-based-website-and-basic-html-website/\">How to switch easily between ajax-based website and basic HTML website?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/6914152/how-to-upload-files-to-server-using-jsp-servlet-and-ajax\">How to upload files to server using JSP/Servlet and Ajax?</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The right way to update the page currently displayed in the user's browser (without reloading it) is to have some code executing in the browser update the page's DOM.  </p>\n\n<p>That code is typically javascript that is embedded in or linked from the HTML page, hence the AJAX suggestion.  (In fact, if we assume that the updated text comes from the server via an HTTP request, this is classic AJAX.)</p>\n\n<p>It is also possible to implement this kind of thing using some browser plugin or add-on, though it may be tricky for a plugin to reach into the browser's data structures to update the DOM.  (Native code plugins normally write to some graphics frame that is embedded in the page.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>i will show you a whole example of servlet &amp; how do ajax call.</strong>\nere, we are going to create the simple example to create the login form using servlet.\n<br><strong>index.html</strong></p>\n\n<pre><code>&lt;form&gt;  \n   Name:&lt;input type=\"text\" name=\"username\"/&gt;&lt;br/&gt;&lt;br/&gt;  \n   Password:&lt;input type=\"password\" name=\"userpass\"/&gt;&lt;br/&gt;&lt;br/&gt;  \n   &lt;input type=\"button\" value=\"login\"/&gt;  \n&lt;/form&gt;  \n</code></pre>\n\n<p><strong>Here is ajax Sample</strong></p>\n\n<pre><code>       $.ajax\n        ({\n            type: \"POST\",           \n            data: 'LoginServlet='+name+'&amp;name='+type+'&amp;pass='+password,\n            url: url,\n        success:function(content)\n        {\n                $('#center').html(content);           \n            }           \n        });\n</code></pre>\n\n<p><strong>LoginServlet Servlet Code :-</strong></p>\n\n<pre><code>    package abc.servlet;\n\nimport java.io.File;\n\n\npublic class AuthenticationServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException\n    {   \n        doPost(request, response);\n    }\n\n    protected void doPost(HttpServletRequest request,\n            HttpServletResponse response) throws ServletException, IOException {\n\n        try{\n        HttpSession session = request.getSession();\n        String username = request.getParameter(\"name\");\n        String password = request.getParameter(\"pass\");\n\n                /// Your Code\nout.println(\"sucess / failer\")\n        } catch (Exception ex) {\n            // System.err.println(\"Initial SessionFactory creation failed.\");\n            ex.printStackTrace();\n            System.exit(0);\n        } \n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Normally you cant update a page from a servlet. Client (browser) has to request an update. Eiter client loads a whole new page or it requests an update to a part of an existing page. This technique is called Ajax. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>$.ajax({\ntype: \"POST\",\nurl: \"url to hit on servelet\",\ndata:   JSON.stringify(json),\ndataType: \"json\",\nsuccess: function(response){\n    // we have the response\n    if(response.status == \"SUCCESS\"){\n        $('#info').html(\"Info  has been added to the list successfully.&lt;br&gt;\"+\n        \"The  Details are as follws : &lt;br&gt; Name : \");\n\n    }else{\n        $('#info').html(\"Sorry, there is some thing wrong with the data provided.\");\n    }\n},\n error: function(e){\n   alert('Error: ' + e);\n }\n});\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Ajax (also AJAX) an acronym for Asynchronous JavaScript and XML) is a group of interrelated web development techniques used on the client-side to create asynchronous web applications. With Ajax, web applications can send data to, and retrieve data from, a server asynchronously \nBelow is example code:</p>\n\n<p>Jsp page java script function to submit data to servlet with two variable firstName and lastName:</p>\n\n<pre><code>function onChangeSubmitCallWebServiceAJAX()\n    {\n      createXmlHttpRequest();\n      var firstName=document.getElementById(\"firstName\").value;\n      var lastName=document.getElementById(\"lastName\").value;\n      xmlHttp.open(\"GET\",\"/AJAXServletCallSample/AjaxServlet?firstName=\"\n      +firstName+\"&amp;lastName=\"+lastName,true)\n      xmlHttp.onreadystatechange=handleStateChange;\n      xmlHttp.send(null);\n\n    }\n</code></pre>\n\n<p>Servlet to read data send back to jsp in xml format ( You could use text as well. Just you need to change response content to text and render data on javascript function.)</p>\n\n<pre><code>/**\n * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n */\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n    String firstName = request.getParameter(\"firstName\");\n    String lastName = request.getParameter(\"lastName\");\n\n    response.setContentType(\"text/xml\");\n    response.setHeader(\"Cache-Control\", \"no-cache\");\n    response.getWriter().write(\"&lt;details&gt;\");\n    response.getWriter().write(\"&lt;firstName&gt;\"+firstName+\"&lt;/firstName&gt;\");\n    response.getWriter().write(\"&lt;lastName&gt;\"+lastName+\"&lt;/lastName&gt;\");\n    response.getWriter().write(\"&lt;/details&gt;\");\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using bootstrap multi select</p>\n\n<p><strong>Ajax</strong></p>\n\n<pre><code>function() { $.ajax({\n    type : \"get\",\n    url : \"OperatorController\",\n    data : \"input=\" + $('#province').val(),\n    success : function(msg) {\n    var arrayOfObjects = eval(msg); \n    $(\"#operators\").multiselect('dataprovider',\n    arrayOfObjects);\n    // $('#output').append(obj);\n    },\n    dataType : 'text'\n    });}\n}\n</code></pre>\n\n<p><strong>In Servlet</strong></p>\n\n<pre><code>request.getParameter(\"input\")\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You must understand the difference between a class and an instance of that class. If you see a car on the street, you know immediately that it's a car even if you can't see which model or type. This is because you compare what you see with the <em>class</em> \"car\". The class contains which is similar to all cars. Think of it as a template or an idea.</p>\n\n<p>At the same time, the car you see is an instance of the class \"car\" since it has all the properties which you expect: There is someone driving it, it has an engine, wheels.</p>\n\n<p>So the class says \"all cars have a color\" and the instance says \"this specific car is red\".</p>\n\n<p>In the OO world, you define the class and inside the class, you define a field of type <code>Color</code>. When the class is instantiated (when you create a specific instance), memory is reserved for the color and you can give this specific instance a color. Since these attributes are specific, they are non-static.</p>\n\n<p>Static fields and methods are shared with all instances. They are for values which are specific to the class and not a specific instance. For methods, this usually are global helper methods (like <code>Integer.parseInt()</code>). For fields, it's usually constants (like car types, i.e. something where you have a limited set which doesn't change often).</p>\n\n<p>To solve your problem, you need to instantiate an instance (create an object) of your class so the runtime can reserve memory for the instance (otherwise, different instances would overwrite each other which you don't want).</p>\n\n<p>In your case, try this code as a starting block:</p>\n\n<pre><code>public static void main (String[] args)\n{\n    try\n    {\n        MyProgram7 obj = new MyProgram7 ();\n        obj.run (args);\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace ();\n    }\n}\n\n// instance variables here\n\npublic void run (String[] args) throws Exception\n{\n    // put your code here\n}\n</code></pre>\n\n<p>The new <code>main()</code> method creates an instance of the class it contains (sounds strange but since <code>main()</code> is created with the class instead of with the instance, it can do this) and then calls an instance method (<code>run()</code>).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Static fields and methods are connected to the class itself and not its instances. If you have a class A, a 'normal' method b and a static method c and make an instance a of your class, the calls to A.c() and a.b() are valid. Method c() has so no idea, which instance is connected, so it cannot use non-static fields.</p>\n\n<p>The solution for you is, that you make your fields static or make your methods non-static. You main could look like this then:</p>\n\n<pre><code>class Programm {\n  public static void main(String[] args){\n    Programm programm = new Programm();\n    programm.start();\n  }\n  public void start(){\n    // can now access non-static fields\n  }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let's analyze your program first..\nIn your program, your first method is <code>main()</code>, and keep it in mind it is the static method... Then you declare the local variable for that method (compareCount, low, high, etc..). The scope of this variable is only the declared method, regardless of it being a static or non static method. So you can't use those variables outside that method. This is the basic error u made.</p>\n\n<p>Then we come to next point. You told static is killing you. (It may be killing you but it only gives life to your program!!) First you must understand the basic thing.\n*Static method calls only the static method and use only the static variable.\n*Static variable or static method are not dependent on any instance of that class. (i.e. If you change any state of the static variable it will reflect in all objects of the class)\n*Because of this you call it as a class variable or a class method.\nAnd a lot more is there about the \"static\" keyword.\nI hope now you get the idea. First change the scope of the variable and declare it as a static (to be able to use it in static methods).</p>\n\n<p>And the advice for you is: you misunderstood the idea of the scope of the variables and static functionalities. Get clear idea about that.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To be able to access them from your static methods they need to be static member variables, like this:</p>\n\n<pre><code>public class MyProgram7 {\n  static Scanner scan = new Scanner(System.in);\n  static int compareCount = 0;\n  static int low = 0;\n  static int high = 0;\n  static int mid = 0;  \n  static int key = 0;  \n  static Scanner temp;  \n  static int[]list;  \n  static String menu, outputString;  \n  static int option = 1;  \n  static boolean found = false;\n\n  public static void main (String[]args) throws IOException {\n  ...\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The very basic thing is static variables or static methods are at class level. Class level variables or methods gets loaded prior to instance level methods or variables.And obviously the thing which is not loaded can not be used. So java compiler not letting the things to be handled at run time resolves at compile time. That's why it is giving you error non-static things can not be referred from static context. You just need to read about Class Level Scope, Instance Level Scope and Local Scope.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Now you can add/use instances with in the method </p>\n\n<pre><code>public class Myprogram7 {\n\n  Scanner scan;\n  int compareCount = 0;\n  int low = 0;\n  int high = 0;\n  int mid = 0;  \n  int key = 0;  \n  Scanner temp;  \n  int[]list;  \n  String menu, outputString;  \n  int option = 1;  \n  boolean found = false;  \n\n  private void readLine() {\n\n  }\n\n  private void findkey() {\n\n  }\n\n  private void printCount() {\n\n  }\n  public static void main(String[] args){\n\n    Myprogram7 myprg=new Myprogram7();\n    myprg.readLine();\n    myprg.findkey();\n    myprg.printCount();\n  }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I will try to explain the static thing to you. First of all static variables do not belong to any particular instance of the class. They are recognized with the name of the class. Static methods again do not belong again to any particular instance. They can access only static variables. Imagine you call MyClass.myMethod() and myMethod is a static method. If you use non-static variables inside the method, how the hell on earth would it know which variables to use? That's why you can use from static methods only static variables. I repeat again they do NOT belong to any particular instance.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>static</code> keyword modifies the lifecycle of a method or variable within a class. A <code>static</code> method or variable is created at the time a class is loaded. A method or variable that is not declared as <code>static</code> is created only when the class is instantiated as an object for example by using the <code>new</code> operator.</p>\n\n<p>The lifecyle of a class, in broad terms, is: (1) the source code for the class is written creating a template or pattern or stamp which can then be used to (2) create an object with the <code>new</code> operator using the class to make an instance of the class as an actual object and then when done with the object (3) destroy the object reclaiming the resources it is holding such as memory during garbage collection.</p>\n\n<p>In order to have an initial entry point for an application, Java has adopted the convention that the Java program must have a class that contains a method with an agreed upon or special name. This special method is called <code>main()</code>. Since the method must exist whether the class containing the main method has been instantiated or not, the <code>main()</code> method must be declared with the <code>static</code> modifier so that as soon as the class is loaded, the <code>main()</code> method is available.</p>\n\n<p>The result is that when you start your Java application by a command line such as <code>java helloworld</code> a series of actions happen. First of all a Java Virtual Machine is started up and initialized. Next the helloworld.class file containing the compiled Java code is loaded into the Java Virtual Machine. Then the Java Virtual Machine looks for a method in the <code>helloworld</code> class that is called <code>main(String [] args)</code>. this method must be <code>static</code> so that it will exist even though the class has not actually been instantiated as an object. The Java Virtual Machine does not create an instance of the class by creating an object from the class. It just loads the class and starts execution at the <code>main()</code> method.</p>\n\n<p>So you need to create an instance of your class as an object and then you can access the methods and variables of the class that have not been declared with the <code>static</code> modifier. Once your Java program has started with the <code>main()</code> function you can then use any variables or methods that have the modifier of <code>static</code> since they exist as part of the class being loaded. </p>\n\n<p>However those variables and methods of the class which are outside of the <code>main()</code> method which do not have the <code>static</code> modifier can not be used until an instance of the class has been created as an object within the <code>main()</code> method. After creating the object you can then use the variables and methods of the object. An attempt to use the variables and methods of the class which do not have the <code>static</code> modifier without going through an object of the class is caught by the Java compiler at compile time and flagged as an error.</p>\n\n<pre><code>import java.io.*;\n\nclass helloworld {\n    int myInt;      // this is a class variable that is unique to each object\n    static int myInt2;  // this is a class variable shared by all objects of this class\n\n    static void main (String [] args) {\n        // this is the main entry point for this Java application\n        System.out.println (\"Hello, World\\n\");\n        myInt2 = 14;    // able to access the static int\n        helloworld myWorld = new helloworld();\n        myWorld.myInt = 32;   // able to access non-static through an object\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ul>\n<li><p>The first thing is to know the difference between an instance of a class, and the class itself. A class models certain properties, and the behaviour of the whole in the context of those properties. An instance will define specific values for those properties.</p></li>\n<li><p>Anything bound to the static keyword is available in the context of the class rather than in the context of an instance of the class </p></li>\n<li><p>As a corollary to the above  </p>\n\n<ol>\n<li>variables within a method can not be static</li>\n<li>static fields, and methods must be invoked using the class-name e.g. MyProgram7.main(...)</li>\n</ol></li>\n<li><p>The lifetime of a static field/method is equivalent to the lifetime of your application </p></li>\n</ul>\n\n<p>E.g. \nSay, car has the property colour, and exhibits the behaviour 'motion'.\nAn instance of the car would be a Red Volkswagen Beetle in motion at 25kmph.</p>\n\n<p>Now a static property of the car would be the number of wheels (4) on the road, and this would apply to all cars.</p>\n\n<p>HTH</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is ClassLoader responsible to load the class files.Let's see what happens when we write our own classes.</p>\n\n<p>Example 1:  </p>\n\n<pre><code>class StaticTest {\n\n      static int a;\n      int b;\n      int c;\n}\n</code></pre>\n\n<p>Now we can see that class \"StaticTest\" has 3 fields.But actually there is no existence of b,c member variable.But why ???. OK Lest's see. Here b,c are instance variable.Since instance variable gets the memory at the time of object creation. So here b,c are not getting any memory yet. That's why there is no existence of b,c. So There is only existence of a.\nFor ClassLoader it has only one information about a. ClassLoader yet not recognize b,c because it's object not instantiated yet.</p>\n\n<p>Let's see another example:\nExample 2:</p>\n\n<pre><code>class StaticTest {\n\n      public void display() {\n          System.out.println(\"Static Test\");\n      }\n\n\n      public static void main(String []cmd) {\n\n             display();       \n      }\n\n}\n</code></pre>\n\n<p>Now if we try to compile this code compiler will give CE error.\nCE: non-static method display() cannot be referenced from a static context.</p>\n\n<p>Now For ClassLoader it looks like: </p>\n\n<pre><code>class StaticTest {\n\n      public static void main(String []cmd) {\n\n             display();       \n      }\n\n}\n</code></pre>\n\n<p>In Example 2 CE error is because we call non static method from a static context. So it is not possible for ClassLoader to recognize method display() at compile time.So compile time error is occurred.    </p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is caused by the nature of deferred expressions <code>#{}</code> (note that \"legacy\" standard expressions <code>${}</code> behave exactly the same when Facelets is used instead of JSP). The deferred expression is not <em>immediately</em> evaluated, but created as a <a href=\"http://docs.oracle.com/javaee/6/api/javax/el/ValueExpression.html\"><code>ValueExpression</code></a> object and the getter method behind the expression is executed everytime when the code calls <a href=\"http://docs.oracle.com/javaee/6/api/javax/el/ValueExpression.html#getValue%28javax.el.ELContext%29\"><code>ValueExpression#getValue()</code></a>.</p>\n\n<p>This will normally be invoked one or two times per JSF request-response cycle, depending on whether the component is an input or output component (<a href=\"http://balusc.blogspot.com/2006/09/debug-jsf-lifecycle.html\">learn it here</a>). However, this count can get up (much) higher when used in iterating JSF components (such as <code>&lt;h:dataTable&gt;</code> and <code>&lt;ui:repeat&gt;</code>), or here and there in a boolean expression like the <code>rendered</code> attribute. JSF (specifically, EL) won't cache the evaluated result of the EL expression at all as it <em>may</em> return different values on each call (for example, when it's dependent on the currently iterated datatable row). </p>\n\n<p>Evaluating an EL expression and invoking a getter method is a very cheap operation, so you should generally not worry about this at all. However, the story changes when you're performing expensive DB/business logic in the getter method for some reason. This would be re-executed everytime! </p>\n\n<p>Getter methods in JSF backing beans should be designed that way that they solely <strong>return</strong> the already-prepared property and nothing more, exactly as per the <a href=\"http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\">Javabeans specification</a>. They should not do any expensive DB/business logic at all. For that the bean's (post)constructor, initialization blocks and/or (action)listener methods should be used. They are executed <strong>only once</strong> at some point of request-based JSF lifecycle and that's exactly what you want.</p>\n\n<p>Here is a summary of all different <em>right</em> ways to preset/load a property.</p>\n\n<pre><code>public class Bean {\n\n    private SomeObject someProperty;\n\n    @PostConstruct\n    public void init() {\n        // In @PostConstruct (will be invoked immediately after construction and dependency/property injection).\n        someProperty = loadSomeProperty();\n    }\n\n    public void preRender(ComponentSystemEvent event) {\n        // Or in some SystemEvent method (e.g. &lt;f:event type=\"preRenderView\"&gt;).\n        someProperty = loadSomeProperty();\n    }           \n\n    public void change(ValueChangeEvent event) {\n        // Or in some FacesEvent method (e.g. &lt;h:inputXxx valueChangeListener&gt;).\n        someProperty = loadSomeProperty();\n    }\n\n    public void ajaxListener(AjaxBehaviorEvent event) {\n        // Or in some BehaviorEvent method (e.g. &lt;f:ajax listener&gt;).\n        someProperty = loadSomeProperty();\n    }\n\n    public void actionListener(ActionEvent event) {\n        // Or in some ActionEvent method (e.g. &lt;h:commandXxx actionListener&gt;).\n        someProperty = loadSomeProperty();\n    }\n\n    public String submit() {\n        // Or in Action method (e.g. &lt;h:commandXxx action&gt;).\n        someProperty = loadSomeProperty();\n        return \"outcome\";\n    }\n\n    public SomeObject getSomeProperty() {\n        // Just keep getter untouched. It isn't intented to do business logic!\n        return someProperty;\n    }\n\n}\n</code></pre>\n\n<p>Note that you should not use bean's constructor or initialization block for the job because it may be invoked multiple times if you're using a bean management framework which uses proxies, such as CDI.</p>\n\n<p>If there are for you really no other ways, due to some restrictive design requirements, then you should introduce lazy loading inside the getter method. I.e. if the property is <code>null</code>, then load and assign it to the property, else return it.</p>\n\n<pre><code>    public SomeObject getSomeProperty() {\n        // If there are really no other ways, introduce lazy loading.\n        if (someProperty == null) {\n            someProperty = loadSomeProperty();\n        }\n\n        return someProperty;\n    }\n</code></pre>\n\n<p>This way the expensive DB/business logic won't unnecessarily be executed on every single getter call.</p>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4281261/why-is-the-getter-called-so-many-times-by-the-rendered-attribute\">Why is the getter called so many times by the rendered attribute?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5765853/when-should-i-load-the-collection-from-database-for-hdatatable\">When should I load the collection from database for h:dataTable</a></li>\n<li><a href=\"http://stackoverflow.com/questions/6848970/how-to-prepopulate-hselectonemenu-with-entities-from-database\">How to prepopulate &lt;h:selectOneMenu&gt; with entities from database?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/8207325/display-dynamic-image-from-database-with-pgraphicimage-and-streamedcontent\">Display dynamic image from database with p:graphicImage and StreamedContent</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With JSF 2.0 you can attach a listener to a system event</p>\n\n<pre><code>&lt;h:outputText value=\"#{ManagedBean.someProperty}\"&gt;\n   &lt;f:event type=\"preRenderView\" listener=\"#{ManagedBean.loadSomeProperty}\" /&gt;\n&lt;/h:outputText&gt;\n</code></pre>\n\n<p>Alternatively you can enclose the JSF page in an <code>f:view</code> tag</p>\n\n<pre><code>&lt;f:view&gt;\n   &lt;f:event type=\"preRenderView\" listener=\"#{ManagedBean.loadSomeProperty}\" /&gt;\n\n      .. jsf page here...\n\n&lt;f:view&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have written an <a href=\"http://java.dzone.com/articles/how-cache-jsf-beans-getter\" rel=\"nofollow\">article</a> about how to cache JSF beans getter with Spring AOP.</p>\n\n<p>I create a simple <code>MethodInterceptor</code> which intercepts all methods annotated with a special annotation:</p>\n\n<pre><code>public class CacheAdvice implements MethodInterceptor {\n\nprivate static Logger logger = LoggerFactory.getLogger(CacheAdvice.class);\n\n@Autowired\nprivate CacheService cacheService;\n\n@Override\npublic Object invoke(MethodInvocation methodInvocation) throws Throwable {\n\n    String key = methodInvocation.getThis() + methodInvocation.getMethod().getName();\n\n    String thread = Thread.currentThread().getName();\n\n    Object cachedValue = cacheService.getData(thread , key);\n\n    if (cachedValue == null){\n        cachedValue = methodInvocation.proceed();\n        cacheService.cacheData(thread , key , cachedValue);\n        logger.debug(\"Cache miss \" + thread + \" \" + key);\n    }\n    else{\n        logger.debug(\"Cached hit \" + thread + \" \" + key);\n    }\n    return cachedValue;\n}\n\n\npublic CacheService getCacheService() {\n    return cacheService;\n}\npublic void setCacheService(CacheService cacheService) {\n    this.cacheService = cacheService;\n}\n\n}\n</code></pre>\n\n<p>This interceptor is used in a spring configuration file:</p>\n\n<pre><code>    &lt;bean id=\"advisor\" class=\"org.springframework.aop.support.DefaultPointcutAdvisor\"&gt;\n    &lt;property name=\"pointcut\"&gt;\n        &lt;bean class=\"org.springframework.aop.support.annotation.AnnotationMatchingPointcut\"&gt;\n            &lt;constructor-arg index=\"0\"  name=\"classAnnotationType\" type=\"java.lang.Class\"&gt;\n                &lt;null/&gt;\n            &lt;/constructor-arg&gt;\n            &lt;constructor-arg index=\"1\" value=\"com._4dconcept.docAdvance.jsfCache.annotation.Cacheable\" name=\"methodAnnotationType\" type=\"java.lang.Class\"/&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n    &lt;property name=\"advice\"&gt;\n        &lt;bean class=\"com._4dconcept.docAdvance.jsfCache.CacheAdvice\"/&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre>\n\n<p>Hope it will help!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Originally posted in PrimeFaces forum @ <a href=\"http://forum.primefaces.org/viewtopic.php?f=3&amp;t=29546\" rel=\"nofollow\">http://forum.primefaces.org/viewtopic.php?f=3&amp;t=29546</a></p>\n\n<p>Recently, I have been obsessed evaluating the performance of my app, tuning JPA queries, replacing dynamic SQL queries with named queries, and just this morning, I recognized that a getter method was more of a HOT SPOT in Java Visual VM than the rest of my code (or majority of my code).</p>\n\n<p>Getter method:</p>\n\n<pre><code>PageNavigationController.getGmapsAutoComplete()\n</code></pre>\n\n<p>Referenced by ui:include in  in index.xhtml</p>\n\n<p>Below, you will see that PageNavigationController.getGmapsAutoComplete() is a HOT SPOT (performance issue) in Java Visual VM. If you look further down, on the screen capture, you will see that getLazyModel(), PrimeFaces lazy datatable getter method, is a hot spot too, only when enduser is doing a lot of 'lazy datatable' type of stuff/operations/tasks in the app. :)</p>\n\n<p><img src=\"http://i.stack.imgur.com/9mkxy.png\" alt=\"Java Visual VM: showing HOT SPOT\"></p>\n\n<p>See (original) code below.</p>\n\n<pre><code>public Boolean getGmapsAutoComplete() {\n    switch (page) {\n        case \"/orders/pf_Add.xhtml\":\n        case \"/orders/pf_Edit.xhtml\":\n        case \"/orders/pf_EditDriverVehicles.xhtml\":\n            gmapsAutoComplete = true;\n            break;\n        default:\n            gmapsAutoComplete = false;\n            break;\n    }\n    return gmapsAutoComplete;\n}\n</code></pre>\n\n<p>Referenced by the following in index.xhtml:</p>\n\n<pre><code>&lt;h:head&gt;\n    &lt;ui:include src=\"#{pageNavigationController.gmapsAutoComplete ? '/head_gmapsAutoComplete.xhtml' : (pageNavigationController.gmaps ? '/head_gmaps.xhtml' : '/head_default.xhtml')}\"/&gt;\n&lt;/h:head&gt;\n</code></pre>\n\n<p>Solution: since this is a 'getter' method, move code and assign value to gmapsAutoComplete prior to method being called; see code below.</p>\n\n<pre><code>/*\n * 2013-04-06 moved switch {...} to updateGmapsAutoComplete()\n *            because performance = 115ms (hot spot) while\n *            navigating through web app\n */\npublic Boolean getGmapsAutoComplete() {\n    return gmapsAutoComplete;\n}\n\n/*\n * ALWAYS call this method after \"page = ...\"\n */\nprivate void updateGmapsAutoComplete() {\n    switch (page) {\n        case \"/orders/pf_Add.xhtml\":\n        case \"/orders/pf_Edit.xhtml\":\n        case \"/orders/pf_EditDriverVehicles.xhtml\":\n            gmapsAutoComplete = true;\n            break;\n        default:\n            gmapsAutoComplete = false;\n            break;\n    }\n}\n</code></pre>\n\n<p>Test results: PageNavigationController.getGmapsAutoComplete() is no longer a HOT SPOT in Java Visual VM (doesn't even show up anymore)</p>\n\n<p>Sharing this topic, since many of the expert users have advised junior JSF developers to NOT add code in 'getter' methods. :)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could probably use AOP to create some sort of Aspect that cached the results of our getters for a configurable amount of time. This would prevent you from needing to copy-and-paste boilerplate code in dozens of accessors.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are using CDI, you can use Producers methods.\nIt will be called many times, but the result of first call is cached in scope of the bean and is efficient for getters that are computing or initializing heavy objects!\nSee <a href=\"http://stackoverflow.com/questions/8592583/is-produces-more-efficient-that-a-getter-in-an-el-expression\">here</a>, for more info.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It still big problem in JSF. Fo example if you have a method <code>isPermittedToBlaBla</code> for security checks and in your view you have <code>rendered=\"#{bean.isPermittedToBlaBla}</code> then the method will be called multiple times.</p>\n\n<p>The security check could be complicated e.g . LDAP query etc. So you must avoid that with </p>\n\n<pre><code>Boolean isAllowed = null ... if(isAllowed==null){...} return isAllowed?\n</code></pre>\n\n<p>and you must ensure within a session bean this per request.</p>\n\n<p>Ich think JSF must implement here some extensions to avoid multiple calls (e.g annotation <code>@Phase(RENDER_RESPONSE)</code> calle this method only once after <code>RENDER_RESPONSE</code> phase...)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>If the value of someProperty is\n  expensive to calculate, this can\n  potentially be a problem.</p>\n</blockquote>\n\n<p>This is what we call a premature optimization. In the rare case that a profiler tells you that the calculation of a property is so extraordinarily expensive that calling it three times rather than once has a significant performance impact, you add caching as you describe. But unless you do something really stupid like factoring primes or accessing a databse in a getter, your code most likely has a dozen worse inefficiencies in places you've never thought about.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have to ask a question in return: is your <code>GenSet</code> \"checked\" or \"unchecked\"?\nWhat does that mean?</p>\n\n<ul>\n<li><p><strong>Checked</strong>: <em>strong typing</em>. <code>GenSet</code> knows explicitly what type of objects it contains (i.e. its constructor was explicitly called with a <code>Class&lt;E&gt;</code> argument, and methods will throw an exception when they are passed arguments that are not of type <code>E</code>. See <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29\"><code>Collections.checkedCollection</code></a>.</p>\n\n<p>-&gt; in that case, you should write:</p>\n\n<pre><code>public class GenSet&lt;E&gt; {\n\n    private E[] a;\n\n    public GenSet(Class&lt;E&gt; c, int s) {\n        // Use Array native method to create array\n        // of a type only known at run time\n        @SuppressWarnings(\"unchecked\")\n        final E[] a = (E[]) Array.newInstance(c, s);\n        this.a = a;\n    }\n\n    E get(int i) {\n        return a[i];\n    }\n}\n</code></pre></li>\n<li><p><strong>Unchecked</strong>: <em>weak typing</em>. No type checking is actually done on any of the objects passed as argument.</p>\n\n<p>-&gt; in that case, you should write</p>\n\n<pre><code>public class GenSet&lt;E&gt; {\n\n    private Object[] a;\n\n    public GenSet(int s) {\n        a = new Object[s];\n    }\n\n    E get(int i) {\n        @SuppressWarnings(\"unchecked\")\n        final E e = (E) a[i];\n        return e;\n    }\n}\n</code></pre>\n\n<p>Note that the component type of the array should be the <a href=\"http://docs.oracle.com/javase/tutorial/java/generics/erasure.html\"><em>erasure</em></a> of the type parameter:</p>\n\n<pre><code>public class GenSet&lt;E extends Foo&gt; { // E has an upper bound of Foo\n\n    private Foo[] a; // E erases to Foo, so use Foo[]\n\n    public GenSet(int s) {\n        a = new Foo[s];\n    }\n\n    ...\n}\n</code></pre></li>\n</ul>\n\n<p>All of this results from a known, and deliberate, weakness of generics in Java: it was implemented using erasure, so \"generic\" classes don't know what type argument they were created with at run time, and therefore can not provide type-safety unless some explicit mechanism (type-checking) is implemented.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can always do this:</p>\n\n<pre><code>E[] arr = (E[])new Object[INITIAL_ARRAY_LENGTH];\n</code></pre>\n\n<p>This is one of the suggested ways of implementing a generic collection in <em>Effective Java; Item 26</em>.  No type errors, no need to cast the array repeatedly.  <em>However</em> this triggers a warning because it is potentially dangerous, and should be used with caution.  As detailed in the comments, this <code>Object[]</code> is now masquerading as our <code>E[]</code> type, and can cause unexpected errors or <code>ClassCastException</code>s if used unsafely.</p>\n\n<p>As a rule of thumb, this behavior is safe as long as the cast array is used internally (e.g. to back a data structure), and not returned or exposed to client code.  Should you need to return an array of a generic type to other code, the reflection <code>Array</code> class you mention is the right way to go.</p>\n\n<hr>\n\n<p>Worth mentioning that wherever possible, you'll have a much happier time working with <code>List</code>s rather than arrays if you're using generics.  Certainly sometimes you don't have a choice, but using the collections framework is far more robust.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's how to use generics to get an array of precisely the type you\u2019re looking for while preserving type safety (as opposed to the other answers, which will either give you back an <code>Object</code> array or result in warnings at compile time):</p>\n\n<pre><code>import java.lang.reflect.Array;  \n\npublic class GenSet&lt;E&gt; {  \n    private E[] a;  \n\n    public GenSet(Class&lt;E[]&gt; clazz, int length) {  \n        a = clazz.cast(Array.newInstance(clazz.getComponentType(), length));  \n    }  \n\n    public static void main(String[] args) {  \n        GenSet&lt;String&gt; foo = new GenSet&lt;String&gt;(String[].class, 1);  \n        String[] bar = foo.a;  \n        foo.a[0] = \"xyzzy\";  \n        String baz = foo.a[0];  \n    }  \n}\n</code></pre>\n\n<p>That compiles without warnings, and as you can see in <code>main</code>, for whatever type you declare an instance of <code>GenSet</code> as, you can assign <code>a</code> to an array of that type, and you can assign an element from <code>a</code> to a variable of that type, meaning that the array and the values in the array are of the correct type.</p>\n\n<p>It works by using class literals as runtime type tokens, as discussed in the <a href=\"http://download.oracle.com/javase/tutorial/extra/generics/literals.html\" rel=\"nofollow\">Java Tutorials</a>. Class literals are treated by the compiler as instances of <code>java.lang.Class</code>. To use one, simply follow the name of a class with <code>.class</code>. So, <code>String.class</code> acts as a <code>Class</code> object representing the class <code>String</code>. This also works for interfaces, enums, any-dimensional arrays (e.g. <code>String[].class</code>), primitives (e.g. <code>int.class</code>), and the keyword <code>void</code> (i.e. <code>void.class</code>). </p>\n\n<p><code>Class</code> itself is generic (declared as <code>Class&lt;T&gt;</code>, where <code>T</code> stands for the type that the <code>Class</code> object is representing), meaning that the type of <code>String.class</code> is <code>Class&lt;String&gt;</code>.</p>\n\n<p>So, whenever you call the constructor for <code>GenSet</code>, you pass in a class literal for the first argument representing an array of the <code>GenSet</code> instance's declared type (e.g. <code>String[].class</code> for <code>GenSet&lt;String&gt;</code>). Note that you won't be able to get an array of primitives, since primitives can't be used for type variables.</p>\n\n<p>Inside the constructor, calling the method <code>cast</code> returns the passed <code>Object</code> argument cast to the class represented by the <code>Class</code> object on which the method was called. Calling the static method <code>newInstance</code> in <code>java.lang.reflect.Array</code> returns as an <code>Object</code> an array of the type represented by the <code>Class</code> object passed as the first argument and of the length specified by the <code>int</code> passed as the second argument. Calling the method <code>getComponentType</code> returns a <code>Class</code> object representing the component type of the array represented by the <code>Class</code> object on which the method was called (e.g. <code>String.class</code> for <code>String[].class</code>, <code>null</code> if the <code>Class</code> object doesn't represent an array).</p>\n\n<p>That last sentence isn't entirely accurate. Calling <code>String[].class.getComponentType()</code> returns a <code>Class</code> object representing the class <code>String</code>, but its type is <code>Class&lt;?&gt;</code>, not <code>Class&lt;String&gt;</code>, which is why you can't do something like the following.</p>\n\n<pre><code>String foo = String[].class.getComponentType().cast(\"bar\"); // won't compile\n</code></pre>\n\n<p>Same goes for every method in <code>Class</code> that returns a <code>Class</code> object.</p>\n\n<p>Regarding Joachim Sauer's comment on <a href=\"http://stackoverflow.com/questions/529085/java-how-to-generic-array-creation/529094#529094\">this answer</a> (I don't have enough reputation to comment on it myself), the example using the cast to <code>T[]</code> will result in a warning because the compiler can't guarantee type safety in that case.</p>\n\n<hr>\n\n<p>Edit regarding Ingo's comments:</p>\n\n<pre><code>public static &lt;T&gt; T[] newArray(Class&lt;T[]&gt; type, int size) {\n   return type.cast(Array.newInstance(type.getComponentType(), size));\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is the only answer that is type safe</p>\n\n<pre><code>E[] a;\n\na = newArray(size);\n\n@SafeVarargs\nstatic &lt;E&gt; E[] newArray(int length, E... array)\n{\n    return Arrays.copyOf(array, length);\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To extend to more dimensions, just add <code>[]</code>'s and dimension parameters to <code>newInstance()</code> (<code>T</code> is a type parameter, <code>cls</code> is a <code>Class&lt;T&gt;</code>, <code>d1</code> through <code>d5</code> are integers):</p>\n\n<pre><code>T[] array = (T[])Array.newInstance(cls, d1);\nT[][] array = (T[][])Array.newInstance(cls, d1, d2);\nT[][][] array = (T[][][])Array.newInstance(cls, d1, d2, d3);\nT[][][][] array = (T[][][][])Array.newInstance(cls, d1, d2, d3, d4);\nT[][][][][] array = (T[][][][][])Array.newInstance(cls, d1, d2, d3, d4, d5);\n</code></pre>\n\n<p>See <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class,%20int...%29\"><code>Array.newInstance()</code></a> for details.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is covered in Chapter 5 (Generics) of <a href=\"http://java.sun.com/docs/books/effective/\" rel=\"nofollow\">Effective Java, 2nd Edition</a>, item 25...<strong>Prefer lists to arrays</strong></p>\n\n<p>Your code will work, although it will generate an unchecked warning (which you could suppress with the following annotation:</p>\n\n<pre><code>@SuppressWarnings({\"unchecked\"})\n</code></pre>\n\n<p>However, it would probably be better to use a List instead of an Array.</p>\n\n<p>There's an interesting discussion of this bug/feature on <a href=\"http://web.archive.org/web/20130429151651/http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5105887\" rel=\"nofollow\">Sun's site</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Hi although the thread is dead, I would like to draw your attention to this:</p>\n\n<p>Generics is used for type checking during compile time:</p>\n\n<ul>\n<li>Therefore the purpose is to check that what comes in is what you need.</li>\n<li>What you return is what the consumer needs.</li>\n<li>Check this:  </li>\n</ul>\n\n<p><img src=\"http://i.stack.imgur.com/fCXXe.jpg\" alt=\"enter image description here\"></p>\n\n<p>Do don't worry about typecasting warnings when you are writing generic class. Worry when you are using it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The example is using Java reflection to create an array. Doing this is generally not recommended, since it isn't typesafe. Instead, what you should do is just use an internal List, and avoid the array at all.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java generics work by checking types at compile time and inserting appropriate casts, but <em>erasing</em> the types in the compiled files. This makes generic libraries usable by code which doesn't understand generics (which was a deliberate design decision) but which means you can't normally find out what the type is at run time.</p>\n\n<p>The public <code>Stack(Class&lt;T&gt; clazz,int capacity)</code> constructor requires you to pass a Class object at run time, which means class information <em>is</em> available at runtime to code that needs it. And the <code>Class&lt;T&gt;</code> form means that the compiler will check that the Class object you pass is precisely the Class object for type T. Not a subclass of T, not a superclass of T, but precisely T.</p>\n\n<p>This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I made this code snippet to reflectively instantiate a class which is passed for a simple automated test utility.</p>\n\n<pre><code>Object attributeValue = null;\ntry {\n    if(clazz.isArray()){\n        Class&lt;?&gt; arrayType = clazz.getComponentType();\n        attributeValue = Array.newInstance(arrayType, 0);\n    }\n    else if(!clazz.isInterface()){\n        attributeValue = BeanUtils.instantiateClass(clazz);\n    }\n} catch (Exception e) {\n    logger.debug(\"Cannot instanciate \\\"{}\\\"\", new Object[]{clazz});\n}\n</code></pre>\n\n<p>Note this segment:</p>\n\n<pre><code>    if(clazz.isArray()){\n        Class&lt;?&gt; arrayType = clazz.getComponentType();\n        attributeValue = Array.newInstance(arrayType, 0);\n    }\n</code></pre>\n\n<p>for array initiating where <strong>Array.newInstance(class of array, size of array)</strong>. Class can be both primitive (int.class) and object (Integer.class).</p>\n\n<p>BeanUtils is part of Spring.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Java 8, we can do a kind of generic array creation using a lambda or method reference. This is similar to the reflection approach (which passes a <code>Class</code>), but here we aren't using reflection.</p>\n\n<pre><code>@FunctionalInterface\ninterface ArraySupplier&lt;E&gt; {\n    E[] get(int length);\n}\n\nclass GenSet&lt;E&gt; {\n    private final ArraySupplier&lt;E&gt; supplier;\n    private E[] a;\n\n    GenSet(ArraySupplier&lt;E&gt; supplier) {\n        this.supplier = supplier;\n        a = supplier.get(10);\n    }\n}\n\nGenSet&lt;String&gt; g = new GenSet&lt;&gt;(String[]::new);\n</code></pre>\n\n<p>This can be done pre-Java 8 using anonymous classes but it's more cumbersome.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>try this.</p>\n\n<pre><code>private int m = 0;\nprivate int n = 0;\nprivate Element&lt;T&gt;[][] elements = null;\n\npublic MatrixData(int m, int n)\n{\n    this.m = m;\n    this.n = n;\n\n    this.elements = new Element[m][n];\n    for (int i = 0; i &lt; m; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            this.elements[i][j] = new Element&lt;T&gt;();\n        }\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An easy, albeit messy workaround to this would be to nest a second \"holder\" class inside of your main class, and use it to hold your data.</p>\n\n<pre><code>public class Whatever&lt;Thing&gt;{\n    private class Holder&lt;OtherThing&gt;{\n        OtherThing thing;\n    }\n    public Holder&lt;Thing&gt;[] arrayOfHolders = new Holder&lt;Thing&gt;[10]\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Look also to this code:</p>\n\n<pre><code>public static &lt;T&gt; T[] toArray(final List&lt;T&gt; obj) {\n    if (obj == null || obj.isEmpty()) {\n        return null;\n    }\n    final T t = obj.get(0);\n    final T[] res = (T[]) Array.newInstance(t.getClass(), obj.size());\n    for (int i = 0; i &lt; obj.size(); i++) {\n        res[i] = obj.get(i);\n    }\n    return res;\n}\n</code></pre>\n\n<p>It converts a list of any kind of object to an array of the same type.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The forced cast suggested by other people did not work for me, throwing an exception of illegal casting.</p>\n\n<p>However, this implicit cast worked fine:</p>\n\n<pre><code>Item&lt;K&gt;[] array = new Item[SIZE];\n</code></pre>\n\n<p>where Item is a class I defined containing the member:</p>\n\n<pre><code>private K value;\n</code></pre>\n\n<p>This way you get an array of type K (if the item only has the value) or any generic type you want defined in the class Item.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually an easier way to do so, is to create an array of objects and cast it to your desired type like the following example:</p>\n\n<pre><code>T[] array = (T[])new Object[SIZE];\n</code></pre>\n\n<p>where <code>SIZE</code> is a constant and <code>T</code> is a type identifier</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could create an Object array and cast it to E everywhere. Yeah, it's not very clean way to do it but it should at least work.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Maybe unrelated to this question but while I was getting the \"<code>generic array creation</code>\" error for using </p>\n\n<pre><code>Tuple&lt;Long,String&gt;[] tupleArray = new Tuple&lt;Long,String&gt;[10];\n</code></pre>\n\n<p>I find out the following works (and worked for me) with  <code>@SuppressWarnings({\"unchecked\"})</code>:</p>\n\n<pre><code> Tuple&lt;Long, String&gt;[] tupleArray = new Tuple[10];\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm wondering if this code would create an effective generic array?</p>\n\n<pre><code>public T [] createArray(int desiredSize){\n    ArrayList&lt;T&gt; builder = new ArrayList&lt;T&gt;();\n    for(int x=0;x&lt;desiredSize;x++){\n        builder.add(null);\n    }\n    return builder.toArray(zeroArray());\n}\n\n//zeroArray should, in theory, create a zero-sized array of T\n//when it is not given any parameters.\n\nprivate T [] zeroArray(T... i){\n    return i;\n}\n</code></pre>\n\n<p>Edit: Perhaps an alternate way of creating such an array, if the size you required was known and small, would be to simply feed the required number of \"null\"s into the zeroArray command?</p>\n\n<p>Though obviously this isn't as versatile as using the createArray code.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could use a cast:</p>\n\n<pre><code>public class GenSet&lt;Item&gt; {\n    private Item[] a;\n\n    public GenSet(int s) {\n        a = (Item[]) new Object[s];\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>No one else has answered the question of what is going on in the example you posted.</p>\n\n<pre><code>import java.lang.reflect.Array;\n\nclass Stack&lt;T&gt; {\n    public Stack(Class&lt;T&gt; clazz, int capacity) {\n        array = (T[])Array.newInstance(clazz, capacity);\n    }\n\n    private final T[] array;\n}\n</code></pre>\n\n<p>As others have said generics are \"erased\" during compilation. So at runtime an instance of a generic doesn't know what its component type is. The reason for this is historical, Sun wanted to add generics without breaking the existing interface (both source and binary).</p>\n\n<p>Arrays on the other hand <em>do</em> know their component type at runtime.</p>\n\n<p>This example works around the problem by having the code that calls the constructor (which does know the type) pass a parameter telling the class the required type.</p>\n\n<p>So the application would construct the class with something like</p>\n\n<pre><code>Stack&lt;foo&gt; = new Stack&lt;foo&gt;(foo.class,50)\n</code></pre>\n\n<p>and the constructor now knows (at runtime) what the component type is and can use that information to construct the array through the reflection API.</p>\n\n<pre><code>Array.newInstance(clazz, capacity);\n</code></pre>\n\n<p>Finally we have a type cast because the compiler has no way of knowing that the array returned by <code>Array#newInstance()</code> is the correct type (even though we know).</p>\n\n<p>This style is a bit ugly but it can sometimes be the least bad solution to creating generic types that do need to know their component type at runtime for whatever reason (creating arrays, or creating instances of their component type, etc.).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>private E a[];\nprivate int size;\n\npublic GenSet(int elem)\n{\n    size = elem;\n    a = (E[]) new E[size];\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The field annotated <code>@Autowired</code> is <code>null</code> because Spring doesn't know about the copy of <code>MileageFeeCalculator</code> that you created with <code>new</code> and didn't know to autowire it.</p>\n\n<p><a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html\">The Spring Inversion of Control (IoC) container</a> has three main logical components: a registry (called the <code>ApplicationContext</code>) of components (beans) that are available to be used by the application, a configurer system that injects objects' dependencies into them by matching up the dependencies with beans in the context, and a dependency solver that can look at a configuration of many different beans and determine how to instantiate and configure them in the necessary order.</p>\n\n<p>The IoC container isn't magic, and it has no way of knowing about Java objects unless you somehow inform it of them. When you call <code>new</code>, the JVM instantiates a copy of the new object and hands it straight to you--it never goes through the configuration process. There are three ways that you can get your beans configured.</p>\n\n<p>I have posted all of this code, using Spring Boot to launch, at <a href=\"https://github.com/chrylis/spring_autowired_npe_example\">this GitHub project</a>; you can look at a full running project for each approach to see everything you need to make it work. <strong>Tag with the <code>NullPointerException</code>: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/nonworking\"><code>nonworking</code></a></strong></p>\n\n<h2>Inject your beans</h2>\n\n<p>The most preferable option is to let Spring autowire all of your beans; this requires the least amount of code and is the most maintainable. To make the autowiring work like you wanted, also autowire the <code>MileageFeeCalculator</code> like this:</p>\n\n<pre><code>@Controller\npublic class MileageFeeController {\n\n    @Autowired\n    private MileageFeeCalculator calc;\n\n    @RequestMapping(\"/mileage/{miles}\")\n    @ResponseBody\n    public float mileageFee(@PathVariable int miles) {\n        return calc.mileageCharge(miles);\n    }\n}\n</code></pre>\n\n<p>If you need to create a new instance of your service object for different requests, you can still use injection by using <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-scopes\">the Spring bean scopes</a>.</p>\n\n<p><strong>Tag that works by injecting the <code>@MileageFeeCalculator</code> service object: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/working-inject-bean\"><code>working-inject-bean</code></a></strong></p>\n\n<h2>Use @Configurable</h2>\n\n<p>If you really need objects created with <code>new</code> to be autowired, you can <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-atconfigurable\">use the Spring <code>@Configurable</code> annotation along with AspectJ compile-time weaving</a> to inject your objects. This approach inserts code into your object's constructor that alerts Spring that it's being created so that Spring can configure the new instance. This requires a bit of configuration in your build (such as compiling with <code>ajc</code>) and turning on Spring's runtime configuration handlers (<code>@EnableSpringConfigured</code> with the JavaConfig syntax). This approach is used by the Roo Active Record system to allow <code>new</code> instances of your entities to get the necessary persistence information injected.</p>\n\n<pre><code>@Service\n@Configurable\npublic class MileageFeeCalculator {\n\n    @Autowired\n    private MileageRateService rateService;\n\n    public float mileageCharge(final int miles) {\n        return (miles * rateService.ratePerMile());\n    }\n}\n</code></pre>\n\n<p><strong>Tag that works by using <code>@Configurable</code> on the service object: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/working-configurable\"><code>working-configurable</code></a></strong></p>\n\n<h2>Manual bean lookup: not recommended</h2>\n\n<p>This approach is suitable only for interfacing with legacy code in special situations. It is nearly always preferable to create a singleton adapter class that Spring can autowire and the legacy code can call, but it is possible to directly ask the Spring application context for a bean.</p>\n\n<p>To do this, you need a class to which Spring can give a reference to the <code>ApplicationContext</code> object:</p>\n\n<pre><code>@Component\npublic class ApplicationContextHolder implements ApplicationContextAware {\n    private static ApplicationContext context;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        context = applicationContext;   \n    }\n\n    public static ApplicationContext getContext() {\n        return context;\n    }\n}\n</code></pre>\n\n<p>Then your legacy code can call <code>getContext()</code> and retrieve the beans it needs:</p>\n\n<pre><code>@Controller\npublic class MileageFeeController {    \n    @RequestMapping(\"/mileage/{miles}\")\n    @ResponseBody\n    public float mileageFee(@PathVariable int miles) {\n        MileageFeeCalculator calc = ApplicationContextHolder.getContext().getBean(MileageFeeCalculator.class);\n        return calc.mileageCharge(miles);\n    }\n}\n</code></pre>\n\n<p><strong>Tag that works by manually looking up the service object in the Spring context: <a href=\"https://github.com/chrylis/spring_autowired_npe_example/tree/working-manual-lookup\"><code>working-manual-lookup</code></a></strong></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If u are not coding a web application, make sure your class in which @Autowiring is done is a spring bean. Typically spring container wont be aware of the class which we might think as a spring bean. We have to tell the Spring container about our spring classes.</p>\n\n<p>This can be achieved my configuring in appln-contxt or <strong>the better way</strong> is to annotate class as <strong>@Component</strong> and please do not create the annotated class using new  operator.\nMake sure u get it from Appln-context as below.</p>\n\n<pre><code>@Component\npublic class MyDemo {\n\n\n    @Autowired\n    private MyService  myService; \n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n            System.out.println(\"test\");\n            ApplicationContext ctx=new ClassPathXmlApplicationContext(\"spring.xml\");\n            System.out.println(\"ctx&gt;&gt;\"+ctx);\n\n            Customer c1=null;\n            MyDemo myDemo=ctx.getBean(MyDemo.class);\n            System.out.println(myDemo);\n            myDemo.callService(ctx);\n\n\n    }\n\n    public void callService(ApplicationContext ctx) {\n        // TODO Auto-generated method stub\n        System.out.println(\"---callService---\");\n        System.out.println(myService);\n        myService.callMydao();\n\n    }\n\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another solution would be putting call:\n<code>SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this)</code><br>\nTo MileageFeeCalculator constructor like this:</p>\n\n<pre><code>@Service\npublic class MileageFeeCalculator {\n\n    @Autowired\n    private MileageRateService rateService; // &lt;--- will be autowired when constructor is called\n\n    public MileageFeeCalculator() {\n        SpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this)\n    }\n\n    public float mileageCharge(final int miles) {\n        return (miles * rateService.ratePerMile()); \n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>I'm new to Spring, but I discovered this working solution. Please tell me if it's a deprecable way.</em></p>\n\n<p>I make Spring inject <code>applicationContext</code> in this bean:</p>\n\n<pre><code>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringUtils {\n\n    public static ApplicationContext ctx;\n\n    /**\n     * Make Spring inject the application context\n     * and save it on a static variable,\n     * so that it can be accessed from any point in the application. \n     */\n    @Autowired\n    private void setApplicationContext(ApplicationContext applicationContext) {\n        ctx = applicationContext;       \n    }\n}\n</code></pre>\n\n<p>You can put this code also in the main application class if you want.</p>\n\n<p>Other classes can use it like this:</p>\n\n<pre><code>MyBean myBean = (MyBean)SpringUtils.ctx.getBean(MyBean.class);\n</code></pre>\n\n<p>In this way <strong>any bean can be obtained by any object in the application</strong> (also intantiated with <code>new</code>) and <strong>in a static way</strong>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Your problem is new (object creation in java style)</p>\n\n<pre><code> MileageFeeCalculator calc = new MileageFeeCalculator();\n</code></pre>\n\n<p>With annotation <code>@Service</code>, <code>@Component</code>, <code>@Configuration</code> beans are created in the<br>\n    application context of Spring when server is started. But when we create objects \n    using new operator the object is not registered in  application context which  is already created. For Example Employee.java class i have used.</p>\n\n<p>Check this out:</p>\n\n<pre><code>public class ConfiguredTenantScopedBeanProcessor implements BeanFactoryPostProcessor {\n\n@Override\npublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n    String name = \"tenant\";\n    System.out.println(\"Bean factory post processor is initialized\"); \n    beanFactory.registerScope(\"employee\", new Employee());\n\n    Assert.state(beanFactory instanceof BeanDefinitionRegistry,\n            \"BeanFactory was not a BeanDefinitionRegistry, so CustomScope cannot be used.\");\n    BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;\n\n    for (String beanName : beanFactory.getBeanDefinitionNames()) {\n        BeanDefinition definition = beanFactory.getBeanDefinition(beanName);\n        if (name.equals(definition.getScope())) {\n            BeanDefinitionHolder proxyHolder = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(definition, beanName), registry, true);\n            registry.registerBeanDefinition(beanName, proxyHolder.getBeanDefinition());\n        }\n    }\n}\n\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I once encountered the same issue when I was not quite used to <code>the life in the IoC world</code>. The <code>@Autowired</code> field of one of my beans is null at runtime.</p>\n\n<p>The root cause is, instead of using the auto-created bean maintained by the Spring IoC container (whose <code>@Autowired</code> field is <code>indeed</code> properly injected), I am <code>newing</code> my own instance of that bean and using it. Of course this one's <code>@Autowired</code> field is null because Spring has no chance to inject it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Maybe you are just missing the proper PostProcessor:</p>\n\n<pre><code>&lt;bean class=\"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\" /&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Did you make sure that <a href=\"/questions/tagged/spring\" class=\"post-tag\" title=\"show questions tagged 'spring'\" rel=\"tag\">spring</a> is actually scanning the page which contains the <code>MileageRateSrvice</code> class?</p>\n\n<p>In your Spring <a href=\"/questions/tagged/xml\" class=\"post-tag\" title=\"show questions tagged 'xml'\" rel=\"tag\">xml</a> file you should add something like this...</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;context:component-scan base-package=\"com.chrylis.example.spring_autowired_npe\"/&gt;\n</code></pre>\n\n<p>where <code>com.chrylis.example.spring_autowired_npe</code> is the parent package for all of your Spring annotated classes.</p>\n\n<p>For more info see the documentation here: <a href=\"http://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/ch06s02.html\" rel=\"nofollow\">http://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/ch06s02.html</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here are some example images for common use, mostly from existing answers on SO.  </p>\n\n<h2>Icons</h2>\n\n<p><strong>Simple Geometric shapes</strong> generated using Java as originally seen in <a href=\"http://stackoverflow.com/a/16052085/418556\">this answer</a>.  It includes a Java based interface that defines the URLs and makes them easy to access.</p>\n\n<p><strong>Details:</strong> 32x32 pixel PNG (4 colors x 5 shapes) with partial transparency (along the edges).</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/png\" class=\"post-tag\" title=\"show questions tagged 'png'\" rel=\"tag\">png</a> <a href=\"/questions/tagged/icons\" class=\"post-tag\" title=\"show questions tagged 'icons'\" rel=\"tag\">icons</a></p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/gJmeJ.png\">\n  <img src=\"http://i.stack.imgur.com/L5DGx.png\">\n  <img src=\"http://i.stack.imgur.com/in9g1.png\">\n  <img src=\"http://i.stack.imgur.com/IucNt.png\">\n  <img src=\"http://i.stack.imgur.com/yoKxT.png\">\u00a0\u00a0\n  <img src=\"http://i.stack.imgur.com/T5uTa.png\">\n  <img src=\"http://i.stack.imgur.com/gYxHm.png\">\n  <img src=\"http://i.stack.imgur.com/1lgtq.png\">\n  <img src=\"http://i.stack.imgur.com/yBOv3.png\">\n  <img src=\"http://i.stack.imgur.com/zJ8am.png\"><br>\n  <img src=\"http://i.stack.imgur.com/IHARa.png\">\n  <img src=\"http://i.stack.imgur.com/8BGfi.png\">\n  <img src=\"http://i.stack.imgur.com/6ZXhi.png\">\n  <img src=\"http://i.stack.imgur.com/Lqkl0.png\">\n  <img src=\"http://i.stack.imgur.com/c67nr.png\">\u00a0\u00a0\n  <img src=\"http://i.stack.imgur.com/wCF8S.png\">\n  <img src=\"http://i.stack.imgur.com/5v2TX.png\">\n  <img src=\"http://i.stack.imgur.com/F0JHK.png\">\n  <img src=\"http://i.stack.imgur.com/4EVv1.png\">\n  <img src=\"http://i.stack.imgur.com/xj49g.png\"><br></p>\n</blockquote>\n\n<h2>Sprite Sheets</h2>\n\n<p><strong>Chess Pieces</strong> as originally seen on <a href=\"http://stackoverflow.com/a/18686753/418556\">this answer</a> that includes 2 other sprite sets (same image in different colors).</p>\n\n<p><strong>Details:</strong> 384x128 px (each sprite 64x64 px) PNG with partial transparency.</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/png\" class=\"post-tag\" title=\"show questions tagged 'png'\" rel=\"tag\">png</a> <a href=\"/questions/tagged/sprite-sheet\" class=\"post-tag\" title=\"show questions tagged 'sprite-sheet'\" rel=\"tag\">sprite-sheet</a> <a href=\"/questions/tagged/icons\" class=\"post-tag\" title=\"show questions tagged 'icons'\" rel=\"tag\">icons</a></p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/memI0.png\"></p>\n</blockquote>\n\n<h2>Animated</h2>\n\n<p>GIF is the only image format that supports animation.  Here are a few examples.</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/gif\" class=\"post-tag\" title=\"show questions tagged 'gif'\" rel=\"tag\">gif</a> <a href=\"/questions/tagged/animated-gif\" class=\"post-tag\" title=\"show questions tagged 'animated-gif'\" rel=\"tag\">animated-gif</a> </p>\n\n<h3>Solid BG</h3>\n\n<p><strong>Animated dashed border</strong> as seen in <a href=\"http://stackoverflow.com/a/9772978/418556\">this answer</a>.</p>\n\n<p><strong>Details:</strong> 100x30 px with filled BG (no transparency)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/DnzXV.gif\"></p>\n</blockquote>\n\n<p><strong>Zooming stars</strong> as seen in <a href=\"http://stackoverflow.com/a/10836833/418556\">this answer</a>, originally developed as a 'screen-shot' of a screensaver.</p>\n\n<p><strong>Details:</strong> 160x120 px with filled BG (no transparency)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/iQFxo.gif\"></p>\n</blockquote>\n\n<p><strong>Animated Water</strong> as seen in <a href=\"http://stackoverflow.com/a/17894012/418556\">this answer</a> to <a href=\"http://stackoverflow.com/q/17893429/418556\">Animating Tiles In My Game</a>.</p>\n\n<p><strong>Details:</strong> 60x60 px with filled BG (no transparency)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/HXCUV.gif\"></p>\n</blockquote>\n\n<h3>Transparent BG</h3>\n\n<p><strong>Orbital animation,</strong> originally developed for <a href=\"http://1point1c.org/\">1.1C</a>.  The orbits of the 'inner' planets (from Mercury to Jupiter, with an extra orbit shown in the thick of the asteroid belt).  Better on a dark BG.</p>\n\n<p><strong>Details:</strong> 450x450 &amp; 150x150 px animated GIFs with transparency.  </p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/OtTIY.gif\"><img src=\"http://i.stack.imgur.com/z9rv7.gif\"></p>\n</blockquote>\n\n<h2>Pictures</h2>\n\n<p><strong>Sunrise &amp; moonset</strong> over the CBD of Sydney, Australia<br><strong>Sunset &amp; Venus over a telescope</strong> on Mt Stromlo, near Canberra, Australia.</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/jpeg\" class=\"post-tag\" title=\"show questions tagged 'jpeg'\" rel=\"tag\">jpeg</a> <a href=\"/questions/tagged/slideshow\" class=\"post-tag\" title=\"show questions tagged 'slideshow'\" rel=\"tag\">slideshow</a> + Image Transitions</p>\n\n<p><strong>Details:</strong> 480x320 px JPEGs x 4.  (Displayed here at 1/2 size.) </p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/XZ4V5.jpg\" width=\"240\" height=\"160\"><img src=\"http://i.stack.imgur.com/7bI1Y.jpg\" width=\"240\" height=\"160\"><br>\n  <img src=\"http://i.stack.imgur.com/OVOg3.jpg\" width=\"240\" height=\"160\"><img src=\"http://i.stack.imgur.com/lxthA.jpg\" width=\"240\" height=\"160\"></p>\n</blockquote>\n\n<h2>Tiles</h2>\n\n<p>This <strong>Mercator map of Earth</strong> can be tiled left/right.  Originally seen on <a href=\"http://stackoverflow.com/a/18825844/418556\">this answer</a>.  The answer also includes a second version of the image that shows a semi-transparent line for the equator (which is not in the center, but significantly below it).</p>\n\n<p><strong>Details:</strong> 640x316 px (add 44 px at bottom to center equator) PNG with transparent BG.  </p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/png\" class=\"post-tag\" title=\"show questions tagged 'png'\" rel=\"tag\">png</a> <a href=\"/questions/tagged/tile\" class=\"post-tag\" title=\"show questions tagged 'tile'\" rel=\"tag\">tile</a> <a href=\"/questions/tagged/animation\" class=\"post-tag\" title=\"show questions tagged 'animation'\" rel=\"tag\">animation</a> (scrolling)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/P59NF.png\"></p>\n</blockquote>\n\n<h2>Tip</h2>\n\n<p>For getting the URLs of the images, you might 'context click' on the image as seen in the browser and either: </p>\n\n<ul>\n<li>Show the properties.  The URL can be copied from the dialog that appears.  </li>\n<li>View image.  Copy the URL from the browser address bar.</li>\n</ul>\n\n<p>Alternately:</p>\n\n<ul>\n<li>Use the browser 'show source' and copy it from the HTML.</li>\n<li>For those with enough rep. (100+, to edit a community Wiki answer), go to <a href=\"http://stackoverflow.com/posts/19209651/edit\">edit the answer</a> and pull the URL from the text.</li>\n</ul>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just use the appropriate method: <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-\"><code>String#split()</code></a>.</p>\n\n<pre><code>String string = \"004-034556\";\nString[] parts = string.split(\"-\");\nString part1 = parts[0]; // 004\nString part2 = parts[1]; // 034556\n</code></pre>\n\n<p>Note that this takes a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum\">regular expression</a>, so remember to escape special characters if necessary. E.g. if you want to split on period/dot <code>.</code> which means \"<a href=\"http://www.regular-expressions.info/dot.html\">any character</a>\" in regex, use either <a href=\"http://www.regular-expressions.info/characters.html\">backslash <code>\\</code></a> to escape the individual special character like so <code>split(\"\\\\.\")</code>, or use <a href=\"http://www.regular-expressions.info/charclass.html\">character class <code>[]</code></a> to represent literal character(s) like so <code>split(\"[.]\")</code>, or use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#quote-java.lang.String-\"><code>Pattern#quote()</code></a> to escape the entire string like so <code>split(Pattern.quote(\".\"))</code>.</p>\n\n<pre><code>String[] parts = string.split(Pattern.quote(\".\")); // Split on period.\n</code></pre>\n\n<p>To test beforehand if the string contains certain character(s), just use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contains-java.lang.CharSequence-\"><code>String#contains()</code></a>.</p>\n\n<pre><code>if (string.contains(\"-\")) {\n    // Split it.\n} else {\n    throw new IllegalArgumentException(\"String \" + string + \" does not contain -\");\n}\n</code></pre>\n\n<p>No, this does not take a regular expression.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An alternative to processing the string directly would be to use a regular expression with capturing groups. This has the advantage that it makes it straightforward to imply more sophisticated constraints on the input. For example, the following splits the string into two parts, and ensures that both consist only of digits:</p>\n\n<pre><code>import java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\nclass SplitExample\n{\n    private static Pattern twopart = Pattern.compile(\"(\\\\d+)-(\\\\d+)\");\n\n    public static void checkString(String s)\n    {\n        Matcher m = twopart.matcher(s);\n        if (m.matches()) {\n            System.out.println(s + \" matches; first part is \" + m.group(0) +\n                               \", second part is \" + m.group(1) + \".\");\n        } else {\n            System.out.println(s + \" does not match.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        checkString(\"123-4567\");\n        checkString(\"foo-bar\");\n        checkString(\"123-\");\n        checkString(\"-4567\");\n        checkString(\"123-4567-890\");\n    }\n}\n</code></pre>\n\n<p>As the pattern is fixed in this instance, it can be compiled in advance and stored as a static member (initialised at class load time in the example). The regular expression is:</p>\n\n<pre><code>(\\d+)-(\\d+)\n</code></pre>\n\n<p>The parentheses denote the capturing groups; the string that matched that part of the regexp can be accessed by the Match.group() method, as shown. The \\d matches and single decimal digit, and the + means \"match one or more of the previous expression). The - has no special meaning, so just matches that character in the input. Note that you need to double-escape the backslashes when writing this as a Java string. Some other examples:</p>\n\n<pre><code>([A-Z]+)-([A-Z]+)          // Each part consists of only capital letters \n([^-]+)-([^-]+)            // Each part consists of characters other than -\n([A-Z]{2})-(\\d+)           // The first part is exactly two capital letters,\n                           // the second consists of digits\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>// This leaves the regexes issue out of question\n// But we must remember that each character in the Delimiter String is treated\n// like a single delimiter        \n\npublic static String[] SplitUsingTokenizer(String subject, String delimiters) {\n   StringTokenizer strTkn = new StringTokenizer(subject, delimiters);\n   ArrayList&lt;String&gt; arrLis = new ArrayList&lt;String&gt;(subject.length());\n\n   while(strTkn.hasMoreTokens())\n      arrLis.add(strTkn.nextToken());\n\n   return arrLis.toArray(new String[0]);\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>String[] result = yourString.split(\"-\");\nif (result.length != 2) \n     throw new IllegalArgumentException(\"String not in correct format\");\n</code></pre>\n\n<p>This will split your string into 2 parts.  The first element in the array will be the part containing the stuff before the <code>-</code>, and the 2nd element in the array will contain the part of your string after the <code>-</code>.</p>\n\n<p>If the array length is not 2, then the string was not in the format: <code>string-string</code>.</p>\n\n<p>Check out the <code>split()</code> method in the <code>String</code> class.</p>\n\n<blockquote>\n  <p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#split%28java.lang.String,%20int%29\">http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#split%28java.lang.String,%20int%29</a></p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>String[] out = string.split(\"-\");\n</code></pre>\n\n<p>should do thing you want. String class has many method to operate with string. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The requirements left room for interpretation. I recommend writing a method,</p>\n\n<pre><code>public final static String[] mySplit(final String s)\n</code></pre>\n\n<p>which encapsulate this function. Of course you can use String.split(..) as mentioned in the other answers for the implementation.</p>\n\n<p>You should write some unit-tests for input strings and the desired results and behaviour.</p>\n\n<p>Good test candidates should include:</p>\n\n<pre><code> - \"0022-3333\"\n - \"-\"\n - \"5555-\"\n - \"-333\"\n - \"3344-\"\n - \"--\"\n - \"\"\n - \"553535\"\n - \"333-333-33\"\n - \"222--222\"\n - \"222--\"\n - \"--4555\"\n</code></pre>\n\n<p>With defining the according test results, you can specify the behaviour.</p>\n\n<p>For example, if <code>\"-333\"</code> should return in <code>[,333]</code> or if it is an error.\nCan <code>\"333-333-33\"</code> be separated in <code>[333,333-33] or [333-333,33]</code> or is it an error? And so on.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringUtils.html#split(java.lang.String,%20char)\" rel=\"nofollow\">org.apache.commons.lang.StringUtils'</a> split method which can split strings based on the character or string you want to split.</p>\n\n<p>Method signature: </p>\n\n<pre><code>public static String[] split(String str, char separatorChar);\n</code></pre>\n\n<p>In your case, you want to split a string when there is a \"-\".</p>\n\n<p>You can simply do as follows:</p>\n\n<pre><code>String str = \"004-034556\";\n\nString split[] = StringUtils.split(str,\"-\");\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>004\n034556\n</code></pre>\n\n<p>Assume that if <code>-</code> does not exists in your string, it returns the given string, and you will not get any exception.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can try like this also</p>\n\n<pre><code> String concatenated_String=\"hi^Hello\";\n\n String split_string_array[]=concatenated_String.split(\"\\\\^\");\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The fastest way, which also consumes the least resource could be:</p>\n\n<pre><code>String s = \"abc-def\";\nint p = s.indexOf('-');\nif (p &gt;= 0) {\n    String left = s.substring(0, p);\n    String right = s.substring(p + 1);\n} else {\n  // s does not contain '-'\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can split a string by a line break by using the following statement:</p>\n\n<pre><code>String textStr[] = yourString.split(\"\\\\r?\\\\n\");\n</code></pre>\n\n<p>You can split a string by a hyphen/character by using the following statement:</p>\n\n<pre><code>String textStr[] = yourString.split(\"-\");\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Assuming, that</p>\n\n<ul>\n<li>you don't really need regular expressions for your split</li>\n<li>you happen to already use apache commons lang in your app</li>\n</ul>\n\n<p>The easiest way is to use <a href=\"http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/StringUtils.html#split%28java.lang.String,%20char%29\" rel=\"nofollow\">StringUtils#split(java.lang.String, char)</a>. That's more convenient than the one provided by Java out of the box if you don't need regular expressions. Like its manual says, it works like this:</p>\n\n<pre><code>A null input String returns null.\n\n StringUtils.split(null, *)         = null\n StringUtils.split(\"\", *)           = []\n StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n</code></pre>\n\n<p>I would recommend using commong-lang, since usually it contains a lot of stuff that's usable. However, if you don't need it for anything else than doing a split, then implementing yourself or escaping the regex is a better option.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>public class MySplit {\n\n    public static String[] mySplit(String text, String delimiter) {\n        java.util.List&lt;String&gt; parts = new java.util.ArrayList&lt;String&gt;();\n\n        text += delimiter;\n\n        for (int i = text.indexOf(delimiter), j=0; i != -1;) {\n            String temp = text.substring(j,i);\n            if(temp.trim().length() != 0) {\n                parts.add(temp);\n            }\n            j = i + delimiter.length();\n            i = text.indexOf(delimiter,j);\n        }\n\n        return parts.toArray(new String[0]);\n    }\n\n\n    public static void main(String[] args) {\n        String str = \"004-034556\";\n        String delimiter = \"-\";\n        String result[] = mySplit(str, delimiter);\n        for(String s:result)\n            System.out.println(s);\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For simple use cases <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-\" rel=\"nofollow\"><code>String.split()</code></a> should do the job. If you use guava, there is also a <a href=\"https://code.google.com/p/guava-libraries/wiki/StringsExplained#Splitter\" rel=\"nofollow\">Splitter</a> class which allows chaining of different string operations and supports <a href=\"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/CharMatcher.html\" rel=\"nofollow\">CharMatcher</a>:</p>\n\n<pre><code>Splitter.on('-')\n       .trimResults()\n       .omitEmptyStrings()\n       .split(string);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong><em>String Split with multiple characters using Regex.</em></strong> </p>\n\n<pre><code>public class StringSplitTest{\n     public static void main(String args[]){\n        String s = \" ;String; String; String; String, String; String;;String;String; String; String; ;String;String;String;String\";\n        //String[] strs = s.split(\"[,\\\\s\\\\;]\");\n        String[] strs = s.split(\"[,\\\\;]\");\n        System.out.println(\"Substrings length:\"+strs.length);\n        for ( int i=0; i &lt; strs.length; i++){\n        System.out.println(\"Str[\"+i+\"]:\"+strs[i]);\n        }\n\n     }\n  }\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>Substrings length:17\nStr[0]:\nStr[1]:String\nStr[2]: String\nStr[3]: String\nStr[4]: String\nStr[5]: String\nStr[6]: String\nStr[7]:\nStr[8]:String\nStr[9]:String\nStr[10]: String\nStr[11]: String\nStr[12]:\nStr[13]:String\nStr[14]:String\nStr[15]:String\nStr[16]:String\n</code></pre>\n\n<p>But do not expect same output across all JDK versions. I have seen one <a href=\"https://bugs.openjdk.java.net/browse/JDK-8043324\" rel=\"nofollow\">bug</a> which exists in some JDK versions where first null string has been ignored. This bug is not present in latest jdk version but it exists in some versions between jdk 1.7 late versions and 1.8 early versions.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One way to do this is to run through the String in a for-each loop and use the required split character.</p>\n\n<pre><code>public class StringSplitTest {\n\n    public static void main(String[] arg){\n        String str = \"004-034556\";\n        String split[] = str.split(\"-\");\n        System.out.println(\"The split parts of the String are\");\n        for(String s:split)\n        System.out.println(s);\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>The split parts of the String are:\n004\n034556\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sometimes if you want to split <code>string containing +</code> then it won't split; instead you will get a <code>runtime error</code>. In that case, first <code>replace + to _</code> and then split:</p>\n\n<pre><code> this.text=text.replace(\"/\", \"_\");\n            String temp[]=text.split(\"_\");\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html#setRoundingMode(java.math.RoundingMode)\"><code>setRoundingMode</code></a>, set the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/math/RoundingMode.html\"><code>RoundingMode</code></a> explicitly to handle your issue with the half-even round, then use the format pattern for your required output.</p>\n\n<p>Example:</p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#.####\");\ndf.setRoundingMode(RoundingMode.CEILING);\nfor (Number n : Arrays.asList(12, 123.12345, 0.23, 0.1, 2341234.212431324)) {\n    Double d = n.doubleValue();\n    System.out.println(df.format(d));\n}\n</code></pre>\n\n<p>gives the output:</p>\n\n<pre><code>12\n123.1235\n0.23\n0.1\n12341234.2125\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Assuming <code>value</code> is a <code>double</code>, you can do:</p>\n\n<pre><code>(double)Math.round(value * 100000d) / 100000d\n</code></pre>\n\n<p>That's for 5 digits precision. The number of zeros indicate the number of decimals.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>new BigDecimal(String.valueOf(double)).setScale(yourScale, BigDecimal.ROUND_HALF_UP);\n</code></pre>\n\n<p>will get you a <code>BigDecimal</code>.  To get the string out of it, just call that <code>BigDecimal</code>'s <code>toString</code> method, or the <code>toPlainString</code> method for Java 5+ for a plain format string.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also use the </p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#.00000\");\ndf.format(0.912385);\n</code></pre>\n\n<p>to make sure you have the trailing 0's.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As some others have noted, the correct answer is to use either <code>DecimalFormat</code> or <code>BigDecimal</code>. Floating-point doesn't <em>have</em> decimal places so you cannot possibly round/truncate to a specific number of them in the first place. You have to work in a decimal radix, and that is what those two classes do.</p>\n\n<p>I am posting the following code as a counter-example to all the answers in this thread and indeed all over StackOverflow (and elsewhere) that recommend multiplication followed by truncation followed by division. It is incumbent on advocates of this technique to explain why the following code produces the wrong output in over 92% of cases.</p>\n\n<pre><code>public class RoundingCounterExample\n{\n\n    static float roundOff(float x, int position)\n    {\n        float a = x;\n        double temp = Math.pow(10.0, position);\n        a *= temp;\n        a = Math.round(a);\n        return (a / (float)temp);\n    }\n\n    public static void main(String[] args)\n    {\n        float a = roundOff(0.0009434f,3);\n        System.out.println(\"a=\"+a+\" (a % .001)=\"+(a % 0.001));\n        int count = 0, errors = 0;\n        for (double x = 0.0; x &lt; 1; x += 0.0001)\n        {\n            count++;\n            double d = x;\n            int scale = 2;\n            double factor = Math.pow(10, scale);\n            d = Math.round(d * factor) / factor;\n            if ((d % 0.01) != 0.0)\n            {\n                System.out.println(d + \" \" + (d % 0.01));\n                errors++;\n            }\n        }\n        System.out.println(count + \" trials \" + errors + \" errors\");\n    }\n}\n</code></pre>\n\n<p>Output of this program:</p>\n\n<pre><code>10001 trials 9251 errors\n</code></pre>\n\n<p><strong>EDIT:</strong> I note that this post has been here for nearly six months and no explanations have been forthcoming. Draw your own conclusions.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Suppose you have</p>\n\n<pre><code>double d = 9232.129394d;\n</code></pre>\n\n<p>you can use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html\" rel=\"nofollow\"><code>BigDecimal</code></a></p>\n\n<pre><code>BigDecimal bd = new BigDecimal(d).setScale(2, RoundingMode.HALF_EVEN);\nd = bd.doubleValue();\n</code></pre>\n\n<p>or without BigDecimal </p>\n\n<pre><code>d = Math.round(d*100)/100.0d;\n</code></pre>\n\n<p>with both solutions <code>d == 9232.13</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the DecimalFormat class.</p>\n\n<pre><code>double d = 3.76628729;\n\nDecimalFormat newFormat = new DecimalFormat(\"#.##\");\ndouble twoDecimal =  Double.valueOf(newFormat.format(d));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Real's Java How-to <a href=\"http://www.rgagnon.com/javadetails/java-0016.html\">posts</a> this solution, which is also compatible for versions before Java 1.6. </p>\n\n<pre><code>BigDecimal bd = new BigDecimal(Double.toString(d));\nbd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);\nreturn bd.doubleValue();\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>double myNum = .912385;\nint precision = 10000; //keep 4 digits\nmyNum= Math.floor(myNum * precision +.5)/precision;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>@Milhous: the decimal format for rounding is excellent:</p>\n\n<blockquote>\n  <p>You can also use the </p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#.00000\");\ndf.format(0.912385);\n</code></pre>\n  \n  <p>to make sure you have the trailing 0's.</p>\n</blockquote>\n\n<p>I would add that this method is very good at providing an actual\nnumeric, rounding mechanism - not only visually, but also when processing.</p>\n\n<p>Hypothetical: you have to implement a rounding mechanism into a GUI\nprogram. To alter the accuracy / precision of a result output simply \nchange the caret format (i.e. within the brackets).  So that:</p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#0.######\");\ndf.format(0.912385);\n</code></pre>\n\n<p>would return as output: <code>0.912385</code></p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#0.#####\");\ndf.format(0.912385);\n</code></pre>\n\n<p>would return as output: <code>0.91239</code></p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#0.####\");\ndf.format(0.912385);\n</code></pre>\n\n<p>would return as output: <code>0.9124</code></p>\n\n<p>[EDIT: also if the caret format is like so (\"#0.############\") and you\nenter a decimal, e.g. 3.1415926, for argument's sake, DecimalFormat\ndoes not produce any garbage (e.g. trailing zeroes) and will return:\n<code>3.1415926</code> .. if you're that way inclined. Granted, it's a little verbose\nfor the liking of some dev's - but hey, it's got a low memory footprint\nduring processing and is very easy to implement.]</p>\n\n<p>So essentially, the beauty of DecimalFormat is that it simultaneously handles the string \nappearance - as well as the level of rounding precision set. Ergo: you \nget two benefits for the price of one code implementation. ;)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could use the following utility method-</p>\n\n<pre><code>public static double round(double valueToRound, int numberOfDecimalPlaces)\n{\n    double multipicationFactor = Math.pow(10, numberOfDecimalPlaces);\n    double interestedInZeroDPs = valueToRound * multipicationFactor;\n    return Math.round(interestedInZeroDPs) / multipicationFactor;\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use BigDecimal</p>\n\n<pre><code>BigDecimal value = new BigDecimal(\"2.3\");\nvalue = value.setScale(0, RoundingMode.UP);\nBigDecimal value1 = new BigDecimal(\"-2.3\");\nvalue1 = value1.setScale(0, RoundingMode.UP);\nSystem.out.println(value + \"n\" + value1);\n</code></pre>\n\n<p>Refer: <a href=\"http://www.javabeat.net/precise-rounding-of-decimals-using-rounding-mode-enumeration/\" rel=\"nofollow\">http://www.javabeat.net/precise-rounding-of-decimals-using-rounding-mode-enumeration/</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try this: org.apache.commons.math3.util.Precision.round(double x, int scale)</p>\n\n<p>See: <a href=\"http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/util/Precision.html\" rel=\"nofollow\">http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/util/Precision.html</a></p>\n\n<p>Apache Commons Mathematics Library homepage is: <a href=\"http://commons.apache.org/proper/commons-math/index.html\" rel=\"nofollow\">http://commons.apache.org/proper/commons-math/index.html</a></p>\n\n<p>The internal implemetation of this method is:</p>\n\n<pre><code>public static double round(double x, int scale) {\n    return round(x, scale, BigDecimal.ROUND_HALF_UP);\n}\n\npublic static double round(double x, int scale, int roundingMethod) {\n    try {\n        return (new BigDecimal\n               (Double.toString(x))\n               .setScale(scale, roundingMethod))\n               .doubleValue();\n    } catch (NumberFormatException ex) {\n        if (Double.isInfinite(x)) {\n            return x;\n        } else {\n            return Double.NaN;\n        }\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a summary of what you can use if you want the result as String:</p>\n\n<ol>\n<li><p><a href=\"http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html#setRoundingMode%28java.math.RoundingMode%29\" rel=\"nofollow\">DecimalFormat#setRoundingMode()</a>:</p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#.#####\");\ndf.setRoundingMode(RoundingMode.HALF_UP);\nString str1 = df.format(0.912385)); // 0.91239\n</code></pre></li>\n<li><p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#setScale(int,%20java.math.RoundingMode)\" rel=\"nofollow\">BigDecimal#setScale()</a></p>\n\n<pre><code>String str2 = new BigDecimal(0.912385)\n    .setScale(5, BigDecimal.ROUND_HALF_UP)\n    .toString();\n</code></pre></li>\n</ol>\n\n<p>Here is a suggestion of what libraries you can use if you want <code>double</code> as a result. I wouldn't recommend it for string conversion, though, as double may not be able to represent what you want exactly (see e.g. <a href=\"http://stackoverflow.com/q/3730019/2032064\">here</a>):</p>\n\n<ol>\n<li><p><a href=\"http://commons.apache.org/proper/commons-math/javadocs/api-3.5/org/apache/commons/math3/util/Precision.html\" rel=\"nofollow\">Precision</a> from Apache Commons Math </p>\n\n<pre><code>double rounded = Precision.round(0.912385, 5, BigDecimal.ROUND_HALF_UP);\n</code></pre></li>\n<li><p><a href=\"http://dst.lbl.gov/ACSSoftware/colt/api/cern/jet/math/Functions.html\" rel=\"nofollow\">Functions</a> from Colt</p>\n\n<pre><code>double rounded = Functions.round(0.00001).apply(0.912385)\n</code></pre></li>\n<li><p><a href=\"http://weka.sourceforge.net/doc.stable/weka/core/Utils.html#roundDouble(double,%20int)\" rel=\"nofollow\">Utils</a> from Weka</p>\n\n<pre><code>double rounded = Utils.roundDouble(0.912385, 5)\n</code></pre></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you really want decimal numbers for calculation (and not only for output), do not use a binary-based floating point format like double. Use BigDecimal or any other decimal-based format. \u2013 Pa\u016dlo Ebermann </p>\n\n<hr>\n\n<p>I do use BigDecimal for calculations, but bear in mind it is dependent on the size of\nnumbers you're dealing with.  In most my implementations, i find parsing from double or\ninteger to Long is sufficient enough for very large number calculations.  In fact, i've\nrecently used parsed-to-Long to get accurate representations (as opposed to hex results)\nin a gui for numbers as big as ################################# characters (as an \nexample).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The code snippet below shows how to display n digits.  The trick is to set variable pp to 1 followed by n zeros.  In the example below, variable pp value has 5 zeros, so 5 digits will be displayed.</p>\n\n<pre><code>double pp = 10000;\n\ndouble myVal = 22.268699999999967;\nString needVal = \"22.2687\";\n\ndouble i = (5.0/pp);\n\nString format = \"%10.4f\";\nString getVal = String.format(format,(Math.round((myVal +i)*pp)/pp)-i).trim();\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're using <code>DecimalFormat</code> to convert <code>double</code> to <code>String</code>, it's very straightforward:</p>\n\n<pre><code>DecimalFormat formatter = new DecimalFormat(\"0.0##\");\nformatter.setRoundingMode(RoundingMode.HALF_UP);\n\ndouble num = 1.234567;\nreturn formatter.format(num);\n</code></pre>\n\n<p>There are several <code>RoundingMode</code> enum values to select from, depending upon the behaviour you require.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I agree with the chosen answer to use <code>DecimalFormat</code> --- or alternatively <code>BigDecimal</code>.</p>\n\n<p>However if you <em>do</em> want to round the double value and get a <code>double</code> value result, you can use <code>org.apache.commons.math3.util.Precision.round(..)</code> as mentioned above. The implementation uses <code>BigDecimal</code>, is slow and creates garbage. </p>\n\n<p>A similar but fast and garbage-free method is provided by the <code>DoubleRounder</code> utility in the decimal4j library:</p>\n\n<pre><code> double a = DoubleRounder.round(2.0/3.0, 3);\n double b = DoubleRounder.round(2.0/3.0, 3, RoundingMode.DOWN);\n double c = DoubleRounder.round(1000.0d, 17);\n double d = DoubleRounder.round(90080070060.1d, 9);\n System.out.println(a);\n System.out.println(b);\n System.out.println(c);\n System.out.println(d);\n</code></pre>\n\n<p>Will output</p>\n\n<pre><code> 0.667\n 0.666\n 1000.0\n 9.00800700601E10\n</code></pre>\n\n<p>See\n<a href=\"https://github.com/tools4j/decimal4j/wiki/DoubleRounder-Utility\" rel=\"nofollow\">https://github.com/tools4j/decimal4j/wiki/DoubleRounder-Utility</a></p>\n\n<p><em>Disclaimer:</em> I am involved in the decimal4j project.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Where <em>dp</em> = decimal place you want,\nand <em>value</em> is a double.</p>\n\n<pre><code>    double p = Math.pow(10d, dp);\n\n    double result = Math.round(value * p)/p;\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The version number shown describes the version of the JRE the class file is compatible with.</p>\n\n<p>The reported major numbers are:</p>\n\n<pre><code>J2SE 8 = 52,\nJ2SE 7 = 51,\nJ2SE 6.0 = 50,\nJ2SE 5.0 = 49,\nJDK 1.4 = 48,\nJDK 1.3 = 47,\nJDK 1.2 = 46,\nJDK 1.1 = 45\n</code></pre>\n\n<p>(Source: <a href=\"http://en.wikipedia.org/wiki/Java_class_file\">http://en.wikipedia.org/wiki/Java_class_file</a>)</p>\n\n<p>To fix the actual problem you should try to either run the Java code with a newer version of Java JRE or specify the target parameter to the Java compiler to instruct the compiler to create code compatible with earlier Java versions. </p>\n\n<p>For example, in order to generate class files compatible with Java 1.4, use the following command line:</p>\n\n<pre><code>javac -target 1.4 HelloWorld.java\n</code></pre>\n\n<p>With newer versions of the Java compiler you are likely to get a warning about the bootstrap class path not being set. More information about this error is available in blog post <em><a href=\"https://blogs.oracle.com/darcy/entry/bootclasspath_older_source\">New javac warning for setting an older source without bootclasspath</a></em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>java.lang.UnsupportedClassVersionError</code> happens because of a higher JDK during compile time and lower JDK during runtime.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Eclipse, I just went to menu command <em>Window</em> -&gt; <em>Preferences</em> -&gt; <em>Java</em> -&gt; <em>Compiler</em> and then set \"Compiler compliance level\" to 1.6.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Don't worry, I got it solved.</p>\n\n<p>It is actually simple - you need to install BOTH JRE / JDK with the same version.</p>\n\n<p>JRE 6 -&gt; JDK 6</p>\n\n<p>JRE 7 -&gt; JDK 7</p>\n\n<p>And so on.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This error means you're trying to load a Java \"class\" file that was compiled with a newer version of Java than you have installed.</p>\n\n<p>For example, your <code>.class</code> file could have been compiled for JDK 7, and you're trying to run it with JDK 6.</p>\n\n<p>So the solution is to either:</p>\n\n<ul>\n<li>Upgrade your Java runtime or</li>\n<li><p>Recompile the class if you have the source, using your local Java compiler (if you have one). </p>\n\n<p>javac FileName.java</p></li>\n</ul>\n\n<p>For developers, this can happen if another developer checks in a .class file, and they've got a newer version of java than you have!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You are trying to run your program with a Java version that does not support the version in which the code was compiled. <strong>So basically you must have compiled your code with a higher version and trying to run it using a lower version.</strong></p>\n\n<p>As you are getting</p>\n\n<pre><code>Unsupported major.minor version 51.0\n</code></pre>\n\n<p>and version <strong>51.0</strong> corresponds to <strong>J2SE 7</strong> you have most probably compiled your code in Java 7 and trying to run it using a lower version. Check what <code>java -version</code> displays. It should be the Java 7 version. If not make appropriate changes in the PATH/JAVA_HOME. Or you can compile with the same version you are trying to run the code. If the configurations are confusing you can always give absolute path <code>/home/user/jdk1.7.0_11/bin/javac</code> and <code>/home/user/jdk1.7.0_11/bin/java</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can have some JAR library compiled in Java 7, and you have only Java 6 as Java Runtime. It  could happen with some new libraries.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had a similar situation on Mac, and the following process worked for me:</p>\n\n<p>In the terminal, type</p>\n\n<pre><code>vi ~/.profile\n</code></pre>\n\n<p>Then add this line in the file, and save</p>\n\n<pre><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk&lt;version&gt;.jdk/Contents/Home\n</code></pre>\n\n<p>where version is the one on your computer, such as <code>1.7.0_25</code>.</p>\n\n<p>Exit the editor, then type the following command make it become effective</p>\n\n<pre><code>source ~/.profile \n</code></pre>\n\n<p>Then type java -version to check the result</p>\n\n<pre><code>java -version \n</code></pre>\n\n<p>What is <code>.profile</code> file?</p>\n\n<blockquote>\n  <p>.profile file is a hidden file. It is an optional file which tells the system which commands to run when the user whose profile file it is logs in. For example, if my username is bruno and there is a .profile file in /Users/bruno/, all of its contents will be executed during the log-in procedure.</p>\n</blockquote>\n\n<p>Source: <a href=\"http://computers.tutsplus.com/tutorials/speed-up-your-terminal-workflow-with-command-aliases-and-profile--mac-30515\" rel=\"nofollow\">http://computers.tutsplus.com/tutorials/speed-up-your-terminal-workflow-with-command-aliases-and-profile--mac-30515</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When I installed <a href=\"http://en.wikipedia.org/wiki/Java_Development_Kit\">JDK</a> 1.7, the problem got solved.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have faced the same problem when I was working with an <a href=\"http://en.wikipedia.org/wiki/Apache_Ant\" rel=\"nofollow\">Ant</a> script to build my application.</p>\n\n<p>I use <a href=\"http://en.wikipedia.org/wiki/Eclipse_%28software%29\" rel=\"nofollow\">Eclipse</a> for my application development, and I changed the compiler version in build properties of the project. But that didn't work for me. Then I found out that I can provide the compiler version in the Ant script.</p>\n\n<p>I modified the Ant script at the section where it compile Java files.</p>\n\n<pre><code>&lt;target name=\"build-java\" depends=\"prepare-build\"&gt;\n    &lt;echo message=\"Compiling java files\"/&gt;\n    &lt;javac ....\n           target=\"1.5\"...\n    &lt;/javac&gt;\n&lt;/target&gt;\n</code></pre>\n\n<p>This worked for me to resolve the unsupported major minor issue.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I got the same problem with a project written in 1.7 and tried to execute in 1.6.</p>\n\n<p>My solution in Eclipse:</p>\n\n<ul>\n<li><p>Right click on your Project <strong>Properties -&gt; Java Build Path -&gt; Libraries</strong></p></li>\n<li><p>Select your JRE System Library and click <strong>Edit</strong> on the right, and choose the target JRE.</p></li>\n<li><p>Now go to <strong>Java Compiler</strong> on the left, and change the <strong>Compiler compliance level</strong> to your target. </p></li>\n</ul>\n\n<p>That worked for me.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Eclipse's menu <em>Window</em> -&gt; <em>Preferences</em> -&gt; <em>Java</em> -&gt; <em>Compiler</em> check also \"Configure Project Specific Settings\".</p>\n\n<p>If you stil have the error with same Java version: try to delete build folder of your project manually. Then restart Eclipse.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As answered elsewhere by several people, the Java program is being run on an older version of Java than the one it was compiled it for. It needs to be \"crosscompiled\" for backward compatibility. To put it another way, there is a mismatch between source and target Java versions.</p>\n\n<p>Changing options in Eclipse menus don't answer the original poster, who said he/she is not using Eclipse. On OpenJDK javac version 1.7, you can crosscompile for 1.6 if you use parameters <code>-source</code> and <code>-target</code>, plus provide the <em>rt.jar</em> -file of the target version (that is, the older one) at compile time. If you actually install the 1.6 JRE, you can point to its installation (for example, /usr/lib/jvm/java-6-openjdk-i386/jre/lib/rt.jar on Ubuntu, /usr/jdk/jdk1.6.0_60/jre/lib/rt.jar on SunOS apparently. Sorry, I don't know where it is on a Windows system). Like so:</p>\n\n<pre><code>javac -source 1.6 -target -1.6 -bootclasspath /usr/lib/jvm/java-6-openjdk-i386/jre/lib/rt.jar HelloWorld.java\n</code></pre>\n\n<p>It looks like you can just download rt.jar from the Internet, and point to it. This is not too elegant though:</p>\n\n<pre><code>javac -source 1.6 -target -1.6 -bootclasspath ./rt.jar HelloWorld.java\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Based on this...</p>\n\n<pre><code>J2SE 8 = 52\nJ2SE 7 = 51\nJ2SE 6.0 = 50\nJ2SE 5.0 = 49\nJDK 1.4 = 48\nJDK 1.3 = 47\nJDK 1.2 = 46\nJDK 1.1 = 45\n</code></pre>\n\n<p>In Eclipse, right click on project in package explorer:</p>\n\n<p><strong>Build Path</strong> -&gt; <strong>Configure Build Path</strong></p>\n\n<p>Under:</p>\n\n<p><strong>Java Build Path</strong> -&gt; <strong>Libraries</strong> -&gt; <strong>Add Library</strong> -&gt; <strong>JRE System Library</strong> -&gt; <strong>Installed JREs</strong> -&gt; <strong>Search</strong>.</p>\n\n<p>Add the required JRE by selecting the library in the list available after the search is complete.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had the same error message when running Ant from Eclipse, but the other solutions mentioned here didn't solve my problem. The funny thing was that running Ant from the Windows command line was running fine, so it had to be a configuration issue within Eclipse.</p>\n\n<p>It turned out that under Eclipse you can specify the environment that Ant should be running with and this was set as a JRE instead of a JDK.</p>\n\n<ul>\n<li>Go to: Run -&gt; External Tools -&gt; External Tools Configurations ...</li>\n<li>Select the Ant build.xml for your project (if you have multiple projects)</li>\n<li>Activate the Tab 'JRE'</li>\n<li>Here was selected 'Separate JRE: jre6'. When I changed this to a JDK from the 1.6 or 1.7 series, the error was gone.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If somebody is facing the same issue while using <a href=\"http://en.wikipedia.org/wiki/Apache_Maven\" rel=\"nofollow\">Maven</a>, you can cross compile using the plug-in <em><a href=\"http://maven.apache.org/plugins/maven-compiler-plugin/examples/set-compiler-source-and-target.html\" rel=\"nofollow\">Maven Compiler</a></em>.</p>\n\n<h3> </h3>\n\n<pre><code> &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.6&lt;/source&gt;\n                    &lt;target&gt;1.6&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n       .....\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The most common issue is misconfiguration of your <code>JAVA_HOME</code> variable which should point to the right Java Development Kit library, if you've multiple installed.</p>\n\n<p>See also:</p>\n\n<h3>Debian/Ubuntu</h3>\n\n<p>To check which java (openjdk) you've installed, check via:</p>\n\n<pre><code>dpkg -l \"openjdk*\" | grep ^i\n</code></pre>\n\n<p>You may use:</p>\n\n<pre><code>sudo update-alternatives --config java\n</code></pre>\n\n<p>to select the alternative java version.</p>\n\n<p>Or check which are available for install:</p>\n\n<pre><code>sudo apt-cache search ^openjdk\n</code></pre>\n\n<p>Then you can install, for example:</p>\n\n<pre><code>sudo apt-get install openjdk-7-jre\n</code></pre>\n\n<h3>Fedora, Oracle Linux, Red Hat</h3>\n\n<p>Install/upgrade appropriate package via:</p>\n\n<pre><code>yum install java-1.7.0-openjdk java-1.7.0-openjdk-devel\n</code></pre>\n\n<blockquote>\n  <p>The <code>java-1.7.0-openjdk</code> package contains just the Java Runtime Environment. If you want to develop Java programs then install the <code>java-1.7.0-openjdk-devel</code> package.</p>\n</blockquote>\n\n<h3>BSD</h3>\n\n<p>There is an OpenJDK 7 package in the FreeBSD Ports collection called <a href=\"http://www.freshports.org/java/openjdk7/\" rel=\"nofollow\">openjdk7</a> which probably needs to be reconfigured.</p>\n\n<p>See: <a href=\"https://wiki.openjdk.java.net/display/BSDPort/Main\" rel=\"nofollow\">OpenJDK wiki page</a>.</p>\n\n<h3>Windows</h3>\n\n<p>Just install appropriate  Java SE Development Kit library from the <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\" rel=\"nofollow\">Oracle site</a> or install </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Had this problem when I reverted to Java 6 and tried to run classes previously compiled with Java 7. What worked for me was Preferences &gt; java &gt; compiler --&gt; set compliance level to 1.6 and crucially \"configure project settings\".. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Today, this error message appeared in our <a href=\"http://en.wikipedia.org/wiki/Apache_Tomcat\" rel=\"nofollow\">Tomcat</a> 7 on <a href=\"http://en.wikipedia.org/wiki/List_of_Ubuntu_releases#Ubuntu_12.04_LTS_.28Precise_Pangolin.29\" rel=\"nofollow\">Ubuntu 12.04.2 LTS</a> (Precise Pangolin):</p>\n\n<blockquote>\n  <p>/var/log/tomcat7/localhost.2014-04-08.log: <br>\n  Apr 8, 2014 9:00:55 AM org.apache.catalina.core.StandardContext filterStart <br>\n  SEVERE: Exception starting filter struts2 <br>\n  java.lang.UnsupportedClassVersionError: controller/ReqAccept : Unsupported major.minor version 51.0 (unable to load class controller.ReqAccept)</p>\n</blockquote>\n\n<p>The <a href=\"http://en.wikipedia.org/wiki/Apache_Struts\" rel=\"nofollow\">Struts</a> application is compiled with Java 7.</p>\n\n<p>It turned out, someone uses \"service tomcat [stop/start]\" to restart Tomcat 7,</p>\n\n<blockquote>\n  <p>$ ps -ef | grep java<br>\n  tomcat7  31783 1 32 20:13 ? 00:00:03 /usr/lib/jvm/default-java/bin/java...<br>\n  $ /usr/lib/jvm/default-java/bin/java -version<br>\n  java version \"1.6.0_27\"</p>\n</blockquote>\n\n<p>Which causes the \"Unsupported major.minor version 51.0\" error.</p>\n\n<p>When we used \"/etc/init.d/tomcat7 [stop/start]\" to restart Tomcat 7, the problem was solved.</p>\n\n<blockquote>\n  <p>$ ps -ef | grep java<br>\n  tomcat7  31886 1 80 20:24 ? 00:00:10 /usr/local/java/jdk1.7.0_15/bin/java<br>\n  $ /usr/local/java/jdk1.7.0_15/bin/java -version<br>\n  java version \"1.7.0_15\"</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have used a higher version of the JDK to compile and trying to run from a lower version of JDK/<a href=\"http://en.wikipedia.org/wiki/Java_Virtual_Machine#Execution_environment\" rel=\"nofollow\">JRE</a>.</p>\n\n<p>To check this, see the version information:</p>\n\n<pre><code>javac -version\n\njava -version\n</code></pre>\n\n<p>They will be different and javac will have a higher version number.</p>\n\n<p>To get around this, run using java from the JDK version or if you have a newer JRE/JDK that will work as well.</p>\n\n<p><code>which javac</code> will tell you the location, for example, <code>/usr/bin/javac</code>. Just run directly using <code>/usr/bin/java &lt;program&gt;</code>.</p>\n\n<p>OR you can set the environment variable as a permanent solution.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had the problem whereby I was having to run a Maven compilation on my project from the command line in order to run my unit tests; if I made a change to the test class and let Eclipse automatically recompile it, then I got the \"Unsupported major.minor version 51.0\" error.</p>\n\n<p>I do have both JDK6 and JDK7 installed, but all my JRE settings were pointing at 1.6, both in the pom and from the project properties page in Eclipse. No amount of Maven Update Project and/or refreshing solved this.</p>\n\n<p>Finally I tried closing the project and re-opening it, and this seemed to fix it! HTH</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have compiled your Java class with JDK 7 and you are trying to run same class on JDK 6 .</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I solved it. I ran:</p>\n\n<pre><code>JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386\n</code></pre>\n\n<p>The error is misleading, <code>Unsupported major.minor version 51.0</code>. This gives the impression that version 51 (Java 7) is not supported. And we should use Java 6.</p>\n\n<p>The error should have been:</p>\n\n<blockquote>\n  <p>The current Java version, 50, is unsupported. Use Java version 7 (51:0 and greater) instead.`</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ul>\n<li>Install JDK 7.0.55 and set the Java for <a href=\"http://en.wikipedia.org/wiki/Eclipse_%28software%29\" rel=\"nofollow\">Eclipse</a> for JDK 7.0.55.</li>\n<li>Build the project with JDK 7.0.55 by configuring on build path JDK 7.0.55.</li>\n<li>Set the compiler in Eclipse for JDK 7.0.55 by menu <em>Windows</em> -&gt; <em>Preferences</em> -&gt; <em>Java</em> -&gt; <em>Compiler</em> - choose 1.7.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>How do I fix it?</p>\n</blockquote>\n\n<p>This error means that the JRE that is being used to execute your class code does not recognise the version of Java used. Usually because the version of Java that generated your class file (i.e. compiled it) is newer.</p>\n\n<p>To fix it, you can either </p>\n\n<p>a) Compile your Java sources with the same, or older, version of the Java compiler as will be sued to run it. i.e. Install the appropriate JDK</p>\n\n<p>b) Compile your Java sources with the newer version of the Java compiler but in compatibility mode. i.e. use the <code>-target</code> parameter.</p>\n\n<p>c) Run your compiled classes in a JRE that is the same, or newer, version as the JDK used to compile the classes.</p>\n\n<p>You can check the versions you are currently using with\n<code>javac -version</code> for the compiler, and <code>java -version</code> for the runtime.</p>\n\n<blockquote>\n  <p>Should I install the JDK, and setup my path variable to the JDK\n  instead of JRE?</p>\n</blockquote>\n\n<p>For compilation, certainly, install and configure the specific JDK that you want.</p>\n\n<p>For runtime, you can use the one that comes with the JDK or a standalone JRE, but regardless, make sure that you have installed the right versions and that you have configured your PATH such that there are no surprises.</p>\n\n<blockquote>\n  <p>What is the difference between the PATH variable in JRE or JDK?</p>\n</blockquote>\n\n<p>The PATH environment variable tells the command shell where to look for the command you type. When you type <code>java</code>, the command shell interpreter will look through all the locations specified in the <code>PATH</code> variable, from left to right, to find the appropriate <code>java</code> runtime executable to run. If you have multiple versions of Java installed - i.e. you have the <code>java</code> executable in multiple locations specified in the PATH variable, then the first one encountered when going from left to right will be the one that is executed.</p>\n\n<p>The compiler command is <code>javac</code> and only comes with the JDK. The runtime command is <code>java</code> and comes with the JDK and is in the JRE.</p>\n\n<p>It is likely that you have one version (51.0 = Java 7) of <code>javac</code> installed, and you also have the same version of <code>java</code> installed, but that another previous version of <code>java</code> is appearing earlier in the PATH and so is being invoked instead of the one you expect.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Oh Mac OS X I was able to solve this problem by setting the JAVA_HOME variable:</p>\n\n<pre><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>First let's get some basics right...</p>\n\n<p>JRE is a component in <a href=\"http://en.wikipedia.org/wiki/NetBeans\" rel=\"nofollow\">NetBeans</a>/<a href=\"http://en.wikipedia.org/wiki/Eclipse_%28software%29\" rel=\"nofollow\">Eclipse</a>/standalone that is going to provide you with libraries, JVM, Java plugins &amp; Java web start. Note that it does not provide compliers or debuggers.</p>\n\n<p>JDK is the superset of JRE along with compliers and debuggers.</p>\n\n<p>So when you have your default library as a JRE instead of JDK, you are going to have a nice time importing stuff, but it won't compile.</p>\n\n<p>Instead, set your path to JDK (I use NetBeans, and I set them using netbeans.conf in netbeans/etc/netbeans.conf and change the path).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I got the same problem, and I fixed this issue by <a href=\"http://brianoneill.blogspot.in/2012/11/installing-jdk-7-on-mac-os-x.html\" rel=\"nofollow\">this solution</a> on a Mac. I hope it helps someone.  It's because the system doesn't know about the newer version of JDK, and it still points to the old JDK.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had the same situation but any of above tips didn't help :) In our environment we had tomcat running as a service on Windows. We installed Java 1.7 and set up JAVA_HOME on this version. Off course the sources were built on Java 1.7. Nevertheless the tomcat said that it use previous version of JVM. After a deep analized turn out that the Tomcat service installed on Windows still keeping the old value for JAVA_HOME pointing to Java 1.6. After installing new Tomcat service everything were resolved.\nSo the conclusion is: When you change java version and tomcat running as a service, you have to reinstall tomcat service.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I got the same issue with Spring Source Tool(STS) IDE for grails project. I checked the installed java version and the project java version were 1.7.*. Later I found that in <strong>GGTS.ini</strong> file the java version was set to 1.6:</p>\n\n<p><strong>Solution:</strong></p>\n\n<p>-Dosgi.requiredJavaVersion=1.6 changed to<br>\n-Dosgi.requiredJavaVersion=1.7<br>\nAdd below two lines before -vmargs<br>\n-vm<br>\njdk1.7.0_21/jre/lib/amd64/server/libjvm.so</p>\n\n<p>Problem solved. Happy coding.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Important note:</strong> </p>\n\n<p><strong>This code can break in multiple ways</strong>. If you intend to use the code provided, be sure to read the comments as well to be aware of the implications. For example, values can no longer be retrieved by their key. (<code>get</code> always returns <code>null</code>.)*</p>\n\n<hr>\n\n<p>It seems much easier than all of the foregoing. Use a TreeMap as follows:</p>\n\n<pre><code>public class Testing {\n    public static void main(String[] args) {\n        HashMap map = new HashMap();\n        ValueComparator bvc = new ValueComparator(map);\n        TreeMap sorted_map = new TreeMap(bvc);\n\n        map.put(\"A\", 99.5);\n        map.put(\"B\", 67.4);\n        map.put(\"C\", 67.4);\n        map.put(\"D\", 67.3);\n\n        System.out.println(\"unsorted map: \" + map);\n        sorted_map.putAll(map);\n        System.out.println(\"results: \" + sorted_map);\n    }\n}\n\nclass ValueComparator implements Comparator {\n    Map base;\n\n    public ValueComparator(Map base) {\n        this.base = base;\n    }\n\n    // Note: this comparator imposes orderings that are inconsistent with\n    // equals.\n    public int compare(String a, String b) {\n        if (base.get(a) &gt;= base.get(b)) {\n            return -1;\n        } else {\n            return 1;\n        } // returning 0 would merge keys\n    }\n}</code></pre>\n\n<p>Output:\n    </p><pre>\n    unsorted map: {D=67.3, A=99.5, B=67.4, C=67.4}\n    results: {D=67.3, B=67.4, C=67.4, A=99.5}\n    </pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a generic-friendly version you're free to use:</p>\n\n<pre><code>import java.util.*;\n\npublic class MapUtil\n{\n    public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; \n        sortByValue( Map&lt;K, V&gt; map )\n    {\n        List&lt;Map.Entry&lt;K, V&gt;&gt; list =\n            new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;( map.entrySet() );\n        Collections.sort( list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()\n        {\n            public int compare( Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2 )\n            {\n                return (o1.getValue()).compareTo( o2.getValue() );\n            }\n        } );\n\n        Map&lt;K, V&gt; result = new LinkedHashMap&lt;K, V&gt;();\n        for (Map.Entry&lt;K, V&gt; entry : list)\n        {\n            result.put( entry.getKey(), entry.getValue() );\n        }\n        return result;\n    }\n}\n</code></pre>\n\n<p>And an associated JUnit4 test so you don't have to take my word for it:</p>\n\n<pre><code>import java.util.*;\nimport org.junit.*;\n\npublic class MapUtilTest\n{\n    @Test\n    public void testSortByValue()\n    {\n        Random random = new Random(System.currentTimeMillis());\n        Map&lt;String, Integer&gt; testMap = new HashMap&lt;String, Integer&gt;(1000);\n        for(int i = 0 ; i &lt; 1000 ; ++i) {\n            testMap.put( \"SomeString\" + random.nextInt(), random.nextInt());\n        }\n\n        testMap = MapUtil.sortByValue( testMap );\n        Assert.assertEquals( 1000, testMap.size() );\n\n        Integer previous = null;\n        for(Map.Entry&lt;String, Integer&gt; entry : testMap.entrySet()) {\n            Assert.assertNotNull( entry.getValue() );\n            if (previous != null) {\n                Assert.assertTrue( entry.getValue() &gt;= previous );\n            }\n            previous = entry.getValue();\n        }\n    }\n\n}\n</code></pre>\n\n<p>Java 7 Version</p>\n\n<pre><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; \n    sortByValue( Map&lt;K, V&gt; map )\n{\n    List&lt;Map.Entry&lt;K, V&gt;&gt; list =\n        new LinkedList&lt;&gt;( map.entrySet() );\n    Collections.sort( list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()\n    {\n        @Override\n        public int compare( Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2 )\n        {\n            return (o1.getValue()).compareTo( o2.getValue() );\n        }\n    } );\n\n    Map&lt;K, V&gt; result = new LinkedHashMap&lt;&gt;();\n    for (Map.Entry&lt;K, V&gt; entry : list)\n    {\n        result.put( entry.getKey(), entry.getValue() );\n    }\n    return result;\n}\n</code></pre>\n\n<p>Java 8 Version</p>\n\n<pre><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; \n    sortByValue( Map&lt;K, V&gt; map )\n{\n      Map&lt;K,V&gt; result = new LinkedHashMap&lt;&gt;();\n     Stream &lt;Entry&lt;K,V&gt;&gt; st = map.entrySet().stream();\n\n     st.sorted(Comparator.comparing(e -&gt; e.getValue()))\n          .forEachOrdered(e -&gt;result.put(e.getKey(),e.getValue()));\n\n     return result;\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Three 1-line answers...</strong></p>\n\n<p>I would use <s>Google Collections</s> <a href=\"http://code.google.com/p/guava-libraries/\"><strong>Guava</strong></a> to do this - if your values are <code>Comparable</code> then you can use</p>\n\n<pre><code>valueComparator = Ordering.natural().onResultOf(Functions.forMap(map))\n</code></pre>\n\n<p>Which will create a function (object) for the map [that takes any of the keys as input, returning the respective value], and then apply natural (comparable) ordering to them [the values].</p>\n\n<p>If they're not comparable, then you'll need to do something along the lines of</p>\n\n<pre><code>valueComparator = Ordering.from(comparator).onResultOf(Functions.forMap(map)) \n</code></pre>\n\n<p>These may be applied to a TreeMap (as <code>Ordering</code> extends <code>Comparator</code>), or a <a href=\"http://stackoverflow.com/questions/109383/how-to-sort-a-mapkey-value-on-the-values-in-java/109389#109389\">LinkedHashMap after some sorting</a></p>\n\n<p><em>NB</em>: If you are going to use a TreeMap, remember that if a comparison == 0, then the item is already in the list (which will happen if you have multiple values that compare the same).  To alleviate this, you could add your key to the comparator like so (presuming that your keys and values are <code>Comparable</code>):</p>\n\n<pre><code>valueComparator = Ordering.natural().onResultOf(Functions.forMap(map)).compound(Ordering.natural())\n</code></pre>\n\n<p>= <em>Apply natural ordering to the value mapped by the key, and compound that with the natural ordering of the key</em></p>\n\n<p>Note that this will still not work if your keys compare to 0, but this should be sufficient for most <code>comparable</code> items (as <code>hashCode</code>, <code>equals</code> and <code>compareTo</code> are often in sync...)</p>\n\n<p>See <a href=\"http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/collect/Ordering.html#onResultOf%28com.google.common.base.Function%29\">Ordering.onResultOf()</a> and <a href=\"http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Functions.html#forMap%28java.util.Map%29\">Functions.forMap()</a>.</p>\n\n<h2>Implementation</h2>\n\n<p>So now that we've got a comparator that does what we want, we need to get a result from it. </p>\n\n<pre><code>map = ImmutableSortedMap.copyOf(myOriginalMap, valueComparator);\n</code></pre>\n\n<p>Now this will most likely work work, but:</p>\n\n<ol>\n<li>needs to be done given a complete finished map</li>\n<li>Don't try the comparators above on a <code>TreeMap</code>; there's no point trying to compare an inserted key when it doesn't have a value until after the put, i.e., it will break really fast</li>\n</ol>\n\n<p>Point 1 is a bit of a deal-breaker for me; google collections is incredibly lazy (which is good: you can do pretty much every operation in an instant; the real work is done when you start using the result), and this requires copying a <em>whole</em> map!</p>\n\n<h2>\"Full\" answer/Live sorted map by values</h2>\n\n<p>Don't worry though; if you were obsessed enough with having a \"live\" map sorted in this manner, you could solve not one but both(!) of the above issues with something crazy like the following:</p>\n\n<p><strong>Note: This has changed significantly in June 2012 - the previous code could never work: an internal HashMap is required to lookup the values without creating an infinite loop between the <code>TreeMap.get()</code> -&gt; <code>compare()</code> and <code>compare()</code> -&gt; <code>get()</code></strong></p>\n\n<pre><code>import static org.junit.Assert.assertEquals;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport com.google.common.base.Functions;\nimport com.google.common.collect.Ordering;\n\nclass ValueComparableMap&lt;K extends Comparable&lt;K&gt;,V&gt; extends TreeMap&lt;K,V&gt; {\n    //A map for doing lookups on the keys for comparison so we don't get infinite loops\n    private final Map&lt;K, V&gt; valueMap;\n\n    ValueComparableMap(final Ordering&lt;? super V&gt; partialValueOrdering) {\n        this(partialValueOrdering, new HashMap&lt;K,V&gt;());\n    }\n\n    private ValueComparableMap(Ordering&lt;? super V&gt; partialValueOrdering,\n            HashMap&lt;K, V&gt; valueMap) {\n        super(partialValueOrdering //Apply the value ordering\n                .onResultOf(Functions.forMap(valueMap)) //On the result of getting the value for the key from the map\n                .compound(Ordering.natural())); //as well as ensuring that the keys don't get clobbered\n        this.valueMap = valueMap;\n    }\n\n    public V put(K k, V v) {\n        if (valueMap.containsKey(k)){\n            //remove the key in the sorted set before adding the key again\n            remove(k);\n        }\n        valueMap.put(k,v); //To get \"real\" unsorted values for the comparator\n        return super.put(k, v); //Put it in value order\n    }\n\n    public static void main(String[] args){\n        TreeMap&lt;String, Integer&gt; map = new ValueComparableMap&lt;String, Integer&gt;(Ordering.natural());\n        map.put(\"a\", 5);\n        map.put(\"b\", 1);\n        map.put(\"c\", 3);\n        assertEquals(\"b\",map.firstKey());\n        assertEquals(\"a\",map.lastKey());\n        map.put(\"d\",0);\n        assertEquals(\"d\",map.firstKey());\n        //ensure it's still a map (by overwriting a key, but with a new value) \n        map.put(\"d\", 2);\n        assertEquals(\"b\", map.firstKey());\n        //Ensure multiple values do not clobber keys\n        map.put(\"e\", 2);\n        assertEquals(5, map.size());\n        assertEquals(2, (int) map.get(\"e\"));\n        assertEquals(2, (int) map.get(\"d\"));\n    }\n }\n</code></pre>\n\n<p>When we put, we ensure that the hash map has the value for the comparator, and then put to the TreeSet for sorting. But before that we check the hash map to see that the key is not actually a duplicate. Also, the comparator that we create will also include the key so that duplicate values don't delete the non-duplicate keys (due to == comparison).\nThese 2 items are <em>vital</em> for ensuring the map contract is kept; if you think you don't want that, then you're almost at the point of reversing the map entirely (to <code>Map&lt;V,K&gt;</code>).</p>\n\n<p>The constructor would need to be called as </p>\n\n<pre><code> new ValueComparableMap(Ordering.natural());\n //or\n new ValueComparableMap(Ordering.from(comparator));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://www.programmersheaven.com/download/49349/download.aspx\">http://www.programmersheaven.com/download/49349/download.aspx</a></p>\n\n<pre><code>static Map sortByValue(Map map) {\n     List list = new LinkedList(map.entrySet());\n     Collections.sort(list, new Comparator() {\n          public int compare(Object o1, Object o2) {\n               return ((Comparable) ((Map.Entry) (o1)).getValue())\n              .compareTo(((Map.Entry) (o2)).getValue());\n          }\n     });\n\n    Map result = new LinkedHashMap();\n    for (Iterator it = list.iterator(); it.hasNext();) {\n        Map.Entry entry = (Map.Entry)it.next();\n        result.put(entry.getKey(), entry.getValue());\n    }\n    return result;\n} \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java 8 offers a new answer: convert the entries into a stream, and use the comparator combinators from Map.Entry:</p>\n\n<pre><code>Stream&lt;Map.Entry&lt;K,V&gt;&gt; sorted = map.entrySet().stream()\n                                   .sorted(Map.Entry.comparingByValue());\n</code></pre>\n\n<p>This will let you consume the entries sorted in ascending order of value.  If you want descending value, simply reverse the comparator:</p>\n\n<pre><code>Stream&lt;Map.Entry&lt;K,V&gt;&gt; sorted = map.entrySet().stream()\n                                   .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()));\n</code></pre>\n\n<p>If the values are not comparable, you can pass an explicit comparator:</p>\n\n<pre><code>Stream&lt;Map.Entry&lt;K,V&gt;&gt; sorted = map.entrySet().stream()\n                                   .sorted(Map.Entry.comparingByValue(comparator));\n</code></pre>\n\n<p>You can then proceed to use other stream operations to consume the data.  For example, if you want the top 10 in a new map:</p>\n\n<pre><code>Map&lt;K,V&gt; topTen = map.entrySet().stream()\n                           .sorted(Map.Entry.byKeyComparator().reversed());\n                           .limit(10)\n                           .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n</code></pre>\n\n<p>Or print to <code>System.out</code>:</p>\n\n<pre><code>map.entrySet().stream()\n              .sorted(Map.Entry.comparingByValue())\n              .forEachOrdered(System.out::println);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sorting the keys requires the Comparator to look up each value for each comparison. A more scalable solution would use the entrySet directly, since then the value would be immediately available for each comparison (although I haven't backed this up by numbers).</p>\n\n<p>Here's a generic version of such a thing:</p>\n\n<pre><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; List&lt;K&gt; getKeysSortedByValue(Map&lt;K, V&gt; map) {\n    final int size = map.size();\n    final List&lt;Map.Entry&lt;K, V&gt;&gt; list = new ArrayList&lt;Map.Entry&lt;K, V&gt;&gt;(size);\n    list.addAll(map.entrySet());\n    final ValueComparator&lt;V&gt; cmp = new ValueComparator&lt;V&gt;();\n    Collections.sort(list, cmp);\n    final List&lt;K&gt; keys = new ArrayList&lt;K&gt;(size);\n    for (int i = 0; i &lt; size; i++) {\n        keys.set(i, list.get(i).getKey());\n    }\n    return keys;\n}\n\nprivate static final class ValueComparator&lt;V extends Comparable&lt;? super V&gt;&gt;\n                                     implements Comparator&lt;Map.Entry&lt;?, V&gt;&gt; {\n    public int compare(Map.Entry&lt;?, V&gt; o1, Map.Entry&lt;?, V&gt; o2) {\n        return o1.getValue().compareTo(o2.getValue());\n    }\n}\n</code></pre>\n\n<p>There are ways to lessen memory rotation for the above solution. The first ArrayList created could for instance be re-used as a return value; this would require suppression of some generics warnings, but it might be worth it for re-usable library code. Also,  the Comparator does not have to be re-allocated at every invocation.</p>\n\n<p>Here's a more efficient albeit less appealing version:</p>\n\n<pre><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; List&lt;K&gt; getKeysSortedByValue2(Map&lt;K, V&gt; map) {\n    final int size = map.size();\n    final List reusedList = new ArrayList(size);\n    final List&lt;Map.Entry&lt;K, V&gt;&gt; meView = reusedList;\n    meView.addAll(map.entrySet());\n    Collections.sort(meView, SINGLE);\n    final List&lt;K&gt; keyView = reusedList;\n    for (int i = 0; i &lt; size; i++) {\n        keyView.set(i, meView.get(i).getKey());\n    }\n    return keyView;\n}\n\nprivate static final Comparator SINGLE = new ValueComparator();\n</code></pre>\n\n<p>Finally, if you need to continously access the sorted information (rather than just sorting it once in a while), you can use an additional multi map. Let me know if you need more details...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The commons-collections library contains a solution called <a href=\"http://commons.apache.org/collections/api-release/org/apache/commons/collections/bidimap/TreeBidiMap.html\">TreeBidiMap</a>. Or, you could have a look at the Google Collections API. It has <a href=\"http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/collect/TreeMultimap.html\">TreeMultimap</a> which you could use.</p>\n\n<p>And if you don't want to use these framework... they come with source code.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've looked at the given answers, but a lot of them are more complicated than needed or remove map elements when several keys have same value.</p>\n\n<p>Here is a solution that I think fits better:</p>\n\n<pre><code>public static &lt;K, V extends Comparable&lt;V&gt;&gt; Map&lt;K, V&gt; sortByValues(final Map&lt;K, V&gt; map) {\n    Comparator&lt;K&gt; valueComparator =  new Comparator&lt;K&gt;() {\n        public int compare(K k1, K k2) {\n            int compare = map.get(k2).compareTo(map.get(k1));\n            if (compare == 0) return 1;\n            else return compare;\n        }\n    };\n    Map&lt;K, V&gt; sortedByValues = new TreeMap&lt;K, V&gt;(valueComparator);\n    sortedByValues.putAll(map);\n    return sortedByValues;\n}\n</code></pre>\n\n<p>Note that the map is sorted from the highest value to the lowest.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>While I agree that the constant need to sort a map is probably a smell, I think the following code is the easiest way to do it without using a different data structure.</p>\n\n<pre><code>public class MapUtilities {\n\npublic static &lt;K, V extends Comparable&lt;V&gt;&gt; List&lt;Entry&lt;K, V&gt;&gt; sortByValue(Map&lt;K, V&gt; map) {\n\tList&lt;Entry&lt;K, V&gt;&gt; entries = new ArrayList&lt;Entry&lt;K, V&gt;&gt;(map.entrySet());\n\tCollections.sort(entries, new ByValue&lt;K, V&gt;());\n\treturn entries;\n}\n\nprivate static class ByValue&lt;K, V extends Comparable&lt;V&gt;&gt; implements Comparator&lt;Entry&lt;K, V&gt;&gt; {\n\tpublic int compare(Entry&lt;K, V&gt; o1, Entry&lt;K, V&gt; o2) {\n\t\treturn o1.getValue().compareTo(o2.getValue());\n\t}\n}\n</code></pre>\n\n<p>}</p>\n\n<p>And here is an embarrassingly incomplete unit test:</p>\n\n<pre><code>public class MapUtilitiesTest extends TestCase {\npublic void testSorting() {\n\tHashMap&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();\n\tmap.put(\"One\", 1);\n\tmap.put(\"Two\", 2);\n\tmap.put(\"Three\", 3);\n\n\tList&lt;Map.Entry&lt;String, Integer&gt;&gt; sorted = MapUtilities.sortByValue(map);\n\tassertEquals(\"First\", \"One\", sorted.get(0).getKey());\n\tassertEquals(\"Second\", \"Two\", sorted.get(1).getKey());\n\tassertEquals(\"Third\", \"Three\", sorted.get(2).getKey());\n}\n</code></pre>\n\n<p>}</p>\n\n<p>The result is a sorted list of Map.Entry objects, from which you can obtain the keys and values.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To accomplish this with the new features in Java 8:</p>\n\n<pre><code>import static java.util.Map.Entry.comparingByValue;\nimport static java.util.stream.Collectors.toList;\n\n&lt;K, V&gt; List&lt;Entry&lt;K, V&gt;&gt; sort(Map&lt;K, V&gt; map, Comparator&lt;? super V&gt; comparator) {\n    return map.entrySet().stream().sorted(comparingByValue(comparator)).collect(toList());\n}\n</code></pre>\n\n<p>The entries are ordered by their values using the given comparator. Alternatively, if your values are mutually comparable, no explicit comparator is needed:</p>\n\n<pre><code>&lt;K, V extends Comparable&lt;? super V&gt;&gt; List&lt;Entry&lt;K, V&gt;&gt; sort(Map&lt;K, V&gt; map) {\n    return map.entrySet().stream().sorted(comparingByValue()).collect(toList());\n}\n</code></pre>\n\n<p>The returned list is a snapshot of the given map at the time this method is called, so neither will reflect subsequent changes to the other. For a live iterable view of the map:</p>\n\n<pre><code>&lt;K, V extends Comparable&lt;? super V&gt;&gt; Iterable&lt;Entry&lt;K, V&gt;&gt; sort(Map&lt;K, V&gt; map) {\n    return () -&gt; map.entrySet().stream().sorted(comparingByValue()).iterator();\n}\n</code></pre>\n\n<p>The returned iterable creates a fresh snapshot of the given map each time it's iterated, so barring concurrent modification, it will always reflect the current state of the map.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The answer voted for the most does not work when you have 2 items that equals.\nthe TreeMap leaves equal values out.</p>\n\n<p>the exmaple:\nunsorted map</p>\n\n<pre>\nkey/value: D/67.3\nkey/value: A/99.5\nkey/value: B/67.4\nkey/value: C/67.5\nkey/value: E/99.5\n</pre>\n\n<p>results</p>\n\n<pre>\nkey/value: A/99.5\nkey/value: C/67.5\nkey/value: B/67.4\nkey/value: D/67.3\n</pre>\n\n<p>So leaves out E!!</p>\n\n<p>For me it worked fine to adjust the comparator, if it equals do not return 0 but -1.</p>\n\n<p>in the example:</p>\n\n<blockquote>\n  <blockquote>\n    <p>class ValueComparator implements Comparator {</p>\n    \n    <p>Map base;\n      public ValueComparator(Map base) {\n          this.base = base;\n      }</p>\n    \n    <p>public int compare(Object a, Object b) {</p>\n\n<pre><code>if((Double)base.get(a) &lt; (Double)base.get(b)) {\n  return 1;\n} else if((Double)base.get(a) == (Double)base.get(b)) {\n  return -1;\n} else {\n  return -1;\n}\n</code></pre>\n    \n    <p>}\n    }</p>\n  </blockquote>\n</blockquote>\n\n<p>now it returns:</p>\n\n<p>unsorted map:</p>\n\n<pre>\nkey/value: D/67.3\nkey/value: A/99.5\nkey/value: B/67.4\nkey/value: C/67.5\nkey/value: E/99.5\n</pre>\n\n<p>results:</p>\n\n<pre>\nkey/value: A/99.5\nkey/value: E/99.5\nkey/value: C/67.5\nkey/value: B/67.4\nkey/value: D/67.3\n</pre>\n\n<p>as a response to Aliens (2011 nov. 22):\nI Am using this solution for a map of Integer Id's and names, but the idea is the same, so might be the code above is not correct (I will write it in a test and give you the correct code), this is the code for a Map sorting, based on the solution above:</p>\n\n<pre><code>package nl.iamit.util;\n\nimport java.util.Comparator;\nimport java.util.Map;\n\npublic class Comparators {\n\n\n    public static class MapIntegerStringComparator implements Comparator {\n\n        Map&lt;Integer, String&gt; base;\n\n        public MapIntegerStringComparator(Map&lt;Integer, String&gt; base) {\n            this.base = base;\n        }\n\n        public int compare(Object a, Object b) {\n\n            int compare = ((String) base.get(a))\n                    .compareTo((String) base.get(b));\n            if (compare == 0) {\n                return -1;\n            }\n            return compare;\n        }\n    }\n\n\n}\n</code></pre>\n\n<p>and this is the test class (I just tested it, and this works for the Integer, String Map:</p>\n\n<pre><code>package test.nl.iamit.util;\n\nimport java.util.HashMap;\nimport java.util.TreeMap;\nimport nl.iamit.util.Comparators;\nimport org.junit.Test;\nimport static org.junit.Assert.assertArrayEquals;\n\npublic class TestComparators {\n\n\n    @Test\n    public void testMapIntegerStringComparator(){\n        HashMap&lt;Integer, String&gt; unSoretedMap = new HashMap&lt;Integer, String&gt;();\n        Comparators.MapIntegerStringComparator bvc = new Comparators.MapIntegerStringComparator(\n                unSoretedMap);\n        TreeMap&lt;Integer, String&gt; sorted_map = new TreeMap&lt;Integer, String&gt;(bvc);\n        //the testdata:\n        unSoretedMap.put(new Integer(1), \"E\");\n        unSoretedMap.put(new Integer(2), \"A\");\n        unSoretedMap.put(new Integer(3), \"E\");\n        unSoretedMap.put(new Integer(4), \"B\");\n        unSoretedMap.put(new Integer(5), \"F\");\n\n        sorted_map.putAll(unSoretedMap);\n\n        Object[] targetKeys={new Integer(2),new Integer(4),new Integer(3),new Integer(1),new Integer(5) };\n        Object[] currecntKeys=sorted_map.keySet().toArray();\n\n        assertArrayEquals(targetKeys,currecntKeys);\n    }\n}\n</code></pre>\n\n<p>here is the code for the Comparator of a Map:</p>\n\n<pre><code>public static class MapStringDoubleComparator implements Comparator {\n\n    Map&lt;String, Double&gt; base;\n\n    public MapStringDoubleComparator(Map&lt;String, Double&gt; base) {\n        this.base = base;\n    }\n\n    //note if you want decending in stead of ascending, turn around 1 and -1\n    public int compare(Object a, Object b) {\n        if ((Double) base.get(a) == (Double) base.get(b)) {\n            return 0;\n        } else if((Double) base.get(a) &lt; (Double) base.get(b)) {\n            return -1;\n        }else{\n            return 1;\n        }\n    }\n}\n</code></pre>\n\n<p>and this is the testcase for this:</p>\n\n<pre><code>@Test\npublic void testMapStringDoubleComparator(){\n    HashMap&lt;String, Double&gt; unSoretedMap = new HashMap&lt;String, Double&gt;();\n    Comparators.MapStringDoubleComparator bvc = new Comparators.MapStringDoubleComparator(\n            unSoretedMap);\n    TreeMap&lt;String, Double&gt; sorted_map = new TreeMap&lt;String, Double&gt;(bvc);\n    //the testdata:\n    unSoretedMap.put(\"D\",new Double(67.3));\n    unSoretedMap.put(\"A\",new Double(99.5));\n    unSoretedMap.put(\"B\",new Double(67.4));\n    unSoretedMap.put(\"C\",new Double(67.5));\n    unSoretedMap.put(\"E\",new Double(99.5));\n\n    sorted_map.putAll(unSoretedMap);\n\n    Object[] targetKeys={\"D\",\"B\",\"C\",\"E\",\"A\"};\n    Object[] currecntKeys=sorted_map.keySet().toArray();\n\n    assertArrayEquals(targetKeys,currecntKeys);\n}\n</code></pre>\n\n<p>of cource you can make this a lot more generic, but I just needed it for 1 case (the Map)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use a generic comparator such as :</p>\n\n<pre><code>final class MapValueComparator&lt;K,V extends Comparable&lt;V&gt;&gt; implements Comparator&lt;K&gt; {\n\n    private Map&lt;K,V&gt; map;\n\n    private MapValueComparator() {\n        super();\n    }\n\n    public MapValueComparator(Map&lt;K,V&gt; map) {\n        this();\n        this.map = map;\n    }\n\n    public int compare(K o1, K o2) {\n        return map.get(o1).compareTo(map.get(o2));\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Create customized comparator and use it while creating new TreeMap object.</p>\n\n<pre><code>class MyComparator implements Comparator&lt;Object&gt; {\n\n    Map&lt;String, Integer&gt; map;\n\n    public MyComparator(Map&lt;String, Integer&gt; map) {\n        this.map = map;\n    }\n\n    public int compare(Object o1, Object o2) {\n\n        if (map.get(o2) == map.get(o1))\n            return 1;\n        else\n            return ((Integer) map.get(o2)).compareTo((Integer)     \n                                                            map.get(o1));\n\n    }\n}\n</code></pre>\n\n<p>Use the below code in your main func</p>\n\n<pre><code>    Map&lt;String, Integer&gt; lMap = new HashMap&lt;String, Integer&gt;();\n    lMap.put(\"A\", 35);\n    lMap.put(\"B\", 75);\n    lMap.put(\"C\", 50);\n    lMap.put(\"D\", 50);\n\n    MyComparator comparator = new MyComparator(lMap);\n\n    Map&lt;String, Integer&gt; newMap = new TreeMap&lt;String, Integer&gt;(comparator);\n    newMap.putAll(lMap);\n    System.out.println(newMap);\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>{B=75, D=50, C=50, A=35}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With Java 8, you can use the <a href=\"http://download.java.net/jdk8/docs/api/java/util/stream/package-summary.html\">streams api</a> to do it in a significantly less verbose way:</p>\n\n<pre><code>Map&lt;K, V&gt; sortedMap = map.entrySet().stream()\n                         .sorted(comparing(Entry::getValue))\n                         .collect(toMap(Entry::getKey, Entry::getValue,\n                                  (e1,e2) -&gt; e1, LinkedHashMap::new));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is a variation of Anthony's answer, which doesn't work if there are duplicate values:</p>\n\n<pre><code>public static &lt;K, V extends Comparable&lt;V&gt;&gt; Map&lt;K, V&gt; sortMapByValues(final Map&lt;K, V&gt; map) {\n    Comparator&lt;K&gt; valueComparator =  new Comparator&lt;K&gt;() {\n        public int compare(K k1, K k2) {\n            final V v1 = map.get(k1);\n            final V v2 = map.get(k2);\n\n            /* Not sure how to handle nulls ... */\n            if (v1 == null) {\n                return (v2 == null) ? 0 : 1;\n            }\n\n            int compare = v2.compareTo(v1);\n            if (compare != 0)\n            {\n                return compare;\n            }\n            else\n            {\n                Integer h1 = k1.hashCode();\n                Integer h2 = k2.hashCode();\n                return h2.compareTo(h1);\n            }\n        }\n    };\n    Map&lt;K, V&gt; sortedByValues = new TreeMap&lt;K, V&gt;(valueComparator);\n    sortedByValues.putAll(map);\n    return sortedByValues;\n}\n</code></pre>\n\n<p>Note that it's rather up in the air how to handle nulls. </p>\n\n<p>One important advantage of this approach is that it actually returns a Map, unlike some of the other solutions offered here.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Instead of using <code>Collections.sort</code> as some do I'd suggest using <code>Arrays.sort</code>. Actually what <code>Collections.sort</code> does is something like this:</p>\n\n<pre><code>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list) {\n    Object[] a = list.toArray();\n    Arrays.sort(a);\n    ListIterator&lt;T&gt; i = list.listIterator();\n    for (int j=0; j&lt;a.length; j++) {\n        i.next();\n        i.set((T)a[j]);\n    }\n}\n</code></pre>\n\n<p>It just calls <code>toArray</code> on the list and then uses <code>Arrays.sort</code>. This way all the map entries will be copied three times: once from the map to the temporary list (be it a LinkedList or ArrayList), then to the temporary array and finally to the new map.</p>\n\n<p>My solution ommits this one step as it does not create unnecessary LinkedList. Here is the code, generic-friendly and performance-optimal:</p>\n\n<pre><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; sortByValue(Map&lt;K, V&gt; map) \n{\n    @SuppressWarnings(\"unchecked\")\n    Map.Entry&lt;K,V&gt;[] array = map.entrySet().toArray(new Map.Entry[map.size()]);\n\n    Arrays.sort(array, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;() \n    {\n        public int compare(Map.Entry&lt;K, V&gt; e1, Map.Entry&lt;K, V&gt; e2) \n        {\n            return e1.getValue().compareTo(e2.getValue());\n        }\n    });\n\n    Map&lt;K, V&gt; result = new LinkedHashMap&lt;K, V&gt;();\n    for (Map.Entry&lt;K, V&gt; entry : array)\n        result.put(entry.getKey(), entry.getValue());\n\n    return result;\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Major problem. If you use the first answer (Google takes you here), change the comparator to add an equal clause, otherwise you cannot get values from the sorted_map by keys:</p>\n\n<pre><code>public int compare(String a, String b) {\n        if (base.get(a) &gt; base.get(b)) {\n            return 1;\n        } else if (base.get(a) &lt; base.get(b)){\n            return -1;\n        } \n\n        return 0;\n        // returning 0 would merge keys\n    }\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is just too complicated. Maps were not supposed to do such job as sorting them by Value. The easiest way is to create your own Class so it fits your requirement.</p>\n\n<p>In example lower you are supposed to add TreeMap a comparator at place where * is. But by java API it gives comparator only keys, not values. All of examples stated here is based on 2 Maps. One Hash and one new Tree. Which is odd.</p>\n\n<p>The example:</p>\n\n<pre><code>Map&lt;Driver driver, Float time&gt; map = new TreeMap&lt;Driver driver, Float time&gt;(*);\n</code></pre>\n\n<p>So change the map into a set this way:</p>\n\n<pre><code>ResultComparator rc = new ResultComparator();\nSet&lt;Results&gt; set = new TreeSet&lt;Results&gt;(rc);\n</code></pre>\n\n<p>You will create class <code>Results</code>,</p>\n\n<pre><code>public class Results {\n    private Driver driver;\n    private Float time;\n\n    public Results(Driver driver, Float time) {\n        this.driver = driver;\n        this.time = time;\n    }\n\n    public Float getTime() {\n        return time;\n    }\n\n    public void setTime(Float time) {\n        this.time = time;\n    }\n\n    public Driver getDriver() {\n        return driver;\n    }\n\n    public void setDriver (Driver driver) {\n        this.driver = driver;\n    }\n}\n</code></pre>\n\n<p>and the Comparator class:</p>\n\n<pre><code>public class ResultsComparator implements Comparator&lt;Results&gt; {\n    public int compare(Results t, Results t1) {\n        if (t.getTime() &lt; t1.getTime()) {\n            return 1;\n        } else if (t.getTime() == t1.getTime()) {\n            return 0;\n        } else {\n            return -1;\n        }\n    }\n}\n</code></pre>\n\n<p>This way you can easily add more dependencies.</p>\n\n<p>And as the last point I'll add simple iterator:</p>\n\n<pre><code>Iterator it = set.iterator();\nwhile (it.hasNext()) {\n    Results r = (Results)it.next();\n    System.out.println( r.getDriver().toString\n        //or whatever that is related to Driver class -getName() getSurname()\n        + \" \"\n        + r.getTime()\n        );\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Based on @devinmoore code, a map sorting methods using generics and supporting both ascending and descending ordering.</p>\n\n<pre><code>/**\n * Sort a map by it's keys in ascending order. \n *  \n * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.\n * @author Maxim Veksler\n */\npublic static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByKey(final Map&lt;K, V&gt; map) {\n\treturn sortMapByKey(map, SortingOrder.ASCENDING);\n}\n\n/**\n * Sort a map by it's values in ascending order.\n *  \n * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.\n * @author Maxim Veksler\n */\npublic static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByValue(final Map&lt;K, V&gt; map) {\n\treturn sortMapByValue(map, SortingOrder.ASCENDING);\n}\n\n/**\n * Sort a map by it's keys.\n *  \n * @param sortingOrder {@link SortingOrder} enum specifying requested sorting order. \n * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.\n * @author Maxim Veksler\n */\npublic static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByKey(final Map&lt;K, V&gt; map, final SortingOrder sortingOrder) {\n\tComparator&lt;Map.Entry&lt;K, V&gt;&gt; comparator = new Comparator&lt;Entry&lt;K,V&gt;&gt;() {\n\t\tpublic int compare(Entry&lt;K, V&gt; o1, Entry&lt;K, V&gt; o2) {\n\t\t\treturn comparableCompare(o1.getKey(), o2.getKey(), sortingOrder);\n\t\t}\n\t};\n\n\treturn sortMap(map, comparator);\n}\n\n/**\n * Sort a map by it's values.\n *  \n * @param sortingOrder {@link SortingOrder} enum specifying requested sorting order. \n * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.\n * @author Maxim Veksler\n */\npublic static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByValue(final Map&lt;K, V&gt; map, final SortingOrder sortingOrder) {\n\tComparator&lt;Map.Entry&lt;K, V&gt;&gt; comparator = new Comparator&lt;Entry&lt;K,V&gt;&gt;() {\n\t\tpublic int compare(Entry&lt;K, V&gt; o1, Entry&lt;K, V&gt; o2) {\n\t\t\treturn comparableCompare(o1.getValue(), o2.getValue(), sortingOrder);\n\t\t}\n\t};\n\n\treturn sortMap(map, comparator);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate static &lt;T&gt; int comparableCompare(T o1, T o2, SortingOrder sortingOrder) {\n\tint compare = ((Comparable&lt;T&gt;)o1).compareTo(o2);\n\n\tswitch (sortingOrder) {\n\tcase ASCENDING:\n\t\treturn compare;\n\tcase DESCENDING:\n\t\treturn (-1) * compare;\n\t}\n\n\treturn 0;\n}\n\n/**\n * Sort a map by supplied comparator logic.\n *  \n * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.\n * @author Maxim Veksler\n */\npublic static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMap(final Map&lt;K, V&gt; map, final Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparator) {\n\t// Convert the map into a list of key,value pairs.\n\tList&lt;Map.Entry&lt;K, V&gt;&gt; mapEntries = new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;(map.entrySet());\n\n\t// Sort the converted list according to supplied comparator.\n\tCollections.sort(mapEntries, comparator);\n\n\t// Build a new ordered map, containing the same entries as the old map.  \n\tLinkedHashMap&lt;K, V&gt; result = new LinkedHashMap&lt;K, V&gt;(map.size() + (map.size() / 20));\n\tfor(Map.Entry&lt;K, V&gt; entry : mapEntries) {\n\t\t// We iterate on the mapEntries list which is sorted by the comparator putting new entries into \n\t\t// the targeted result which is a sorted map. \n\t\tresult.put(entry.getKey(), entry.getValue());\n\t}\n\n\treturn result;\n}\n\n/**\n * Sorting order enum, specifying request result sort behavior.\n * @author Maxim Veksler\n *\n */\npublic static enum SortingOrder {\n\t/**\n\t * Resulting sort will be from smaller to biggest.\n\t */\n\tASCENDING,\n\t/**\n\t * Resulting sort will be from biggest to smallest.\n\t */\n\tDESCENDING\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is an OO solution (i.e., doesn't use <code>static</code> methods):</p>\n\n<pre><code>import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class SortableValueMap&lt;K, V extends Comparable&lt;V&gt;&gt;\n  extends LinkedHashMap&lt;K, V&gt; {\n  public SortableValueMap() { }\n\n  public SortableValueMap( Map&lt;K, V&gt; map ) {\n    super( map );\n  }\n\n  public void sortByValue() {\n    List&lt;Map.Entry&lt;K, V&gt;&gt; list = new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;( entrySet() );\n\n    Collections.sort( list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;() {\n      public int compare( Map.Entry&lt;K, V&gt; entry1, Map.Entry&lt;K, V&gt; entry2 ) {\n        return entry1.getValue().compareTo( entry2.getValue() );\n      }\n    });\n\n    clear();\n\n    for( Map.Entry&lt;K, V&gt; entry : list ) {\n      put( entry.getKey(), entry.getValue() );\n    }\n  }\n\n  private static void print( String text, Map&lt;String, Double&gt; map ) {\n    System.out.println( text );\n\n    for( String key : map.keySet() ) {\n      System.out.println( \"key/value: \" + key + \"/\" + map.get( key ) );\n    }\n  }\n\n  public static void main( String[] args ) {\n    SortableValueMap&lt;String, Double&gt; map =\n      new SortableValueMap&lt;String, Double&gt;();\n\n    map.put( \"A\", 67.5 );\n    map.put( \"B\", 99.5 );\n    map.put( \"C\", 82.4 );\n    map.put( \"D\", 42.0 );\n\n    print( \"Unsorted map\", map );\n    map.sortByValue();\n    print( \"Sorted map\", map );\n  }\n}\n</code></pre>\n\n<p>Hereby donated to the public domain.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since <strong><em>TreeMap&lt;&gt; does not work</em></strong> for values that can be equal, I used this:</p>\n\n<pre><code>private &lt;K, V extends Comparable&lt;? super V&gt;&gt; List&lt;Entry&lt;K, V&gt;&gt; sort(Map&lt;K, V&gt; map)     {\n    List&lt;Map.Entry&lt;K, V&gt;&gt; list = new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;(map.entrySet());\n    Collections.sort(list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;() {\n        public int compare(Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2) {\n            return o1.getValue().compareTo(o2.getValue());\n        }\n    });\n\n    return list;\n}\n</code></pre>\n\n<p>You might want to put <strong><em>list</em></strong> in a <strong><em>LinkedHashMap</em></strong>, but if you're only going to iterate over it right away, that's superfluous...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Some simple changes in order to have a sorted map with pairs that have duplicate values. In the compare method (class ValueComparator) when values are equal do not return 0 but return the result of comparing the 2 keys. Keys are distinct in a map so you succeed to keep duplicate values (which are sorted by keys by the way). So the above example could be modified like this:</p>\n\n<pre><code>    public int compare(Object a, Object b) {\n\n        if((Double)base.get(a) &lt; (Double)base.get(b)) {\n          return 1;\n        } else if((Double)base.get(a) == (Double)base.get(b)) {\n          return ((String)a).compareTo((String)b);\n        } else {\n          return -1;\n        }\n      }\n    }\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Afaik the most cleaner way is utilizing collections to sort map on value:</p>\n\n<pre><code>Map&lt;String, Long&gt; map = new HashMap&lt;String, Long&gt;();\n// populate with data to sort on Value\n// use datastructure designed for sorting\n\nQueue queue = new PriorityQueue( map.size(), new MapComparable() );\nqueue.addAll( map.entrySet() );\n\n// get a sorted map\nLinkedHashMap&lt;String, Long&gt; linkedMap = new LinkedHashMap&lt;String, Long&gt;();\n\nfor (Map.Entry&lt;String, Long&gt; entry; (entry = queue.poll())!=null;) {\n    linkedMap.put(entry.getKey(), entry.getValue());\n}\n\npublic static class MapComparable implements Comparator&lt;Map.Entry&lt;String, Long&gt;&gt;{\n\n  public int compare(Entry&lt;String, Long&gt; e1, Entry&lt;String, Long&gt; e2) {\n    return e1.getValue().compareTo(e2.getValue());\n  }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you have duplicate keys and only a small set of data (&lt;1000) and your code is not performance critical you can just do the following:</p>\n\n<pre><code>Map&lt;String,Integer&gt; tempMap=new HashMap&lt;String,Integer&gt;(inputUnsortedMap);\nLinkedHashMap&lt;String,Integer&gt; sortedOutputMap=new LinkedHashMap&lt;String,Integer&gt;();\n\nfor(int i=0;i&lt;inputUnsortedMap.size();i++){\n    Map.Entry&lt;String,Integer&gt; maxEntry=null;\n    Integer maxValue=-1;\n    for(Map.Entry&lt;String,Integer&gt; entry:tempMap.entrySet()){\n        if(entry.getValue()&gt;maxValue){\n            maxValue=entry.getValue();\n            maxEntry=entry;\n        }\n    }\n    tempMap.remove(maxEntry.getKey());\n    sortedOutputMap.put(maxEntry.getKey(),maxEntry.getValue());\n}\n</code></pre>\n\n<p><strong>inputUnsortedMap</strong> is the input to the code.</p>\n\n<p>The variable <strong>sortedOutputMap</strong> will contain the data in decending order when iterated over. To change order just change &gt; to a &lt; in the if statement.</p>\n\n<p>Is not the fastest sort but does the job without any additional dependencies.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For sure the solution of Stephen is really great, but for those who can't use Guava:</p>\n\n<p>Here's my solution for sorting by value a map.\nThis solution handle the case where there are twice the same value etc...</p>\n\n<pre><code>// If you want to sort a map by value, and if there can be twice the same value:\n\n// here is your original map\nMap&lt;String,Integer&gt; mapToSortByValue = new HashMap&lt;String, Integer&gt;();\nmapToSortByValue.put(\"A\", 3);\nmapToSortByValue.put(\"B\", 1);\nmapToSortByValue.put(\"C\", 3);\nmapToSortByValue.put(\"D\", 5);\nmapToSortByValue.put(\"E\", -1);\nmapToSortByValue.put(\"F\", 1000);\nmapToSortByValue.put(\"G\", 79);\nmapToSortByValue.put(\"H\", 15);\n\n// Sort all the map entries by value\nSet&lt;Map.Entry&lt;String,Integer&gt;&gt; set = new TreeSet&lt;Map.Entry&lt;String,Integer&gt;&gt;(\n        new Comparator&lt;Map.Entry&lt;String,Integer&gt;&gt;(){\n            @Override\n            public int compare(Map.Entry&lt;String,Integer&gt; obj1, Map.Entry&lt;String,Integer&gt; obj2) {\n                Integer val1 = obj1.getValue();\n                Integer val2 = obj2.getValue();\n                // DUPLICATE VALUE CASE\n                // If the values are equals, we can't return 0 because the 2 entries would be considered\n                // as equals and one of them would be deleted (because we use a set, no duplicate, remember!)\n                int compareValues = val1.compareTo(val2);\n                if ( compareValues == 0 ) {\n                    String key1 = obj1.getKey();\n                    String key2 = obj2.getKey();\n                    int compareKeys = key1.compareTo(key2);\n                    if ( compareKeys == 0 ) {\n                        // what you return here will tell us if you keep REAL KEY-VALUE duplicates in your set\n                        // if you want to, do whatever you want but do not return 0 (but don't break the comparator contract!)\n                        return 0;\n                    }\n                    return compareKeys;\n                }\n                return compareValues;\n            }\n        }\n);\nset.addAll(mapToSortByValue.entrySet());\n\n\n// OK NOW OUR SET IS SORTED COOL!!!!\n\n// And there's nothing more to do: the entries are sorted by value!\nfor ( Map.Entry&lt;String,Integer&gt; entry : set ) {\n    System.out.println(\"Set entries: \" + entry.getKey() + \" -&gt; \" + entry.getValue());\n}\n\n\n\n\n// But if you add them to an hashmap\nMap&lt;String,Integer&gt; myMap = new HashMap&lt;String,Integer&gt;();\n// When iterating over the set the order is still good in the println...\nfor ( Map.Entry&lt;String,Integer&gt; entry : set ) {\n    System.out.println(\"Added to result map entries: \" + entry.getKey() + \" \" + entry.getValue());\n    myMap.put(entry.getKey(), entry.getValue());\n}\n\n// But once they are in the hashmap, the order is not kept!\nfor ( Integer value : myMap.values() ) {\n    System.out.println(\"Result map values: \" + value);\n}\n// Also this way doesn't work:\n// Logic because the entryset is a hashset for hashmaps and not a treeset\n// (and even if it was a treeset, it would be on the keys only)\nfor ( Map.Entry&lt;String,Integer&gt; entry : myMap.entrySet() ) {\n    System.out.println(\"Result map entries: \" + entry.getKey() + \" -&gt; \" + entry.getValue());\n}\n\n\n// CONCLUSION:\n// If you want to iterate on a map ordered by value, you need to remember:\n// 1) Maps are only sorted by keys, so you can't sort them directly by value\n// 2) So you simply CAN'T return a map to a sortMapByValue function\n// 3) You can't reverse the keys and the values because you have duplicate values\n//    This also means you can't neither use Guava/Commons bidirectionnal treemaps or stuff like that\n\n// SOLUTIONS\n// So you can:\n// 1) only sort the values which is easy, but you loose the key/value link (since you have duplicate values)\n// 2) sort the map entries, but don't forget to handle the duplicate value case (like i did)\n// 3) if you really need to return a map, use a LinkedHashMap which keep the insertion order\n</code></pre>\n\n<p>The exec:\n<a href=\"http://www.ideone.com/dq3Lu\" rel=\"nofollow\">http://www.ideone.com/dq3Lu</a></p>\n\n<p>The output:</p>\n\n<pre><code>Set entries: E -&gt; -1\nSet entries: B -&gt; 1\nSet entries: A -&gt; 3\nSet entries: C -&gt; 3\nSet entries: D -&gt; 5\nSet entries: H -&gt; 15\nSet entries: G -&gt; 79\nSet entries: F -&gt; 1000\nAdded to result map entries: E -1\nAdded to result map entries: B 1\nAdded to result map entries: A 3\nAdded to result map entries: C 3\nAdded to result map entries: D 5\nAdded to result map entries: H 15\nAdded to result map entries: G 79\nAdded to result map entries: F 1000\nResult map values: 5\nResult map values: -1\nResult map values: 1000\nResult map values: 79\nResult map values: 3\nResult map values: 1\nResult map values: 3\nResult map values: 15\nResult map entries: D -&gt; 5\nResult map entries: E -&gt; -1\nResult map entries: F -&gt; 1000\nResult map entries: G -&gt; 79\nResult map entries: A -&gt; 3\nResult map entries: B -&gt; 1\nResult map entries: C -&gt; 3\nResult map entries: H -&gt; 15\n</code></pre>\n\n<p>Hope it will help some folks</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've merged the solutions of user157196 and Carter Page:</p>\n\n<pre><code>class MapUtil {\n\n    public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; sortByValue( Map&lt;K, V&gt; map ){\n        ValueComparator&lt;K,V&gt; bvc =  new ValueComparator&lt;K,V&gt;(map);\n        TreeMap&lt;K,V&gt; sorted_map = new TreeMap&lt;K,V&gt;(bvc);\n        sorted_map.putAll(map);\n        return sorted_map;\n    }\n\n}\n\nclass ValueComparator&lt;K, V extends Comparable&lt;? super V&gt;&gt; implements Comparator&lt;K&gt; {\n\n    Map&lt;K, V&gt; base;\n    public ValueComparator(Map&lt;K, V&gt; base) {\n        this.base = base;\n    }\n\n    public int compare(K a, K b) {\n        int result = (base.get(a).compareTo(base.get(b)));\n        if (result == 0) result=1;\n        // returning 0 would merge keys\n        return result;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can try Guava's multimaps:</p>\n\n<pre><code>TreeMap&lt;Integer, Collection&lt;String&gt;&gt; sortedMap = new TreeMap&lt;&gt;(\n        Multimaps.invertFrom(Multimaps.forMap(originalMap), \n        ArrayListMultimap.&lt;Integer, String&gt;create()).asMap());\n</code></pre>\n\n<p>As a result you get a map from original values to collections of keys that correspond to them. This approach can be used even if there are multiple keys for the same value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When I'm faced with this, I just create a list on the side. If you put them together in a custom Map implementation, it'll have a nice feel to it... You can use something like the following, performing the sort only when needed. (Note: I haven't really tested this, but it compiles... might be a silly little bug in there somewhere)</p>\n\n<p>(If you want it sorted by both keys and values, have the class extend TreeMap, don't define the accessor methods, and have the mutators call super.xxxxx instead of map_.xxxx)</p>\n\n<pre><code>package com.javadude.sample;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class SortedValueHashMap&lt;K, V&gt; implements Map&lt;K, V&gt; {\n    private Map&lt;K, V&gt; map_ = new HashMap&lt;K, V&gt;();\n    private List&lt;V&gt; valueList_ = new ArrayList&lt;V&gt;();\n    private boolean needsSort_ = false;\n    private Comparator&lt;V&gt; comparator_;\n\n    public SortedValueHashMap() {\n    }\n    public SortedValueHashMap(List&lt;V&gt; valueList) {\n        valueList_ = valueList;\n    }\n\n    public List&lt;V&gt; sortedValues() {\n        if (needsSort_) {\n            needsSort_ = false;\n            Collections.sort(valueList_, comparator_);\n        }\n        return valueList_;\n    }\n\n    // mutators\n    public void clear() {\n        map_.clear();\n        valueList_.clear();\n        needsSort_ = false;\n    }\n\n    public V put(K key, V value) {\n        valueList_.add(value);\n        needsSort_ = true;\n        return map_.put(key, value);\n    }\n\n    public void putAll(Map&lt;? extends K, ? extends V&gt; m) {\n        map_.putAll(m);\n        valueList_.addAll(m.values());\n        needsSort_ = true;\n    }\n\n    public V remove(Object key) {\n        V value = map_.remove(key);\n        valueList_.remove(value);\n        return value;\n    }\n\n    // accessors\n    public boolean containsKey(Object key)           { return map_.containsKey(key); }\n    public boolean containsValue(Object value)       { return map_.containsValue(value); }\n    public Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt; entrySet() { return map_.entrySet(); }\n    public boolean equals(Object o)                  { return map_.equals(o); }\n    public V get(Object key)                         { return map_.get(key); }\n    public int hashCode()                            { return map_.hashCode(); }\n    public boolean isEmpty()                         { return map_.isEmpty(); }\n    public Set&lt;K&gt; keySet()                           { return map_.keySet(); }\n    public int size()                                { return map_.size(); }\n    public Collection&lt;V&gt; values()                    { return map_.values(); }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This method will just serve the purpose. (the 'setback' is that the Values <strong>must implement the java.util.Comparable interface</strong>)</p>\n\n<pre><code>  /**\n\n * Sort a map according to values.\n\n * @param &lt;K&gt; the key of the map.\n * @param &lt;V&gt; the value to sort according to.\n * @param mapToSort the map to sort.\n\n * @return a map sorted on the values.\n\n */ \npublic static &lt;K, V extends Comparable&lt; ? super V&gt;&gt; Map&lt;K, V&gt;\nsortMapByValues(final Map &lt;K, V&gt; mapToSort)\n{\n    List&lt;Map.Entry&lt;K, V&gt;&gt; entries =\n        new ArrayList&lt;Map.Entry&lt;K, V&gt;&gt;(mapToSort.size());  \n\n    entries.addAll(mapToSort.entrySet());\n\n    Collections.sort(entries,\n                     new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()\n    {\n        @Override\n        public int compare(\n               final Map.Entry&lt;K, V&gt; entry1,\n               final Map.Entry&lt;K, V&gt; entry2)\n        {\n            return entry1.getValue().compareTo(entry2.getValue());\n        }\n    });      \n\n    Map&lt;K, V&gt; sortedMap = new LinkedHashMap&lt;K, V&gt;();      \n\n    for (Map.Entry&lt;K, V&gt; entry : entries)\n    {\n        sortedMap.put(entry.getKey(), entry.getValue());\n\n    }      \n\n    return sortedMap;\n\n}\n</code></pre>\n\n<p><a href=\"http://javawithswaranga.blogspot.com/2011/06/generic-method-to-sort-hashmap.html\" rel=\"nofollow\">http://javawithswaranga.blogspot.com/2011/06/generic-method-to-sort-hashmap.html</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For sorting upon the keys I found a better solution with a TreeMap (I will try to get a solution for value based sorting ready too):</p>\n\n<pre><code>public static void main(String[] args) {\n    Map&lt;String, String&gt; unsorted = new HashMap&lt;String, String&gt;();\n    unsorted.put(\"Cde\", \"Cde_Value\");\n    unsorted.put(\"Abc\", \"Abc_Value\");\n    unsorted.put(\"Bcd\", \"Bcd_Value\");\n\n    Comparator&lt;String&gt; comparer = new Comparator&lt;String&gt;() {\n        @Override\n        public int compare(String o1, String o2) {\n            return o1.compareTo(o2);\n        }};\n\n    Map&lt;String, String&gt; sorted = new TreeMap&lt;String, String&gt;(comparer);\n    sorted.putAll(unsorted);\n    System.out.println(sorted);\n}\n</code></pre>\n\n<p>Output would be:</p>\n\n<p>{Abc=Abc_Value, Bcd=Bcd_Value, Cde=Cde_Value}</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>As you've discovered, the <a href=\"http://en.wikipedia.org/wiki/Model-view-controller\">Model\u2013View\u2013Controller</a> pattern is no panacea, but it offers some advantages. Rooted in <a href=\"http://en.wikipedia.org/wiki/Model-view-controller\">MVC</a>, the Swing separable model architecture is discussed in <a href=\"http://www.oracle.com/technetwork/java/architecture-142923.html\"><em>A Swing Architecture Overview</em></a>. Based on <a href=\"http://stackoverflow.com/questions/2687871\">this outline</a>, the following example shows an <a href=\"http://en.wikipedia.org/wiki/Model-view-controller\">MVC</a> implementation of a much simpler game that illustrates similar principles. Note that the <code>Model</code> manages a single <code>Piece</code>, chosen at random. In response to a user's selection, the <code>View</code> invokes the <code>check()</code> method, while listening for a response from the <code>Model</code> via <code>update()</code>. The <code>View</code> then updates itself using information obtained from the <code>Model</code>. Similarly, the <code>Controller</code> may <code>reset()</code> the <code>Model</code>. In particular, there is no drawing in the <code>Model</code> and no game logic in the <code>View</code>. This somewhat more complex <a href=\"http://robotchase.sourceforge.net/\">game</a> was designed to illustrate the same concepts.</p>\n\n<p>Addendum: I've modified the original example to show how <a href=\"http://en.wikipedia.org/wiki/Model-view-controller\">MVC</a> allows one to enhance the <code>View</code> without changing the nature of the <code>Model</code>.</p>\n\n<p>Addendum: As @akf observes, <a href=\"http://en.wikipedia.org/wiki/Model-view-controller\">MVC</a> hinges on the <a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">observer pattern</a>. Your <code>Model</code> needs a way to notify the <code>View</code> of changes. Several approaches are widely used:</p>\n\n<ul>\n<li><p>In the example below, <code>Model</code> extends <a href=\"http://java.sun.com/javase/6/docs/api/java/util/Observable.html\"><code>Observable</code></a> for simplicity.</p></li>\n<li><p>A more common approach uses an <a href=\"http://java.sun.com/javase/6/docs/api/javax/swing/event/EventListenerList.html\"><code>EventListenerList</code></a>, as shown in the <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/panel.html\"><code>Converter</code></a> application and suggested by the large number of <a href=\"http://java.sun.com/javase/6/docs/api/java/util/EventListener.html\"><code>EventListener</code></a> subinterfaces and implementing classes.</p></li>\n<li><p>A third option is to use a <a href=\"http://docs.oracle.com/javase/7/docs/api/java/beans/PropertyChangeListener.html\"><code>PropertyChangeListener</code></a>, as shown <a href=\"http://stackoverflow.com/a/10523401/230513\">here</a> and <a href=\"http://stackoverflow.com/questions/5533581\">here</a>.</p></li>\n</ul>\n\n<p>Addendum: Some common questions about Swing controllers are addressed <a href=\"http://stackoverflow.com/a/25556585/230513\">here</a> and <a href=\"http://stackoverflow.com/a/23416515/230513\">here</a>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/uaeEq.png\" alt=\"screen capture\"></p>\n\n<pre><code>import java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.RenderingHints;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Observable;\nimport java.util.Observer;\nimport java.util.Random;\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\n/**\n * @see http://stackoverflow.com/q/3066590/230513\n * 15-Mar-2011 r8 http://stackoverflow.com/questions/5274962\n * 26-Mar-2013 r17 per comment\n */\npublic class MVCGame implements Runnable {\n\n    public static void main(String[] args) {\n        EventQueue.invokeLater(new MVCGame());\n    }\n\n    @Override\n    public void run() {\n        JFrame f = new JFrame();\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        f.add(new MainPanel());\n        f.pack();\n        f.setLocationRelativeTo(null);\n        f.setVisible(true);\n    }\n}\n\nclass MainPanel extends JPanel {\n\n    public MainPanel() {\n        super(new BorderLayout());\n        Model model = new Model();\n        View view = new View(model);\n        Control control = new Control(model, view);\n        JLabel label = new JLabel(\"Guess what color!\", JLabel.CENTER);\n        this.add(label, BorderLayout.NORTH);\n        this.add(view, BorderLayout.CENTER);\n        this.add(control, BorderLayout.SOUTH);\n    }\n}\n\n/**\n * Control panel\n */\nclass Control extends JPanel {\n\n    private Model model;\n    private View view;\n    private JButton reset = new JButton(\"Reset\");\n\n    public Control(Model model, View view) {\n        this.model = model;\n        this.view = view;\n        this.add(reset);\n        reset.addActionListener(new ButtonHandler());\n    }\n\n    private class ButtonHandler implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            String cmd = e.getActionCommand();\n            if (\"Reset\".equals(cmd)) {\n                model.reset();\n            }\n        }\n    }\n}\n\n/**\n * View\n */\nclass View extends JPanel {\n\n    private static final String s = \"Click a button.\";\n    private Model model;\n    private ColorIcon icon = new ColorIcon(80, Color.gray);\n    private JLabel label = new JLabel(s, icon, JLabel.CENTER);\n\n    public View(Model model) {\n        super(new BorderLayout());\n        this.model = model;\n        label.setVerticalTextPosition(JLabel.BOTTOM);\n        label.setHorizontalTextPosition(JLabel.CENTER);\n        this.add(label, BorderLayout.CENTER);\n        this.add(genButtonPanel(), BorderLayout.SOUTH);\n        model.addObserver(new ModelObserver());\n    }\n\n    private JPanel genButtonPanel() {\n        JPanel panel = new JPanel();\n        for (Piece p : Piece.values()) {\n            PieceButton pb = new PieceButton(p);\n            pb.addActionListener(new ButtonHandler());\n            panel.add(pb);\n        }\n        return panel;\n    }\n\n    private class ModelObserver implements Observer {\n\n        @Override\n        public void update(Observable o, Object arg) {\n            if (arg == null) {\n                label.setText(s);\n                icon.color = Color.gray;\n            } else {\n                if ((Boolean) arg) {\n                    label.setText(\"Win!\");\n                } else {\n                    label.setText(\"Keep trying.\");\n                }\n            }\n        }\n    }\n\n    private class ButtonHandler implements ActionListener {\n\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            PieceButton pb = (PieceButton) e.getSource();\n            icon.color = pb.piece.color;\n            label.repaint();\n            model.check(pb.piece);\n        }\n    }\n\n    private static class PieceButton extends JButton {\n\n        Piece piece;\n\n        public PieceButton(Piece piece) {\n            this.piece = piece;\n            this.setIcon(new ColorIcon(16, piece.color));\n        }\n    }\n\n    private static class ColorIcon implements Icon {\n\n        private int size;\n        private Color color;\n\n        public ColorIcon(int size, Color color) {\n            this.size = size;\n            this.color = color;\n        }\n\n        @Override\n        public void paintIcon(Component c, Graphics g, int x, int y) {\n            Graphics2D g2d = (Graphics2D) g;\n            g2d.setRenderingHint(\n                RenderingHints.KEY_ANTIALIASING,\n                RenderingHints.VALUE_ANTIALIAS_ON);\n            g2d.setColor(color);\n            g2d.fillOval(x, y, size, size);\n        }\n\n        @Override\n        public int getIconWidth() {\n            return size;\n        }\n\n        @Override\n        public int getIconHeight() {\n            return size;\n        }\n    }\n}\n\n/**\n * Model\n */\nclass Model extends Observable {\n\n    private static final Random rnd = new Random();\n    private static final Piece[] pieces = Piece.values();\n    private Piece hidden = init();\n\n    private Piece init() {\n        return pieces[rnd.nextInt(pieces.length)];\n    }\n\n    public void reset() {\n        hidden = init();\n        setChanged();\n        notifyObservers();\n    }\n\n    public void check(Piece guess) {\n        setChanged();\n        notifyObservers(guess.equals(hidden));\n    }\n}\n\nenum Piece {\n\n    Red(Color.red), Green(Color.green), Blue(Color.blue);\n    public Color color;\n\n    private Piece(Color color) {\n        this.color = color;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When looking through Swing, one way that the designers consistently employ updating of View components in its MVC implementation is through Observer/Observable callbacks.  An example can be seen in the <code>AbstractTableModel</code>, which has a variety of <code>fireTable*Changed/Updated/etc</code> methods that will alert all of its <code>TableModelListener</code> observers of mods to the model.  </p>\n\n<p>One option you have is to add a listener type to your <code>Model</code> class, and then notify your registered observers of any mods to the state of your model.  Your <code>View</code> should be a listener, and it should repaint itself upon receipt of an update.  </p>\n\n<p>EDIT: +1 to trashgod.  consider this an alternate wording to his explanation.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\">The official tutorial</a> may be of some use to you.</p>\n\n<pre>\n            | Class | Package | Subclass | World\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\npublic      |  y    |    y    |    y     |   y\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nprotected   |  y    |    y    |    y     |   n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nno modifier |  y    |    y    |    n     |   n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nprivate     |  y    |    n    |    n     |   n\n\ny: accessible\nn: not accessible\n</pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>(Caveat:  I am not a Java programmer, I am a Perl programmer.  Perl has no formal protections which is perhaps why I understand the problem so well :) )</p>\n\n<h2>Private</h2>\n\n<p>Like you'd think, only the <strong>class</strong> in which it is declared can see it.</p>\n\n<h2>Package Private</h2>\n\n<p>Can only be seen and used by the <strong>package</strong> in which it was declared.  This is the default in Java (which some see as a mistake).</p>\n\n<h2>Protected</h2>\n\n<p>Package Private + can be seen by subclasses or package member.</p>\n\n<h2>Public</h2>\n\n<p>Everyone can see it.</p>\n\n<h2><a href=\"http://martinfowler.com/ieeeSoftware/published.pdf\">Published</a></h2>\n\n<p>Visible outside the code I control.  (While not Java syntax, it is important for this discussion).</p>\n\n<p>C++ defines an additional level called \"friend\" and the less you know about that the better.</p>\n\n<p>When should you use what?  The whole idea is encapsulation to hide information.  As much as possible you want to hide the detail of how something is done from your users.  Why?  Because then you can change them later and not break anybody's code.  This lets you optimize, refactor, redesign and fix bugs without worry that someone was using that code you just overhauled.</p>\n\n<p>So, rule of thumb is to make things only as visible as they have to be.  Start with private and only add more visibility as needed.  Only make public that which is absolutely necessary for the user to know, every detail you make public cramps your ability to redesign the system.</p>\n\n<p>If you want users to be able to customize behaviors, rather than making internals public so they can override them, it's often a better idea to shove those guts into an object and make that interface public.  That way they can simply plug in a new object.  For example, if you were writing a CD player and wanted the \"go find info about this CD\" bit customizable, rather than make those methods public you'd put all that functionality into its own object and make just your object getter/setter public.  In this way being stingy about exposing your guts encourages good composition and separation of concerns</p>\n\n<p>Personally, I stick with just \"private\" and \"public\".  Many OO languages just have that.  \"Protected\" can be handy, but it's really a cheat.  Once an interface is more than private it's outside of your control and you have to go looking in other people's code to find uses.</p>\n\n<p>This is where the idea of \"published\" comes in.  Changing an interface (refactoring it) requires that you find all the code which is using it and change that, too.  If the interface is private, well no problem.  If it's protected you have to go find all your subclasses.  If it's public you have to go find all the code which uses your code.  Sometimes this is possible, for example if you're working on corporate code that's for internal use only it doesn't matter if an interface is public.  You can grab all the code out of the corporate repository.  But if an interface is \"published\", if there is code using it outside your control, then you're hosed.  You must support that interface or risk breaking code.  Even protected interfaces can be considered published (which is why I don't bother with protected).</p>\n\n<p>Many languages find the hierarchical nature of public/protected/private to be too limiting and not in line with reality.  To that end there is the concept of a <a href=\"http://en.wikipedia.org/wiki/Trait_class\">trait class</a>, but that's another show.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Easy rule. Start with declaring everything private. And then progress towards public as the needs arises and design warrant it.</p>\n\n<p>When exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce to much dependencies on the actual representation rather than it's observable behavior.</p>\n\n<p>As a general rule I try to avoid overriding method implementations by sub-classing, it's to easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.</p>\n\n<p>Also use the @Override annotation when overriding to keep things from breaking when you refactor.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>                | highest precedence &lt;---------&gt; lowest precedence\n*\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n \\ xCanBeSeenBy | this           | any class | this subclass | any\n  \\__________   | class          | in same   | in another    | class\n             \\  | nonsubbed      | package   | package       |    \nModifier of x \\ |                |           |               |       \n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014*\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\npublic          |       \u2714        |    \u2714      |    \u2714          |   \u2714   \n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nprotected       |       \u2714        |    \u2714      |    \u2714          |   \u2718   \n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\npackage-private |                |           |               |\n(no modifier)   |       \u2714        |    \u2714      |    \u2718          |   \u2718   \n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nprivate         |       \u2714        |    \u2718      |    \u2718          |    \u2718   \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's actually a bit more complicated than a simple grid shows. The grid tells you whether an access is allowed, but what exactly constitutes an access? Also, access levels interact with nested classes and inheritance in complex ways.</p>\n\n<p>The \"default\" access (specified by the absence of a keyword) is also called <a href=\"http://stackoverflow.com/questions/5416074/java-package-private-terminology\"><strong>package-private</strong></a>. Exception: in an interface, no modifier means public access; modifiers other than public are forbidden. Enum constants are always public.</p>\n\n<h2>Summary</h2>\n\n<p>Is an access to a member with this access specifier allowed?</p>\n\n<ul>\n<li>Member is <code>private</code>: Only if member is defined within the same class as calling code.</li>\n<li>Member is package private: Only if the calling code is within the member's immediately enclosing package.</li>\n<li>Member is <code>protected</code>: Same package, or if member is defined in a superclass of the class containing the calling code.</li>\n<li>Member is <code>public</code>: Yes.</li>\n</ul>\n\n<h2>What access specifiers apply to</h2>\n\n<p>Local variables and formal parameters cannot take access specifiers. Since they are inherently inaccessible to the outside according to scoping rules, they are effectively private.</p>\n\n<p>For classes in the top scope, only <code>public</code> and package-private are permitted. This design choice is presumably because <code>protected</code> and <code>private</code> would be redundant at the package level (there is no inheritance of packages).</p>\n\n<p>All the access specifiers are possible on class members (constructors, methods and static member functions, nested classes).</p>\n\n<p>Related: <a href=\"http://stackoverflow.com/questions/267781/java-class-accessibility\">Java Class Accessibility</a></p>\n\n<h2>Order</h2>\n\n<p>The access specifiers can be strictly ordered</p>\n\n<blockquote>\n  <p>public &gt; protected &gt; package-private &gt; private</p>\n</blockquote>\n\n<p>meaning that <code>public</code> provides the most access, <code>private</code> the least. Any reference possible on a private member is also valid for a package-private member; any reference to a package-private member is valid on a protected member, and so on. (Giving access to protected members to other classes in the same package was considered a mistake.)</p>\n\n<h2>Notes</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/676930/private-member-access-java\">A class's methods <em>are</em> allowed to access private members of other objects of the same class.</a> More precisely, a method of class C can access private members of C on objects of any subclass of C. Java doesn't support restricting access by instance, only by class. (Compare with Scala, which does support it using <code>private[this]</code>.)</li>\n<li>You need access to a constructor to construct an object. Thus if all constructors are private, the class can only be constructed by code living within the class (typically static factory methods or static variable initializers). Similarly for package-private or protected constructors.\n<ul>\n<li>Only having private constructors also means that the class cannot be subclassed externally, since Java requires a subclass's constructors to implicitly or explicitly call a superclass constructor. (It can, however, contain a nested class that subclasses it.)</li>\n</ul></li>\n</ul>\n\n<h2>Inner classes</h2>\n\n<p>You also have to consider <em>nested</em> scopes, such as inner classes. An example of the complexity is that inner classes have members, which themselves can take access modifiers. So you can have a private inner class with a public member; can the member be accessed? (See below.) The general rule is to look at scope and think recursively to see whether you can access each level.</p>\n\n<p>However, this is quite complicated, and for full details, <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6\">consult the Java Language Specification</a>. (Yes, there have been compiler bugs in the past.)</p>\n\n<p>For a taste of how these interact, consider this example. It is possible to \"leak\" private inner classes; this is usually a warning:</p>\n\n<pre><code>class Test {\n    public static void main(final String ... args) {\n        System.out.println(Example.leakPrivateClass()); // OK\n        Example.leakPrivateClass().secretMethod(); // error\n    }\n}\n\nclass Example {\n    private static class NestedClass {\n        public void secretMethod() {\n            System.out.println(\"Hello\");\n        }\n    }\n    public static NestedClass leakPrivateClass() {\n        return new NestedClass();\n    }\n}\n</code></pre>\n\n<p>Compiler output:</p>\n\n<pre><code>Test.java:4: secretMethod() in Example.NestedClass is defined in an inaccessible class or interface\n        Example.leakPrivateClass().secretMethod(); // error\n                                  ^\n1 error\n</code></pre>\n\n<p>Some related questions:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1350171/java-method-accessibility-inside-package-private-class\">Java - Method accessibility inside package-private class?</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As a rule of thumb: </p>\n\n<ul>\n<li><strong>private</strong>: class scope.</li>\n<li><strong>default</strong> (or <em>package-private</em>): package scope.</li>\n<li><strong>protected</strong>: package scope <strong>+ child</strong> (like package, but we can subclass it from different packages). The protected modifier always keeps the \"parent-child\" relationship.</li>\n<li><strong>public</strong>: everywhere.</li>\n</ul>\n\n<p>As a result, if we divide access right into three rights: </p>\n\n<ul>\n<li><strong>(D)irect</strong> (invoke from a method inside the same class).</li>\n<li><strong>(R)eference</strong> (invoke a method using a reference to the class, or via \"dot\" syntax).</li>\n<li><strong>(I)nheritance</strong> (via subclassing).</li>\n</ul>\n\n<p>then we have this simple table:</p>\n\n<p><img src=\"http://i.stack.imgur.com/MH0GB.png\" alt=\"enter image description here\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In very short</p>\n\n<ul>\n<li><code>Public</code> are accessible from everywhere. </li>\n<li><code>Protected</code> are accessible by the classes of the same package and the subclasses residing in any package.</li>\n<li><code>Default</code> are accessible by the classes of the same package.</li>\n<li><code>private</code> are accessible within the same class only.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The most misunderstood access modifier in Java is <code>protected</code>. We know that it's similar to the default modifier with one exception in which subclasses can see it. But how? Here is an example which hopefully clarifies the confusion:</p>\n\n<ul>\n<li><p>Assume that we have 3 classes; <code>Grandfather</code>, <code>Father</code> and <code>Son</code>:</p>\n\n<pre><code>package grandfatherpackage;\n\npublic class Grandfather\n{\n\n}\n\n-------------------------------------------\n\npackage fatherpackage;\n\npublic class Father extends Grandfather\n{\n\n}\n\n-------------------------------------------\n\npackage sonpackage;\n\npublic class Son extends Father\n{\n\n}\n</code></pre></li>\n<li><p>Let's add a protected method <code>foo()</code> to <code>Grandfather</code>.</p>\n\n<pre><code>package grandfatherpackage;\n\npublic class Grandfather\n{\n    protected void foo(){}\n}\n</code></pre></li>\n<li><p>The method <code>foo()</code> can be called in 3 contexts:</p>\n\n<ol>\n<li><p>Inside a class that is located in the same package where <code>foo()</code> is defined, which is <code>grandfatherpackage</code>:</p>\n\n<pre><code>package grandfatherpackage;\n\npublic class SomeClass\n{\n    public void someMethod() throws Exception\n    {\n        Father f = new Father();\n        f.foo();\n\n        Son s = new Son();\n        s.foo();\n    }\n}\n</code></pre></li>\n<li><p>Inside a subclass, on the current instance <code>this</code>:</p>\n\n<pre><code>package fatherpackage;\n\npublic class Father extends Grandfather\n{\n    public void fatherMethod()\n    {\n        this.foo();\n    }\n}\n\n-------------------------------------------\n\npackage sonpackage;\n\npublic class Son extends Father\n{\n    public void sonMethod()\n    {\n        this.foo();\n    }\n}\n</code></pre></li>\n<li><p>On an reference whose type is the same class:</p>\n\n<pre><code>package fatherpackage;\n\npublic class Father extends Grandfather\n{\n    public void fatherMethod()\n    {\n        Father f = new Father();\n        f.foo();\n    }\n}\n\n-------------------------------------------\n\npackage sonpackage;\n\npublic class Son extends Father\n{\n    public void sonMethod()\n    {\n        Son s = new Son();\n        s.foo();\n    }\n}\n</code></pre></li>\n</ol></li>\n<li><p>Regarding the third situation, it won't compile if the reference is of type of the parent class:</p>\n\n<pre><code>package fatherpackage;\n\npublic class Father extends Grandfather\n{\n    public void fatherMethod()\n    {\n        Grandfather f = new Grandfather();\n        g.foo(); // compilation error\n\n        Grandfather g = new Father();\n        g.foo(); // compilation error\n    }\n}\n\n-------------------------------------------\n\npackage sonpackage;\n\npublic class Son extends Father\n{\n    public void sonMethod()\n    {\n        Grandfather g = new Grandfather();\n        g.foo(); // compilation error\n\n        Grandfather s = new Son();\n        s.foo(); // compilation error\n\n        Father f = new Father();\n        f.foo(); // compilation error\n\n        Father ff = new Son();\n        ff.foo(); // compilation error\n    }\n}\n</code></pre></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2><strong>Private</strong></h2>\n\n<ul>\n<li>Methods,Variables and Constructors</li>\n</ul>\n\n<p><em>Methods, Variables and Constructors that are declared private can only be accessed within the declared class itself.</em></p>\n\n<ul>\n<li>Class and Interface</li>\n</ul>\n\n<p><em>Private access modifier is the most restrictive access level. Class and interfaces cannot be private.</em></p>\n\n<p><strong><em>Note</em></strong></p>\n\n<p><em>Variables that are declared private can be accessed outside the class if public getter methods are present in the class.\nVariables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class.</em>\n<b><hr></b></p>\n\n<h2><strong>Protected</strong></h2>\n\n<ul>\n<li><em>Class and Interface</em></li>\n</ul>\n\n<p><em>The protected access modifier cannot be applied to class and interfaces.</em></p>\n\n<p><em>Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.</em></p>\n\n<p><strong><em>Note</em></strong></p>\n\n<p><em>Protected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.</em></p>\n\n<p><b><hr></b></p>\n\n<h2><strong>Public</strong></h2>\n\n<p><em>A class, method, constructor, interface etc declared public can be accessed from any other class.</em> </p>\n\n<p><em>Therefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java Universe.</em></p>\n\n<ul>\n<li><em>Different Packages</em></li>\n</ul>\n\n<p><em>However if the public class we are trying to access is in a different package, then the public class still need to be imported.</em></p>\n\n<p><em>Because of class inheritance, all public methods and variables of a class are inherited by its subclasses.</em></p>\n\n<p><b><hr></b></p>\n\n<h2><strong>Default -No keyword:</strong></h2>\n\n<p><em>Default access modifier means we do not explicitly declare an access modifier for a class, field, method, etc.</em></p>\n\n<ul>\n<li><em>Within the same Packages</em></li>\n</ul>\n\n<p><em>A variable or method declared without any access control modifier is available to any other class in the same package. The fields in an interface are implicitly public static final and the methods in an interface are by default public.</em></p>\n\n<p><strong><em>Note</em></strong></p>\n\n<p>We cannot Override the Static fields.if you try to override it does not show any error \nbut it doesnot work what we except.</p>\n\n<h2>Related Answers</h2>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/16617408/overriding-static-methods-in-java\"><strong>Overriding static methods in java</strong></a></li>\n</ul>\n\n<h2>References links</h2>\n\n<p><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\">http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html</a>\n<a href=\"http://www.tutorialspoint.com/java/java_access_modifiers.htm\">http://www.tutorialspoint.com/java/java_access_modifiers.htm</a> </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a better version of the table:\n<br><br></p>\n\n<p><a href=\"http://i.stack.imgur.com/niONO.png\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/niONO.png\" alt=\"Java Access Modifiers\"></a></p>\n\n<hr>\n\n<h2>Explanations</h2>\n\n<ul>\n<li><p>A <strong>private</strong> member is <em>only</em> accessible within the same class as it is declared.</p></li>\n<li><p>A member with <strong>no access modifier</strong> is only accessible within classes in the same package.</p></li>\n<li><p>A <strong>protected</strong> member is accessible within all classes in the same package <em>and</em> within subclasses in other packages.</p></li>\n<li><p>A <strong>public</strong> member is accessible to all classes (unless it resides in a <a href=\"http://openjdk.java.net/projects/jigsaw/spec/sotms/\" rel=\"nofollow\">module</a> that does not export the package it is declared in).</p></li>\n</ul>\n\n<hr>\n\n<h2>Which modifier to choose?</h2>\n\n<p>Access modifiers is a tool to help you to prevent accidentally breaking encapsulation<sup>(*)</sup>. Ask yourself if you intend the member to be something that's internal to the class, package, class hierarchy or not internal at all, and choose access level accordingly.</p>\n\n<p><strong>Examples:</strong></p>\n\n<ul>\n<li>A field <code>long internalCounter</code> should probably be private since it's mutable and an implementation detail.</li>\n<li>A class that should only be instantiated in a factory class (in the same package) should have a package restricted constructor, since it shouldn't be possible to call it directly from outside the package.</li>\n<li>An internal <code>void beforeRender()</code> method called right before rendering and used as a hook in subclasses should be protected.</li>\n<li>A <code>void saveGame(File dst)</code> method which is called from the GUI code should be public.</li>\n</ul>\n\n<p><sup>(*) <a href=\"http://stackoverflow.com/questions/28612420/what-is-encapsulation-exactly\">What is Encapsulation exactly?</a></sup></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Private</strong> : Limited Access to Class only</p>\n\n<p><strong>Default(No Modifier)</strong> : Limited Access to Class and Package</p>\n\n<p><strong>Protected</strong>: Limited Access to Class,Pacakge and Subclasses(Inside and Outside Package both)</p>\n\n<p><strong>Public</strong>: Accessible to Class,Package(All),Subclasses...In short everywhere</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Access Modifiers are there to restrict access at several level.</p>\n\n<p><strong>Public :</strong> it is basically as simple as you can access from any class either that is in same package or     not. </p>\n\n<p>To access if you are in same package you can access directly but if you are in other package then you can create object of class.</p>\n\n<p><strong>Default :</strong> it is accessible in same package from any of the class of package.</p>\n\n<p>to access you can create object of class. but you can not access this variable outside of the package.</p>\n\n<p><strong>Protected :</strong> you can access variables in same package as well as subclass in any other package.\nso basically it is <strong>default + Inherited</strong> behavior.</p>\n\n<p>To access protected field defined in base class you can create object of child class.</p>\n\n<p><strong>Private :</strong>  it can be access in same class.</p>\n\n<p>In non-static methods you can access directly because of <strong>this</strong> reference (also in constructors)but to access in static methods you need to create object of the class.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The difference can be found in the links already provided but which one to use usually comes down to the \"Principle of Least Knowledge\". Only allow the least visibility that is needed.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Visible to the package. the default. No modifiers are needed.</p>\n\n<p>Visible to the class only (<strong>private</strong>).</p>\n\n<p>Visible to the world (<strong>public</strong>).</p>\n\n<p>Visible to the package and all subclasses (<strong>protected</strong>).</p>\n\n<p>Variables and methods can be declared without any modifiers that is called Default examples:</p>\n\n<pre><code>String name=\"john\";\npublic int age(){\nreturn age;\n} \n</code></pre>\n\n<p>Private Access Modifier - private:\nMethods, Variables and Constructors that are declared private can only be accessed within the declared class itself.Private access modifier is the most restrictive access level. Class and interfaces cannot be private.</p>\n\n<p>Variables that are declared private can be accessed outside the class if public getter methods are present in the class.</p>\n\n<p>Using the private modifier is the main way that an object encapsulates itself and hide data from the outside world.\nexamples:</p>\n\n<pre><code>Public class Details{\nprivate String name;\npublic void setName(String n){\nthis.name=n;\n}\npublic String getName(){\nreturn this.name;\n}\n}\n</code></pre>\n\n<p>Public Access Modifier - public:\nA class, method, constructor, interface etc declared public can be accessed from any other class. Therefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java Universe.</p>\n\n<p>However if the public class we are trying to access is in a different package, then the public class still need to be imported.</p>\n\n<p>Because of class inheritance, all public methods and variables of a class are inherited by its subclasses.\nexample:</p>\n\n<pre><code>public void cal(){\n\n}\n</code></pre>\n\n<p>Protected Access Modifier - protected:\nVariables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class.</p>\n\n<p>The protected access modifier cannot be applied to class and interfaces. Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.</p>\n\n<p>Protected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.</p>\n\n<pre><code>class Van{\n\n    protected boolean speed(){\n\n    }\n}\nclass Car{\n    boolean speed(){\n    }\n\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>David's answer provides the meaning of each access modifier. As for when to use each, I'd suggest making public all classes and the methods of each class that are meant for external use (it's API), and everything else private. You'll develop over time a sense for when to make some classes package-private and when to declare certain methods protected for use in subclasses.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://sanjusoftware.wordpress.com/2007/11/06/protected-and-default-java-keyword/\" rel=\"nofollow\">this page writes well about the protected &amp; default access modifier</a></p>\n\n<p>....\nProtected: Protected access modifier is the a little tricky and you can say is a superset of the default access modifier. Protected members are same as the default members as far as the access in the same package is concerned. The difference is that, the protected members are also accessible to the subclasses of the class in which the member is declared which are outside the package in which the parent class is present. But these protected members are \u201caccessible outside the package only through inheritance\u201c. i.e you can access a protected member of a class in its subclass present in some other package directly as if the member is present in the subclass itself. But that protected member will not be accessible in the subclass outside the package by using parent class\u2019s reference. \n....</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Public Protected Default and private are access modifiers.</p>\n\n<p>They are meant for encapsulation, or hiding and showing contents of the class.</p>\n\n<ol>\n<li>Class can be public or default</li>\n<li>Class members can be public, protected, default or private.</li>\n</ol>\n\n<p>Private is not accessible outside the class\nDefault is accessible only in the package.\nProtected in package as well as any class which extends it.\nPublic is open for all.</p>\n\n<p>Normally, member variables are defined private, but member methods are public.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I just want to address a detail that is extremely commonly got wrong, including by most of the answers on this page. <strong>\"Default\" access (when no access modifier is present) is not always the same as package-private</strong>. It depends on what the thing is.</p>\n\n<ul>\n<li><p>Non-member types (that is, classes, enums, interfaces, and annotation types not declared inside another type) are package-private by default. (<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.6.1\" rel=\"nofollow\">JLS \u00a76.6.1</a>)</p></li>\n<li><p>Class members and constructors are package-private by default. (<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.6.1\" rel=\"nofollow\">JLS \u00a76.6.1</a>)</p></li>\n<li><p>Enum constructors are <strong>private by default</strong>. (Indeed, enum contructors <em>must</em> be private, and it is an error to try to make them public or protected). Enum constants are public, and do not allow any access specifier. Other members of enums are package-private by default. (<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.9\" rel=\"nofollow\">JLS \u00a78.9</a>)</p></li>\n<li><p>All members of interfaces and annotation types are <strong>public by default</strong>. (Indeed, members of interfaces and annotation types <em>must</em> be public, and it is an error to try to make them private or protected.) (<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.3\" rel=\"nofollow\">JLS \u00a79.3 to 9.5</a>)</p></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>public - accessible from anywhere in the application,\ndefault - accessible from package,\nprotected - accessible from package and sub-classes in other package as well,\nprivate - accessible from its class only.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"http://www.json.org/java/index.html\">org.json</a> library is easy to use. Example code below:</p>\n\n<pre><code>import org.json.*;\n\n\nJSONObject obj = new JSONObject(\" .... \");\nString pageName = obj.getJSONObject(\"pageInfo\").getString(\"pageName\");\n\nJSONArray arr = obj.getJSONArray(\"posts\");\nfor (int i = 0; i &lt; arr.length(); i++)\n{\n    String post_id = arr.getJSONObject(i).getString(\"post_id\");\n    ......\n}\n</code></pre>\n\n<p>You may find extra examples from: <a href=\"http://theoryapp.com/parse-json-in-java/\">Parse JSON in Java</a></p>\n\n<p>Downloadable jar:  <a href=\"http://mvnrepository.com/artifact/org.json/json\">http://mvnrepository.com/artifact/org.json/json</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://code.google.com/p/quick-json/\" rel=\"nofollow\">quick-json parser</a> is very straight forward, flexible, very fast and customizable. Try it</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Compliant with JSON specification (RFC4627) </li>\n<li>High-Performance JSON parser </li>\n<li>Supports Flexible/Configurable parsing approach </li>\n<li>Configurable validation of key/value pairs of any JSON Heirarchy </li>\n<li>Easy to use # Very small footprint</li>\n<li>Raises developer friendly and easy to trace exceptions </li>\n<li>Pluggable Custom Validation support - Keys/Values can be validated by configuring custom validators as and when encountered </li>\n<li>Validating and Non-Validating parser support </li>\n<li>Support for two types of configuration (JSON/XML) for using quick-json validating parser </li>\n<li>Requires JDK 1.5</li>\n<li>No dependency on external libraries </li>\n<li>Support for Json Generation through object serialization </li>\n<li>Support for collection type selection during parsing process </li>\n</ul>\n\n<p>It can be used like this:</p>\n\n<pre><code>JsonParserFactory factory=JsonParserFactory.getInstance();\nJSONParser parser=factory.newJsonParser();\nMap jsonMap=parser.parseJson(jsonString);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For the sake of the example lets assume you have a class <strong><code>Person</code></strong> with just a <code>name</code>.</p>\n\n<pre><code>private class Person {\n    public String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n}\n</code></pre>\n\n<h1><a href=\"https://github.com/google/gson\">Google GSON</a> (<a href=\"http://mvnrepository.com/artifact/com.google.code.gson/gson\">Maven</a>)</h1>\n\n<p>My personal favourite as to the great JSON serialisation / de-serialisation of objects.</p>\n\n<pre><code>Gson g = new Gson();\n\nPerson person = g.fromJson(\"{\\\"name\\\": \\\"John\\\"}\", Person.class);\nSystem.out.println(person.name); //John\n\nSystem.out.println(g.toJson(person)); // {\"name\":\"John\"}\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>If you want to get a single attribute out you can do it easily with the Google library as well:</p>\n\n<pre><code>JsonObject jsonObject = new JsonParser().parse(\"{\\\"name\\\": \\\"John\\\"}\").getAsJsonObject();\n\nSystem.out.println(jsonObject.get(\"name\").getAsString()); //John\n</code></pre>\n\n<h1><a href=\"http://www.json.org/java/index.html\">Org.JSON</a> (<a href=\"http://mvnrepository.com/artifact/org.json/json\">Maven</a>)</h1>\n\n<p>If you don't need object de-serialisation but to simply get an attribute, you can try org.json (<strong>or look GSON example above!</strong>)</p>\n\n<pre><code>JSONObject obj = new JSONObject(\"{\\\"name\\\": \\\"John\\\"}\");\n\nSystem.out.println(obj.getString(\"name\")); //John\n</code></pre>\n\n<h1><a href=\"https://github.com/FasterXML/jackson-databind/\">Jackson</a> (<a href=\"http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind\">Maven</a>)</h1>\n\n<pre><code>ObjectMapper mapper = new ObjectMapper();\nPerson user = mapper.readValue(\"{\\\"name\\\": \\\"John\\\"}\", Person.class);\n\nSystem.out.println(user.name); //John\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li><p>If one wants to create JAVA object from JSON and vice versa, use GSON or JACKSON third party jars etc</p>\n\n<pre><code>//from object to JSON \nGson gson = new Gson();\ngson.toJson(yourObject);\n\n// from JSON to object \nyourObject o = gson.fromJson(JSONString,yourObject.class);\n</code></pre></li>\n<li><p>But if one just want to parse a JSON string and get some values, (OR  create a JSON string from scratch to send over wire ) just use Jave EE jar which contains JsonReader, JsonArray , JsonObject etc . You may want to download the implementation of that spec like javax.json. With these two jars i am able to parse the json and use the values.\nThese API's actually follow the DOM / SAX parsing model of XML . </p>\n\n<pre><code>    Response response = request.get(); // REST call \n    JsonReader jsonReader = Json.createReader(new StringReader(response.readEntity(String.class)));\n    JsonArray jsonArray = jsonReader.readArray();\n    ListIterator l = jsonArray.listIterator();\n    while ( l.hasNext() ) {\n          JsonObject j = (JsonObject)l.next();\n          JsonObject ciAttr = j.getJsonObject(\"ciAttributes\") ;\n</code></pre></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I believe the best practice should be to go through the official <a href=\"http://json-processing-spec.java.net/\" rel=\"nofollow\">Java JSON API</a> which are still work in progress.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This blew my mind with how easy it was. You can just pass a <code>String</code> holding your JSON to the constructor of a JSONObject in the default org.json package. </p>\n\n<pre><code>JSONArray rootOfPage =  new JSONArray(JSONString);\n</code></pre>\n\n<p>Done. (drops microphone)\nThis works with <code>JSONObjects</code> as well. After that, you can just look through your hierarchy of <code>Objects</code> using the <code>get()</code> methods on your objects.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you have some Java class(say Message) representing the JSON string(jsonString), you can use <a href=\"https://github.com/FasterXML/jackson\" rel=\"nofollow\">Jackson</a>  JSON library with:</p>\n\n<pre><code>Message message= new ObjectMapper().readValue(jsonString, Message.class);\n</code></pre>\n\n<p>and from message object you can fetch any of its attribute.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Please do something like this:</p>\n\n<pre><code>JSONParser jsonParser = new JSONParser();\nJSONObject obj = (JSONObject) jsonParser.parse(contentString);\nString product = (String) jsonObject.get(\"productId\");\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>{\n   \"pageInfo\": {\n         \"pageName\": \"abc\",\n         \"pagePic\": \"http://example.com/content.jpg\"\n    },\n    \"posts\": [\n         {\n              \"post_id\": \"123456789012_123456789012\",\n              \"actor_id\": \"1234567890\",\n              \"picOfPersonWhoPosted\": \"http://example.com/photo.jpg\",\n              \"nameOfPersonWhoPosted\": \"Jane Doe\",\n              \"message\": \"Sounds cool. Can't wait to see it!\",\n              \"likesCount\": \"2\",\n              \"comments\": [],\n              \"timeOfPost\": \"1234567890\"\n         }\n    ]\n}\n\nJava code :\n\nJSONObject obj = new JSONObject(responsejsonobj);\nString pageName = obj.getJSONObject(\"pageInfo\").getString(\"pageName\");\n\nJSONArray arr = obj.getJSONArray(\"posts\");\nfor (int i = 0; i &lt; arr.length(); i++)\n{\n    String post_id = arr.getJSONObject(i).getString(\"post_id\");\n    ......etc\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use Jaunt (<a href=\"http://jaunt-api.com\" rel=\"nofollow\">http://jaunt-api.com</a>), which has a lot of example code in the JSON parsing tutorial:</p>\n\n<pre><code>UserAgent ua = new UserAgent();\nua.openJSON(...);    //open the JSON from String, File, or from url\n\nSystem.out.println(\"pageName: \" + ua.json.findFirst(\"pageName\"));\nSystem.out.println(\"pagePic: \" + ua.json.findFirst(\"pagePic\"));\n\nfor(JNode postId : userAgent.findEach(\"post_id\")){\n  System.out.println(\"post_id: \" + postId);\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<h2>ServletContext</h2>\n\n<p>When the servletcontainer (like <a href=\"http://tomcat.apache.org\">Apache Tomcat</a>) starts up, it will deploy and load all webapplications. When a webapplication get loaded, the servletcontainer will create the <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html\"><code>ServletContext</code></a> once and keep in server's memory. The webapp's <code>web.xml</code> will be parsed and every <code>&lt;servlet&gt;</code>, <code>&lt;filter&gt;</code> and <code>&lt;listener&gt;</code> found in <code>web.xml</code>, or annotated with respectively <code>@WebServlet</code>, <code>@WebFilter</code> and <code>@WebListener</code>, will be created once and kept in server's memory as well. For all filters, the <code>init()</code> method will also be invoked immediately. When the servletcontainer shuts down, it will unload all webapplications, invoke the <code>destroy()</code> of all initialized servlets and filters, and finally the <code>ServletContext</code> and all <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances will be trashed.</p>\n\n<p>When the <code>Servlet</code> in question has a <code>&lt;servlet&gt;&lt;load-on-startup&gt;</code> or <code>@WebServlet(loadOnStartup)</code> value greater than <code>0</code>, then its <code>init()</code> method will also immediately be invoked during startup. Those servlets are initialized in the same order as \"load-on-startup\" value represents, or if they are the same, then the order in the <code>web.xml</code> or <code>@WebServlet</code> classloading. Or, if the \"load-on-startup\" value is absent, then the <code>init()</code> method will only be invoked on very first HTTP request hitting the servlet in question. </p>\n\n<h2>HttpServletRequest and HttpServletResponse</h2>\n\n<p>The servletcontainer is attached to a webserver which listens on HTTP requests on a certain port number, which is usually 8080 in development and 80 in production. When a client (user with a webbrowser) sends a HTTP request, the servletcontainer will create new <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html\"><code>HttpServletRequest</code></a> and <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html\"><code>HttpServletResponse</code></a> objects and pass it through the methods of the already-created <code>Filter</code> and <code>Servlet</code> instances whose <code>url-pattern</code> matches the request URL, all in the same thread. </p>\n\n<p>The request object provides access to all information of the HTTP request, such as the request headers and the request body. The response object provides facility to control and send the HTTP response the way you want, such as setting headers and the body (usually with HTML content from a JSP file). When the HTTP response is committed and finished, then both the request and response objects will be trashed.</p>\n\n<h2>HttpSession</h2>\n\n<p>When a client visits the webapp for the first time and/or the <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html\"><code>HttpSession</code></a> is to be obtained for the first time by <code>request.getSession()</code>, then the servletcontainer will create it, generate a long and unique ID (which you can get by <code>session.getId()</code>) and store it in server's memory. The servletcontainer will also set a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/Cookie.html\"><code>Cookie</code></a> in the <code>Set-Cookie</code> header of the HTTP response with <code>JSESSIONID</code> as cookie name and the unique session ID as cookie value. </p>\n\n<p>As per the <a href=\"http://www.faqs.org/rfcs/rfc2965.html\">HTTP cookie specification</a> (a contract a decent webbrowser and webserver has to adhere), the client (the webbrowser) is required to send this cookie back in the subsequent requests in the <code>Cookie</code> header as long as the cookie is valid. Using browser builtin HTTP traffic monitor you can check them (press F12 in Chrome / Firefox23+ / IE9+ and check <em>Net/Network</em> tab). The servletcontainer will determine the <code>Cookie</code> header of every incoming HTTP request for the presence of the cookie with the name <code>JSESSIONID</code> and use its value (the session ID) to get the associated <code>HttpSession</code> from server's memory.</p>\n\n<p>The <code>HttpSession</code> lives until it has not been used for more than the <code>&lt;session-timeout&gt;</code> time, a setting you can specify in <code>web.xml</code>, which defaults to 30 minutes. So when the client doesn't visit the webapp anymore for over 30 minutes, then the servletcontainer will trash the session. Every subsequent request, even though with the cookie specified, will not have access to the same session anymore. The servletcontainer will create a new one. </p>\n\n<p>On the other hand, the session cookie on the client side has a default lifetime which is as long as the browser instance is running. So when the client closes the browser instance (all tabs/windows), then the session will be trashed at the client side. In a new browser instance the cookie associated with the session won't be sent anymore. A new <code>request.getSession()</code> would return a brand new <code>HttpSession</code> and set a cookie with a brand new session ID.</p>\n\n<h2>In a nutshell</h2>\n\n<ul>\n<li>The <code>ServletContext</code> lives as long as the webapp lives. It's been shared among <em>all</em> requests in <em>all</em> sessions.</li>\n<li>The <code>HttpSession</code> lives as long as the client is interacting with the webapp with the same browser instance and the session hasn't timed out at the server side yet. It's been shared among <em>all</em> requests in the <em>same</em> session.</li>\n<li>The <code>HttpServletRequest</code> and <code>HttpServletResponse</code> lives as long as the client has sent it until the complete response (the webpage) is arrived. It is <em>not</em> being shared elsewhere.</li>\n<li>Any <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> lives as long as the webapp lives. They are being shared among <em>all</em> requests in <em>all</em> sessions.</li>\n<li>Any <code>attribute</code> which you set in <code>ServletContext</code>, <code>HttpServletRequest</code> and <code>HttpSession</code> will live as long as the object in question lives.</li>\n</ul>\n\n<h2>Threadsafety</h2>\n\n<p>That said, your major concern is possibly <em>threadsafety</em>. You should now have learnt that Servlets and filters are shared among all requests. That's the nice thing of Java, it's multithreaded and different threads (read: HTTP requests) can make use of the same instance. It would otherwise have been too expensive to recreate it on every request.</p>\n\n<p>But you should also realize that you should <strong>never</strong> assign any request or session scoped data as an <em>instance</em> variable of a servlet or filter. It will be shared among all other requests in other sessions. That's <em>threadunsafe</em>! The below example illustrates that:</p>\n\n<pre><code>public class ExampleServlet extends HttpServlet {\n\n    private Object thisIsNOTThreadSafe;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        Object thisIsThreadSafe;\n\n        thisIsNOTThreadSafe = request.getParameter(\"foo\"); // BAD!! Shared among all requests!\n        thisIsThreadSafe = request.getParameter(\"foo\"); // OK, this is thread safe.\n    } \n}\n</code></pre>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp\">What is the difference between JSF, Servlet and JSP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1700390/best-option-for-session-management-in-java\">Best option for Session management in Java</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2349633/doget-and-dopost-in-servlets\">doGet and doPost in Servlets</a></li>\n<li><a href=\"http://stackoverflow.com/questions/8011138/servlet-seems-to-handle-multiple-concurrent-requests-synchronously/\">Servlet seems to handle multiple concurrent requests synchronously</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Sessions</h2>\n\n<p><img src=\"http://i.stack.imgur.com/ABDSX.png\" alt=\"enter image description here\">\n<img src=\"http://i.stack.imgur.com/IWAF3.png\" alt=\"enter image description here\"></p>\n\n<p>In short: the web server issues a unique identifier to <em>each visitor</em> on his <em>first</em> visit. The visitor must bring back that ID for him to be recognised next time around. This identifier also allows the server to properly segregate objects owned by one session against that of another.</p>\n\n<h2>Servlet Instantiation</h2>\n\n<p>If <strong>load-on-startup</strong> is <strong>false</strong>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/Jjvcb.png\" alt=\"enter image description here\">\n<img src=\"http://i.stack.imgur.com/7Bw3x.png\" alt=\"enter image description here\"></p>\n\n<p>If <strong>load-on-startup</strong> is <strong>true</strong>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/t33bd.png\" alt=\"enter image description here\">\n<img src=\"http://i.stack.imgur.com/e7BB7.png\" alt=\"enter image description here\"></p>\n\n<p>Once he's on the service mode and on the groove, the <em>same</em> servlet will work on the requests from all other clients. </p>\n\n<p><img src=\"http://i.stack.imgur.com/gqoR4.png\" alt=\"enter image description here\"></p>\n\n<p>Why isn't it a good idea to have one instance per client? Think about this: Will you hire one pizza guy for every order that came? Do that and you'd be out of business in no time.</p>\n\n<p>It comes with a small risk though. Remember: this single guy holds all the order information in his pocket: so if you're not cautious about <a href=\"http://tutorials.jenkov.com/java-servlets/servlet-concurrency.html\">thread safety on servlets</a>, he may end up giving the wrong order to a certain client.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Session in Java servlets is the same as session in other languages such as PHP.  It is unique to the user.  The server can keep track of it in different ways such as cookies, url rewriting etc.  This <a href=\"http://java.sun.com/products/servlet/2.2/javadoc/javax/servlet/http/HttpSession.html\">Java doc</a> article explains it in the context of Java servlets and indicates that exactly how session is maintained is an implementation detail left to the designers of the server.  The specification only stipulates that it must be maintained as unique to a user across multiple connections to the server.  Check out <a href=\"http://download.oracle.com/docs/cd/A97336_01/buslog.102/a83726/tecbkgn2.htm\">this article from Oracle</a> for more information about both of your questions.</p>\n\n<p><strong>Edit</strong> There is an excellent tutorial <a href=\"http://www.apl.jhu.edu/~hall/java/Servlet-Tutorial/Servlet-Tutorial-Session-Tracking.html\">here</a> on how to work with session inside of servlets. And <a href=\"http://docs.oracle.com/javaee/5/tutorial/doc/bnafd.html\">here</a> is a chapter from Sun about Java Servlets, what they are and how to use them.  Between those two articles, you should be able to answer all of your questions.  </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When the servletcontainer (like Apache Tomcat) starts up, it will read from web.xml file (only one per application)if any thing goes wrong shows up error at container side console or it will deploy and load all webapplications by using web.xml (so named it as deployment descriptor).</p>\n\n<p>During instantiation phase of servlet ,servletInstance is ready but it cannot serve the client request because it is missing with two pieces of information \n1:context information\n2:initial configuration information\nServletengine creates servletConfig interface object encapsulating the above missing information into it\nservlet engine calls init() of servlet by suplying servletconfig object references as argument.Once init() is completedly executed servlet is ready to server the client request. </p>\n\n<h3>Q) In the life time of servlet how many times instantiation and initaialization happens ??</h3>\n\n<p>A)only once (for every client request a new thread is created)\nonly one instance of the servlet serves any number of the client request ie,after serving one client request server does not die.It waits for other client requests \nie what CGI(for every client request a new process is created) limitation is overcome with servlet(internally servlet engine creates thread)</p>\n\n<h3>Q)How session concept works?</h3>\n\n<p>A)whenever getSession() is called on HttpServletRequest object </p>\n\n<p>Step 1:request object is evalauated for incoming session ID</p>\n\n<p>Step 2:if ID not avaiable a brand new HttpSession object is created and its corresponding session ID is generated (ie of HashTable) session ID is stored into httpservlet response object and the reference of HttpSession object is returned to servlet (doGet/doPost). </p>\n\n<p>Step 3:if Id avaiable brand new session object is not created session id is picked up from the request object search is made in the collection of sessions by using session ID as the key Once the search is sucessful session id is stored into HttpServletResponse and the exsisting  session object references is returned to the doGet or doPost() of UserDefineservlet.</p>\n\n<h3>Note:</h3>\n\n<p>1)when control leaves from servlet code to client dont forget that session object is being hold by servletcontainer ie, servletengine</p>\n\n<p>2)multithreading is left to servlet devlopers people for implementing ie., handle the multiple request of client nothing to bother about multithread code </p>\n\n<h3>Inshort form:</h3>\n\n<p>A servlet is created when the application starts (it is deployed on the servlet container) or when it is first accessed (depending on the load-on-startup setting)\nwhen the servlet is instantiated, the init() method of the servlet is called\nthen the servlet (its one and only instance) handles all requests (its service() method being called by multiple threads). That's why it is not advisable to have any synchronization in it, and you should avoid instance variables of the servlet\nwhen the application is undeployed (the servlet container stops), the destroy() method is called.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Sessions</strong> - what Chris Thompson said.</p>\n\n<p><strong>Instantiation</strong> - a servlet is instantiated when the container receives the first request mapped to the servlet (unless the servlet is configured to load on startup with the <code>&lt;load-on-startup&gt;</code> element in <code>web.xml</code>). The same instance is used to serve subsequent requests.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The Servlet Specification JSR-315 clearly defines the web container behavior in the service (and doGet, doPost, doPut etc.) methods (2.3.3.1 Multithreading Issues, Page 9):</p>\n\n<p>\"A servlet container may send concurrent requests through the service method of the servlet. To handle the requests, the Servlet Developer must make adequate provisions for concurrent processing with multiple threads in the service method.</p>\n\n<p>Although it is not recommended, an alternative for the Developer is to implement the SingleThreadModel interface which requires the container to guarantee that there is only one request thread at a time in the service method. A servlet container may satisfy this requirement by serializing requests on a servlet, or by maintaining a pool of servlet instances. If the servlet is part of a Web application that has been marked as distributable, the container may maintain a pool of servlet instances in each JVM that the application is distributed across.</p>\n\n<p>For servlets not implementing the SingleThreadModel interface, if the service method (or methods such as doGet or doPost which are dispatched to the service method of the HttpServlet abstract class) has been defined with the synchronized keyword, the servlet container cannot use the instance pool approach, but must serialize requests through it. It is strongly recommended that Developers not synchronize the service method (or methods dispatched to it) in these circumstances because of detrimental effects on performance\".</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>You are a victim of <a href=\"//en.wikipedia.org/wiki/Branch_predictor\">branch prediction</a> fail.</strong></p>\n\n<hr>\n\n<h2>What is Branch Prediction?</h2>\n\n<p>Consider a railroad junction:</p>\n\n<p><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\"><img src=\"//i.stack.imgur.com/muxnt.jpg\" alt=\"\"></a>\n<sub><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=\"//creativecommons.org/licenses/by-sa/3.0/deed.en\">CC-By-SA 3.0</a> license.</sub></p>\n\n<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>\n\n<p>You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the captain which direction he wants. And then you set the switch appropriately.</p>\n\n<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>\n\n<p>Is there a better way? You guess which direction the train will go!</p>\n\n<ul>\n<li>If you guessed right, it continues on.</li>\n<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the train will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>\n\n<hr>\n\n<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>\n\n<p><img src=\"//i.stack.imgur.com/pyfwC.png\" alt=\"enter image description here\"></p>\n\n<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>\n\n<p><em>Modern processors are complicated and have long pipelines. So they take forever to \"warm up\" and \"slow down\".</em></p>\n\n<p>Is there a better way? You guess which direction the branch will go!</p>\n\n<ul>\n<li>If you guessed right, you continue executing.</li>\n<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>\n\n<hr>\n\n<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>\n\n<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...</p>\n\n<p><strong><em>In other words, you try to identify a pattern and follow it.</em></strong> This is more or less how branch predictors work.</p>\n\n<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>\n\n<p>Further reading: <a href=\"//en.wikipedia.org/wiki/Branch_predictor\">\"Branch predictor\" article on Wikipedia</a>.</p>\n\n<hr>\n\n<h2>As hinted from above, the culprit is this if-statement:</h2>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>Notice that the data is evenly distributed between 0 and 255. \nWhen the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>\n\n<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times.\nEven a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>\n\n<p><strong>Quick visualization:</strong></p>\n\n<pre><code>T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n</code></pre>\n\n<p>However, when the data is completely random, the branch predictor is rendered useless because it can't predict random data.\nThus there will probably be around 50% misprediction. (no better than random guessing)</p>\n\n<pre><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\n\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\n</code></pre>\n\n<hr>\n\n<p><strong>So what can be done?</strong></p>\n\n<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>\n\n<p>Replace:</p>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>int t = (data[c] - 128) &gt;&gt; 31;\nsum += ~t &amp; data[c];\n</code></pre>\n\n<p>This eliminates the branch and replaces it with some bitwise operations.</p>\n\n<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>\n\n<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>\n\n<p>C++ - Visual Studio 2010 - x64 Release</p>\n\n<pre><code>//  Branch - Random\nseconds = 11.777\n\n//  Branch - Sorted\nseconds = 2.352\n\n//  Branchless - Random\nseconds = 2.564\n\n//  Branchless - Sorted\nseconds = 2.587\n</code></pre>\n\n<p>Java - Netbeans 7.1.1 JDK 7 - x64</p>\n\n<pre><code>//  Branch - Random\nseconds = 10.93293813\n\n//  Branch - Sorted\nseconds = 5.643797077\n\n//  Branchless - Random\nseconds = 3.113581453\n\n//  Branchless - Sorted\nseconds = 3.186068823\n</code></pre>\n\n<p>Observations:</p>\n\n<ul>\n<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>\n<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>\n<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>\n</ul>\n\n<p>A general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)</p>\n\n<hr>\n\n<p><strong>Update :</strong></p>\n\n<ul>\n<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p></li>\n<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p></li>\n<li><p>Intel Compiler 11 does something miraculous. It <a href=\"//en.wikipedia.org/wiki/Loop_interchange\">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p></li>\n<li><p>If you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p></li>\n</ul>\n\n<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Branch prediction. With a sorted array, the condition <code>data[c] &gt;= 128</code> is first false for a streak of values, then becomes true for all later values. That's easy to predict. With an unsorted array, you pay the branching cost.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The reason why the performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in <a href=\"http://stackoverflow.com/users/922184/mysticial\">Mysticial</a>'s answer.</p>\n\n<p>Now, if we look at the code</p>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>we can find that the meaning of this particular <code>if... else...</code> branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a <strong>conditional move</strong> statement, which would be compiled into a conditional move instruction: <code>cmovl</code>, in an <code>x86</code> system. The branch and thus the potential branch prediction penalty is removed.</p>\n\n<p>In <code>C</code>, thus <code>C++</code>, the statment, which would compile directly (without any optimization) into the conditional move instruction in <code>x86</code>, is the ternary operator <code>... ? ... : ...</code>. So we rewrite the above statement into an equivalent one:</p>\n\n<pre><code>sum += data[c] &gt;=128 ? data[c] : 0;\n</code></pre>\n\n<p>While maintaining readability, we can check the speedup factor.</p>\n\n<p>On an Intel <a href=\"http://en.wikipedia.org/wiki/Intel_Core#Core_i7\">Core i7</a>-2600K @ 3.4GHz and Visual Studio 2010 Release Mode,\nthe benchmark is (format copied from Mysticial):</p>\n\n<p><strong>x86</strong></p>\n\n<pre><code>//  Branch - Random\nseconds = 8.885\n\n//  Branch - Sorted\nseconds = 1.528\n\n//  Branchless - Random\nseconds = 3.716\n\n//  Branchless - Sorted\nseconds = 3.71\n</code></pre>\n\n<p><strong>x64</strong></p>\n\n<pre><code>//  Branch - Random\nseconds = 11.302\n\n//  Branch - Sorted\n seconds = 1.830\n\n//  Branchless - Random\nseconds = 2.736\n\n//  Branchless - Sorted\nseconds = 2.737\n</code></pre>\n\n<p>The result is robust in multiple tests. We get great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.</p>\n\n<p>Now let's look more closely by investigating at the <code>x86</code> assembly they generate. For simplicity, we use two functions <code>max1</code> and <code>max2</code>.</p>\n\n<p><code>max1</code> uses the conditional branch <code>if... else ...</code>:</p>\n\n<pre><code>int max1(int a, int b) {\n    if (a &gt; b)\n        return a;\n    else\n        return b;\n}\n</code></pre>\n\n<p><code>max2</code> uses the ternary operator <code>... ? ... : ...</code>:</p>\n\n<pre><code>int max2(int a, int b) {\n    return a &gt; b ? a : b;\n}\n</code></pre>\n\n<p>On a x86-64 machine, <code>GCC -S</code> generates the assembly below.</p>\n\n<pre><code>:max1\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %eax\n    cmpl    -8(%rbp), %eax\n    jle     .L2\n    movl    -4(%rbp), %eax\n    movl    %eax, -12(%rbp)\n    jmp     .L4\n.L2:\n    movl    -8(%rbp), %eax\n    movl    %eax, -12(%rbp)\n.L4:\n    movl    -12(%rbp), %eax\n    leave\n    ret\n\n:max2\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %eax\n    cmpl    %eax, -8(%rbp)\n    cmovge  -8(%rbp), %eax\n    leave\n    ret\n</code></pre>\n\n<p><code>max2</code> uses much less code due to the usage of instruction <code>cmovge</code>. But the real gain is that <code>max2</code> does not involve branch jumps, <code>jmp</code>, which would have a significant performance penalty if the predicted result is not right.</p>\n\n<p>So why can a conditional move perform better?</p>\n\n<p>In a typical <code>x86</code> processor, the execution of an instruction is divided to several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called <strong><a href=\"http://en.wikipedia.org/wiki/Pipeline_%28computing%29\">pipelining</a></strong>.</p>\n\n<p>In a branch case, the following instruction is determined by the preceding one, so we can not do pipelining. We have to either wait or predict.</p>\n\n<p>In a conditional move case, the execution conditional move instruction is divided into several stages, but the earlier stages like <code>Fetch</code>, <code>Decode</code>, does not depend on the result of previous instruction, only latter stages need the result. So we wait a fraction of one instruction's execution time. This is why the conditional move version is slower than the branch when prediction is easy.</p>\n\n<p>The book <em><a href=\"http://rads.stackoverflow.com/amzn/click/0136108040\">Computer Systems: A Programmer's Perspective, second edition</a></em> explains this in detail. You can check Section 3.6.6 for <em>Conditional Move Instructions</em>, entire Chapter 4 for <em>Processor Architecture</em>, and Section 5.11.2 for a special treatment for <em>Branch Prediction and Misprediction Penalties</em>.</p>\n\n<p>Sometimes, some modern compilers can optimize our code to assembly with better performance, sometimes some compilers can't (the code in question is using Visual Studio's native compiler). Knowing the performance difference between branch and conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are curious about even more optimizations that can be done to this code, consider this... Starting with the original loop:</p>\n\n<pre><code>for (unsigned i = 0; i &lt; 100000; ++i)\n{\n    for (unsigned j = 0; j &lt; arraySize; ++j)\n    {\n        if (data[j] &gt;= 128)\n            sum += data[j];\n    }\n}\n</code></pre>\n\n<p>With loop interchange, we can safely change this loop to:</p>\n\n<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)\n{\n    for (unsigned i = 0; i &lt; 100000; ++i)\n    {\n        if (data[j] &gt;= 128)\n            sum += data[j];\n    }\n}\n</code></pre>\n\n<p>Then, you can see that the \"if\" conditional is constant throughout the execution of the \"i\" loop, so you can hoist the \"if\" out:</p>\n\n<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)\n{\n    if (data[j] &gt;= 128)\n    {\n        for (unsigned i = 0; i &lt; 100000; ++i)\n        {\n            sum += data[j];\n        }\n    }\n}\n</code></pre>\n\n<p>Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (/fp:fast is thrown, for example)</p>\n\n<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)\n{\n    if (data[j] &gt;= 128)\n    {\n        sum += data[j] * 100000;\n    }\n}\n</code></pre>\n\n<p>That one is 100,000x faster than before (-8</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>No doubt some of us would be interested in ways of identifying code that is problematic for the CPU's branch-predictor. The Valgrind tool <code>cachegrind</code> has a branch-predictor simulator, enabled by using the <code>--branch-sim=yes</code> flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with <code>g++</code>, gives these results:</p>\n\n<p><strong>Sorted:</strong></p>\n\n<pre><code>==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)\n==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)\n==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )\n</code></pre>\n\n<p><strong>Unsorted:</strong></p>\n\n<pre><code>==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)\n==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)\n==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )\n</code></pre>\n\n<p>Drilling down into the line-by-line output produced by <code>cg_annotate</code> we see for the loop in question:</p>\n\n<p><strong>Sorted:</strong></p>\n\n<pre><code>          Bc    Bcm Bi Bim\n      10,001      4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\n           .      .  .   .      {\n           .      .  .   .          // primary loop\n 327,690,000 10,016  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\n           .      .  .   .          {\n 327,680,000 10,006  0   0              if (data[c] &gt;= 128)\n           0      0  0   0                  sum += data[c];\n           .      .  .   .          }\n           .      .  .   .      }\n</code></pre>\n\n<p><strong>Unsorted:</strong></p>\n\n<pre><code>          Bc         Bcm Bi Bim\n      10,001           4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\n           .           .  .   .      {\n           .           .  .   .          // primary loop\n 327,690,000      10,038  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\n           .           .  .   .          {\n 327,680,000 164,050,007  0   0              if (data[c] &gt;= 128)\n           0           0  0   0                  sum += data[c];\n           .           .  .   .          }\n           .           .  .   .      }\n</code></pre>\n\n<p>This lets you easily identify the problematic line - in the unsorted version the <code>if (data[c] &gt;= 128)</code> line is causing 164,050,007 mispredicted conditional branches (<code>Bcm</code>) under cachegrind's branch-predictor model, whereas it's only causing 10,006 in the sorted version.</p>\n\n<hr>\n\n<p>Alternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.</p>\n\n<pre><code>perf stat ./sumtest_sorted\n</code></pre>\n\n<p><strong>Sorted:</strong></p>\n\n<pre><code> Performance counter stats for './sumtest_sorted':\n\n  11808.095776 task-clock                #    0.998 CPUs utilized          \n         1,062 context-switches          #    0.090 K/sec                  \n            14 CPU-migrations            #    0.001 K/sec                  \n           337 page-faults               #    0.029 K/sec                  \n26,487,882,764 cycles                    #    2.243 GHz                    \n41,025,654,322 instructions              #    1.55  insns per cycle        \n 6,558,871,379 branches                  #  555.455 M/sec                  \n       567,204 branch-misses             #    0.01% of all branches        \n\n  11.827228330 seconds time elapsed\n</code></pre>\n\n<p><strong>Unsorted:</strong></p>\n\n<pre><code> Performance counter stats for './sumtest_unsorted':\n\n  28877.954344 task-clock                #    0.998 CPUs utilized          \n         2,584 context-switches          #    0.089 K/sec                  \n            18 CPU-migrations            #    0.001 K/sec                  \n           335 page-faults               #    0.012 K/sec                  \n65,076,127,595 cycles                    #    2.253 GHz                    \n41,032,528,741 instructions              #    0.63  insns per cycle        \n 6,560,579,013 branches                  #  227.183 M/sec                  \n 1,646,394,749 branch-misses             #   25.10% of all branches        \n\n  28.935500947 seconds time elapsed\n</code></pre>\n\n<p>It can also do source code annotation with dissassembly.</p>\n\n<pre><code>perf record -e branch-misses ./sumtest_unsorted\nperf annotate -d sumtest_unsorted\n</code></pre>\n\n\n\n<pre><code> Percent |      Source code &amp; Disassembly of sumtest_unsorted\n------------------------------------------------\n...\n         :                      sum += data[c];\n    0.00 :        400a1a:       mov    -0x14(%rbp),%eax\n   39.97 :        400a1d:       mov    %eax,%eax\n    5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax\n    4.60 :        400a26:       cltq   \n    0.00 :        400a28:       add    %rax,-0x30(%rbp)\n...\n</code></pre>\n\n<p>See <a href=\"https://perf.wiki.kernel.org/index.php/Tutorial\">the performance tutorial</a> for more details.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just read up on the thread and I feel an answer is missing. A common way to eliminate branch prediction that I've found to work particularly good in managed languages is a table lookup instead of using a branch. (although I haven't tested it in this case)</p>\n\n<p>This approach works in general if:</p>\n\n<ol>\n<li>It's a small table and is likely to be cached in the processor</li>\n<li>You are running things in a quite tight loop and/or the processor can pre-load the data</li>\n</ol>\n\n<p><strong>Background and why</strong></p>\n\n<p>Pfew, so what the hell is that supposed to mean?</p>\n\n<p>From a processor perspective, your memory is slow. To compensate for the difference in speed, they build in a couple of caches in your processor (L1/L2 cache) that compensate for that. So imagine that you're doing your nice calculations and figure out that you need a piece of memory. The processor will get his 'load' operation and loads the piece of memory into cache - and then uses the cache to do the rest of the calculations. Because memory is relatively slow, this 'load' will slow down your program. </p>\n\n<p>Like branch prediction, this was optimized in the Pentium processors: the processor predicts that it needs to load a piece of data and attempts to load that into the cache before the operation actually hits the cache. As we've already seen, branch prediction sometimes goes horribly wrong -- in the worst case scenario you need to go back and actually wait for a memory load, which will take forever (<strong>in other words: failing branch prediction is bad, a memory load after a branch prediction fail is just horrible!</strong>).</p>\n\n<p>Fortunately for us, if the memory access pattern is predictable, the processor will load it in its fast cache and all is well.</p>\n\n<p>First thing we need to know is what is <em>small</em>? While smaller is generally better, a rule of thumb is to stick to lookup tables that are &lt;=4096 bytes in size. As an upper limit: if your lookup table is larger than 64K it's probably worth reconsidering.</p>\n\n<p><strong>Constructing a table</strong></p>\n\n<p>So we've figured out that we can create a small table. Next thing to do is get a lookup function in place. Lookup functions are usually small functions that use a couple of basic integer operations (and, or, xor, shift, add, remove and perhaps a multiply). What you want is to have your input translated by the lookup function to some kind of 'unique key' in your table, which then simply gives you the answer of all the work you wanted it to do.</p>\n\n<p>In this case: &gt;=128 means we can keep the value, &lt;128 means we get rid of it. The easiest way to do that is by using an 'AND': if we keep it, we AND it with 7FFFFFFF ; if we want to get rid of it, we AND it with 0. Notice also that 128 is a power of 2 -- so we can go ahead and make a table of 32768/128 integers and fill it with one zero and a lot of 7FFFFFFFF's.</p>\n\n<p><strong>Managed languages</strong></p>\n\n<p>You might wonder why this works well in managed languages. After all, managed languages check the boundaries of the arrays with a branch to ensure you don't mess up...</p>\n\n<p>Well, not exactly... :-)</p>\n\n<p>There has been quite some work on eliminating this branch for managed languages. For example:</p>\n\n<pre><code>for (int i=0; i&lt;array.Length; ++i)\n   // use array[i]\n</code></pre>\n\n<p>in this case it's obvious to the compiler that the boundary condition will never hit. At least the Microsoft JIT compiler (but I expect Java does similar things) will notice this and remove the check all together. WOW - that means no branch. Similarly, it will deal with other obvious cases.</p>\n\n<p>If you run into trouble with lookups on managed languages - the key is to add a <code>&amp; 0x[something]FFF</code> to your lookup function to make the boundary check predictable - and watch it going faster.</p>\n\n<p><strong>The result for this case</strong></p>\n\n<pre><code>// generate data\nint arraySize = 32768;\nint[] data = new int[arraySize];\n\nRandom rnd = new Random(0);\nfor (int c = 0; c &lt; arraySize; ++c)\n    data[c] = rnd.Next(256);\n\n\n// Too keep the spirit of the code in-tact I'll make a separate lookup table\n// (I assume we cannot modify 'data' or the number of loops)\nint[] lookup = new int[256];\n\nfor (int c = 0; c &lt; 256; ++c)\n    lookup[c] = (c &gt;= 128) ? c : 0;\n\n// test\nDateTime startTime = System.DateTime.Now;\nlong sum = 0;\n\nfor (int i = 0; i &lt; 100000; ++i)\n{\n    // primary loop\n    for (int j = 0; j &lt; arraySize; ++j)\n    {\n        // here you basically want to use simple operations - so no \n        // random branches, but things like &amp;, |, *, -, +, etc are fine.\n        sum += lookup[data[j]];\n    }\n}\n\nDateTime endTime = System.DateTime.Now;\nConsole.WriteLine(endTime - startTime);\nConsole.WriteLine(\"sum = \" + sum);\n\nConsole.ReadLine();\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As data is distributed between 0 and 255 when array is sorted, around first half of the iterations will not enter the if-statement (if statement shared below).</p>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>Question is what make the above statement not execute in certain case as in case of sorted data? Here comes the \"Branch predictor\" a branch predictor is a digital circuit that tries to guess which way a branch (e.g. an if-then-else structure) will go before this is known for sure. The purpose of the branch predictor is to improve the flow in the instruction pipeline. Branch predictors play a critical role in achieving high effective performance!</p>\n\n<p><strong>Lets do some bench marking to understand it better</strong></p>\n\n<p>The performance of an if-statement depends on whether its condition has a predictable pattern. If the condition is always true or always false, the branch prediction logic in the processor will pick up the pattern. On the other hand, if the pattern is unpredictable, the if-statement will be much more expensive.</p>\n\n<p>Let\u2019s measure the performance of this loop with different conditions:</p>\n\n<pre><code>for (int i = 0; i &lt; max; i++) if (condition) sum++;\n</code></pre>\n\n<p>Here are the timings of the loop with different True-False patterns:</p>\n\n<pre><code>Condition           Pattern              Time (ms)\n\n(i &amp; 0\u00d780000000) == 0   T repeated        322\n\n(i &amp; 0xffffffff) == 0   F repeated        276\n\n(i &amp; 1) == 0            TF alternating    760\n\n(i &amp; 3) == 0            TFFFTFFF\u2026         513\n\n(i &amp; 2) == 0            TTFFTTFF\u2026         1675\n\n(i &amp; 4) == 0            TTTTFFFFTTTTFFFF\u2026 1275\n\n(i &amp; 8) == 0            8T 8F 8T 8F \u2026     752\n\n(i &amp; 16) == 0           16T 16F 16T 16F \u2026 490\n</code></pre>\n\n<p>A \u201c<strong>bad</strong>\u201d true-false pattern can make an if-statement up to six times slower than a \u201c<strong>good</strong>\u201d pattern! Of course, which pattern is good and which is bad depends on the exact instructions generated by the compiler and on the specific processor.</p>\n\n<p>So there is no doubt about impact of branch prediction on performance!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One way to avoid branch prediction errors is to build a lookup table, and index it using the data.  Stefan de Bruijn discussed that in his answer.</p>\n\n<p>But in this case, we know values are in the range [0, 255] and we only care about values &gt;= 128.  That means we can easily extract a single bit that will tell us whether we want a value or not: by shifting the data to the right 7 bits, we are left with a 0 bit or a 1 bit, and we only want to add the value when we have a 1 bit.  Let's call this bit the \"decision bit\".</p>\n\n<p>By using the 0/1 value of the decision bit as an index into an array, we can make code that will be equally fast whether the data is sorted or not sorted.  Our code will always add a value, but when the decision bit is 0, we will add the value somewhere we don't care about.  Here's the code:</p>\n\n<pre><code>// Test\nclock_t start = clock();\nlong long a[] = {0, 0};\nlong long sum;\n\nfor (unsigned i = 0; i &lt; 100000; ++i)\n{\n    // Primary loop\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n    {\n        int j = (data[c] &gt;&gt; 7);\n        a[j] += data[c];\n    }\n}\n\ndouble elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\nsum = a[1];\n</code></pre>\n\n<p>This code wastes half of the adds, but never has a branch prediction failure.  It's tremendously faster on random data than the version with an actual if statement.</p>\n\n<p>But in my testing, an explicit lookup table was slightly faster than this, probably because indexing into a lookup table was slightly faster than bit shifting.  This shows how my code sets up and uses the lookup table (unimaginatively called <code>lut</code> for \"LookUp Table\" in the code).  Here's the C++ code:</p>\n\n<pre><code>// declare and then fill in the lookup table\nint lut[256];\nfor (unsigned c = 0; c &lt; 256; ++c)\n    lut[c] = (c &gt;= 128) ? c : 0;\n\n// use the lookup table after it is built\nfor (unsigned i = 0; i &lt; 100000; ++i)\n{\n    // Primary loop\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n    {\n        sum += lut[data[c]];\n    }\n}\n</code></pre>\n\n<p>In this case the lookup table was only 256 bytes, so it fit nicely in cache and all was fast.  This technique wouldn't work well if the data was 24-bit values and we only wanted half of them... the lookup table would be far too big to be practical.  On the other hand, we can combine the two techniques shown above: first shift the bits over, then index a lookup table.  For a 24-bit value that we only want the top half value, we could potentially shift the data right by 12 bits, and be left with a 12-bit value for a table index.  A 12-bit table index implies a table of 4096 values, which might be practical.</p>\n\n<p>EDIT: One thing I forgot to put in.</p>\n\n<p>The technique of indexing into an array, instead of using an <code>if</code> statement, can be used for deciding which pointer to use.  I saw a library that implemented binary trees, and instead of having two named pointers (<code>pLeft</code> and <code>pRight</code> or whatever) had a length-2 array of pointers, and used the \"decision bit\" technique to decide which one to follow.  For example, instead of:</p>\n\n<pre><code>if (x &lt; node-&gt;value)\n    node = node-&gt;pLeft;\nelse\n    node = node-&gt;pRight;\n</code></pre>\n\n<p>this library would do something like:</p>\n\n<pre><code>i = (x &lt; node-&gt;value);\nnode = node-&gt;link[i];\n</code></pre>\n\n<p>Here's a link to this code: <a href=\"http://www.eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx\">Red Black Trees</a>, <em>Eternally Confuzzled</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.</p>\n\n<p>Indeed, the array is partitioned in a contiguous zone with <code>data &lt; 128</code> and another with <code>data &gt;= 128</code>. So you should find the partition point with a dichotomic search (using <code>Lg(arraySize) = 15</code> comparisons), then do a straight accumulation from that point.</p>\n\n<p>Something like (unchecked)</p>\n\n<pre><code>int i= 0, j, k= arraySize;\nwhile (i &lt; k)\n{\n  j= (i + k) &gt;&gt; 1;\n  if (data[j] &gt;= 128)\n    k= j;\n  else\n    i= j;\n}\nsum= 0;\nfor (; i &lt; arraySize; i++)\n  sum+= data[i];\n</code></pre>\n\n<p>or, slightly more obfuscated</p>\n\n<pre><code>int i, k, j= (i + k) &gt;&gt; 1;\nfor (i= 0, k= arraySize; i &lt; k; (data[j] &gt;= 128 ? k : i)= j)\n  j= (i + k) &gt;&gt; 1;\nfor (sum= 0; i &lt; arraySize; i++)\n  sum+= data[i];\n</code></pre>\n\n<p>A yet faster approach, that gives an <strong>approximate</strong> solution for both sorted or unsorted is: <code>sum= 3137536;</code> (assuming a truly uniform distribution, 16384 samples with expected value 191.5) <strong>:-)</strong></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The above behavior is happening because of Branch prediction.</p>\n\n<p>To understand branch prediction one must first understand <strong>Instruction Pipeline</strong>:</p>\n\n<p>Any instruction is broken into sequence of steps so that different steps can be executed concurrently in parallel. This technique is known as instruction pipeline and this is used to increase throughput in modern processors. To understand this better please see the example <a href=\"https://en.wikipedia.org/wiki/Pipeline_(computing)#Concept_and_motivation\">https://en.wikipedia.org/wiki/Pipeline_(computing)#Concept_and_motivation</a></p>\n\n<p>Generally modern processors have quite long pipelines, but for ease let's consider these 4 steps only.</p>\n\n<ol>  \n  <li>IF -- Fetch the instruction from memory \n  </li><li>ID -- Decode the instruction\n  </li><li>EX -- Execute the instruction \n  </li><li>WB -- Write back to CPU register\n</li></ol>\n\n<p><strong><em>4-stage pipeline in general for 2 instructions.</em></strong>\n<img src=\"http://i.stack.imgur.com/PqBBR.png\" alt=\"4-stage pipeline in general\"></p>\n\n<p>Moving back to the above question let's consider the following instructions:</p>\n\n<pre><code>                        A) if (data[c] &gt;= 128)\n                                /\\\n                               /  \\\n                              /    \\\n                        true /      \\ false\n                            /        \\\n                           /          \\\n                          /            \\\n                         /              \\\n              B) sum += data[c];          C) for loop or print().\n</code></pre>\n\n<p>Without branch prediction the following would occur:</p>\n\n<p>To execute instruction B or instruction C the processor will have to wait till the instruction A doesn't reach till EX stage in the pipeline, as the decision to go to instruction B or instruction C depends on the result of instruction A. So the pipeline will look like this.</p>\n\n<p><strong><em>when if condition returns true:</em></strong>\n<img src=\"http://i.stack.imgur.com/0H4gP.png\" alt=\"enter image description here\"></p>\n\n<p><strong><em>When if condition returns false:</em></strong>\n<img src=\"http://i.stack.imgur.com/APpca.png\" alt=\"enter image description here\"></p>\n\n<p>As a result of waiting for the result of instruction A, the total CPU cycles spent in the above case (without branch prediction; for both true and false) is 7.</p>\n\n<p><strong>So what is branch prediction?</strong></p>\n\n<p>Branch predictor will tries to guess which way a branch (an if-then-else structure) will go before this is known for sure. It will not wait for the instruction A to reach the EX stage of the pipeline, but it will guess the decision and go onto that instruction (B or C in case of our example).</p>\n\n<p><strong><em>In case of a correct guess, the pipeline looks something like this:</em></strong>\n<img src=\"http://i.stack.imgur.com/ZYUbs.png\" alt=\"enter image description here\"></p>\n\n<p>If it is later detected that the guess was wrong then the partially executed instructions are discarded and the pipeline starts over with the correct branch, incurring a delay. \nThe time that is wasted in case of a branch misprediction is equal to the number of stages in the pipeline from the fetch stage to the execute stage. Modern microprocessors tend to have quite long pipelines so that the misprediction delay is between 10 and 20 clock cycles. The longer the pipeline the greater the need for a good branch predictor. (<a href=\"https://en.wikipedia.org/wiki/Branch_predictor\">https://en.wikipedia.org/wiki/Branch_predictor</a>)</p>\n\n<p>In the OP's code, the first time when the conditional, the branch predictor does not have any information to base up prediction, so first time it will randomly choose the next instruction. Later in the for loop it can base the prediction on the history. \nFor an array sorted in ascending order, there are three possibilities:</p>\n\n<ol>\n<li> All the elements are less than 128\n</li><li> All the elements are greater than 128\n</li><li> Some starting new elements are less than 128 and later it become greater than 128\n</li></ol>\n\n<p>Let us assume that the predictor will always assume the true branch on the first run.</p>\n\n<p>So in the first case it will always take the true branch since historically all its predictions are correct.\nIn the 2nd case, initially it will predict wrong, but after a few iterations it will predict correctly.\nIn the 3rd case it will initially predict correctly till the elements are less than 128. After which it will fail for some time and the correct itself when it see branch prediction failure in history. </p>\n\n<p>In all these cases the failure will be too less in number and as a result only few times it will need to discard the partially executed instructions and start over with the correct branch, resulting in less CPU cycles. </p>\n\n<p>But in case of random unsorted array, the prediction will need to discard the partially executed instructions and start over with the correct branch most of the time and result in more CPU cycles compared to the sorted array.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In the same line (I think this was not highlighted by any answer) it's good to mention that sometimes (specially in software where the performance matters --like in the Linux kernel-- you can find some if statements like the following: </p>\n\n<pre><code>if (likely( everything_is_ok ))\n{\n    /* Do something */\n}\n</code></pre>\n\n<p>or similarly:</p>\n\n<pre><code>if (unlikely(very_improbable_condition))\n{\n    /* Do something */    \n}\n</code></pre>\n\n<p>Both likely() and unlikely() are in fact macros that are defined by using something like the GCC's __builtin_expect to help the compiler insert prediction code to favour the condition taking into account the information provided by the user. GCC supports other builtins that could change the behavior of the running program or emit low level instructions like clearing the cache, etc. The following documentation go through the available GCC's builtins:</p>\n\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\">https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html</a></p>\n\n<p>Normally this kind of optimizations are mainly found in hard-real time applications or embedded systems where execution time matters and it's critical. For example, if you are checking for some error condition that only happens 1/10000000 times, then why not inform the compiler about this? .. this way, by default, the branch prediction would assume that the condition is false. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Frequently used Boolean operations in C++ produce many branches in compiled program. If these branches are inside loops and are hard to predict they can slow down execution significantly. Boolean variables are stored as 8-bit integers with the value <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>.</p>\n\n<p>Boolean variables are overdetermined in the sense that all operators that have Boolean variables as input check if the inputs have any other value than <code>0</code> or <code>1</code>, but operators that have Booleans as output can produce no other value than <code>0</code> or <code>1</code>. This makes operations with Boolean variables as input less efficient than necessary.\nConsider example:</p>\n\n<pre><code>bool a, b, c, d;\nc = a &amp;&amp; b;\nd = a || b;\n</code></pre>\n\n<p>This is typically implemented by the compiler in the following way:</p>\n\n<pre><code>bool a, b, c, d;\nif (a != 0) {\n    if (b != 0) {\n        c = 1;\n    }\n    else {\n        goto CFALSE;\n    }\n}\nelse {\n    CFALSE:\n    c = 0;\n}\nif (a == 0) {\n    if (b == 0) {\n        d = 0;\n    }\n    else {\n        goto DTRUE;\n    }\n}\nelse {\n    DTRUE:\n    d = 1;\n}\n</code></pre>\n\n<p>This code is far from optimal. The branches may take a long time in case of mispredictions. The Boolean operations can be made much more efficient if it is known with certainty that the operands have no other values than <code>0</code> and <code>1</code>. The reason why the compiler does not make such an assumption is that the variables might have other values if they are uninitialized or come from unknown sources. The above code can be optimized if <code>a</code> and <code>b</code> have been initialized to valid values or if they come from operators that produce Boolean output. The optimized code looks like this:</p>\n\n<pre><code>char a = 0, b = 1, c, d;\nc = a &amp; b;\nd = a | b;\n</code></pre>\n\n<p><code>char</code> is used instead of <code>bool</code> in order to make it possible to use the bitwise operators (<code>&amp;</code> and <code>|</code>) instead of the Boolean operators (<code>&amp;&amp;</code> and <code>||</code>). The bitwise operators are single instructions that take only one clock cycle. The OR operator (<code>|</code>) works even if <code>a</code> and <code>b</code> have other values than <code>0</code> or <code>1</code>. The AND operator (<code>&amp;</code>) and the EXCLUSIVE OR operator (<code>^</code>) may give inconsistent results if the operands have other values than <code>0</code> and <code>1</code>.</p>\n\n<p><code>~</code> can not be used for NOT. Instead, you can make a Boolean NOT on a variable which is known to be <code>0</code> or <code>1</code> by XOR'ing it with <code>1</code>:</p>\n\n<pre><code>bool a, b;\nb = !a;\n</code></pre>\n\n<p>can be optimized to:</p>\n\n<pre><code>char a = 0, b;\nb = a ^ 1;\n</code></pre>\n\n<p><code>a &amp;&amp; b</code> cannot be replaced with <code>a &amp; b</code> if <code>b</code> is an expression that should not be evaluated if <code>a</code> is <code>false</code> ( <code>&amp;&amp;</code> will not evaluate <code>b</code>, <code>&amp;</code> will). Likewise, <code>a || b</code> can not be replaced with <code>a | b</code> if <code>b</code> is an expression that should not be evaluated if <code>a</code> is <code>true</code>.</p>\n\n<p>Using bitwise operators is more advantageous if the operands are variables than if the operands are comparisons:</p>\n\n<pre><code>bool a; double x, y, z;\na = x &gt; y &amp;&amp; z &lt; 5.0;\n</code></pre>\n\n<p>is optimal in most cases (unless you expect the <code>&amp;&amp;</code> expression to generate many branch mispredictions).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An official answer would be from </p>\n\n<ol>\n<li><a href=\"https://software.intel.com/en-us/articles/avoiding-the-cost-of-branch-misprediction\">Intel</a>  </li>\n<li><a href=\"https://software.intel.com/en-us/articles/branch-and-loop-reorganization-to-prevent-mispredicts\">Intel</a>  </li>\n<li><a href=\"https://scholar.google.com/scholar?q=branch%20prediction%20computer%20architecture&amp;hl=da&amp;as_sdt=0&amp;as_vis=1&amp;oi=scholart\">Scientific papers</a>  </li>\n<li>Books : J.L. Hennessy, D.A. Patterson: Computer architecture: a quantitative approach</li>\n<li>articles in scientific puplications: T.Y. Yeh, Y.N. Patt made a lot of these on branch predictions.</li>\n</ol>\n\n<p>You can also see from this lovely <a href=\"https://en.wikipedia.org/wiki/Branch_predictor#/media/File:Branch_prediction_2bit_saturating_counter-dia.svg\">diagram</a> why the branch predictor gets confused.</p>\n\n<p><a href=\"http://i.stack.imgur.com/pBMV2.png\"><img src=\"http://i.stack.imgur.com/pBMV2.png\" alt=\"2-bit state diagram\"></a></p>\n\n<p>Each element in the original code is a random value </p>\n\n<pre><code>data[c] = std::rand() % 256;\n</code></pre>\n\n<p>so the predictor will change sides as the std::rand() blow.</p>\n\n<p>On the other hand once its sorted the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in 3 runs through change all the way fron strongly not taken to strongly taken.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Java 5 <code>Arrays.toString(arr)</code> or <code>Arrays.deepToString(arr)</code> for arrays within arrays. Note that Object[] version calls <code>.toString()</code> of each object in array. If my memory serves me correct, the output is even decorated in the exact way you're asking.</p>\n\n<p>Edit: Don't forget to add <code>import java.util.Arrays;</code> like this:</p>\n\n<pre><code>package packageName;\nimport java.util.Arrays;\n...\n</code></pre>\n\n<p>Edit: I had trouble figuring out the rest of this, since I am new. So for all beginners I would like to help them out figuring their projects with this more detailed code example:</p>\n\n<pre><code>*// array of primitives:*\nint[] intArray = new int[] {1, 2, 3, 4, 5};\n*// for when you have other elements (other than strings) use the code below*\nSystem.out.print(Arrays.deepToString(*your arrays name*));\n*//output: [1, 2, 3, 4, 5]*\n\n*// array of object references:*\nString[] strArray = new String[] {\"John\", \"Mary\", \"Bob\"};\n*// you will need to type in the code below to get the output (i.e shown below)*\nSystem.out.print(Arrays.toString(*your arrays name*));\n*//output: [John, Mary, Bob]*\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Always check the standard libraries first.  Try:</p>\n\n<pre><code>System.out.println(Arrays.toString(array));\n</code></pre>\n\n<p>or if your array contains other arrays as elements:</p>\n\n<pre><code>System.out.println(Arrays.deepToString(array));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is nice to know, however, as for \"always check the standard libraries first\" I'd never have stumbled upon the trick of <code>Arrays.toString( myarray )</code></p>\n\n<p>--since I was concentrating on the type of myarray to see how to do this. I didn't want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn't doing it.</p>\n\n<pre><code>import java.util.Arrays;\n.\n.\n.\nSystem.out.println( Arrays.toString( myarray ) );\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're using Java 1.4, you can instead do:</p>\n\n<pre><code>System.out.println(Arrays.asList(array));\n</code></pre>\n\n<p>(This works in 1.5+ too, of course.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In JDK1.8 you can use aggregate operations and a lambda expression:</p>\n\n<pre><code>String[] strArray = new String[] {\"John\", \"Mary\", \"Bob\"};\n\nArrays.asList(strArray).stream().forEach(s -&gt; System.out.println(s));\n\n/* output:\nJohn\nMary\nBob\n*/\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>for(int n: someArray) {\n    System.out.println(n+\" \");\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>Arrays.deepToString(arr)</code> only prints on one line. </p>\n\n<pre><code>int[][] table = new int[2][2];\n</code></pre>\n\n<p>To actually get a table to print as a two dimensional table, I had to do this: </p>\n\n<pre><code>System.out.println(Arrays.deepToString(table).replaceAll(\"],\", \"],\" + System.getProperty(\"line.separator\")));\n</code></pre>\n\n<p>It seems like the <code>Arrays.deepToString(arr)</code> method should take a separator string, but unfortunately it doesn't.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using regular <strong>for</strong> loop is the simplest way of printing array in my opinion.\nHere you have a sample code based on your intArray</p>\n\n<pre><code>for (int i = 0; i &lt; intArray.length; i++) {\n   System.out.print(intArray[i] + \", \");\n}\n</code></pre>\n\n<p>It gives output as yours\n    1, 2, 3, 4, 5</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are several ways one can print an array in java.</p>\n\n<p>-** First one is using Arrays.toString(name of the array)</p>\n\n<p>code example: </p>\n\n<pre><code>               int[] intArray = new int[] {1, 2, 3, 4, 5};\n               System.out.println(Arrays.toString(intArray));\n</code></pre>\n\n<p>-**We can also use Arrays.asList(name of the array)</p>\n\n<p>code example:</p>\n\n<pre><code>               int[] intArray = new int[] {1, 2, 3, 4, 5};\n               System.out.println(Arrays.asList(intArray));\n</code></pre>\n\n<ul>\n<li><p>We can print an array using foreach loop.</p>\n\n<p>code example:</p>\n\n<pre><code>           int[] intArray = new int[] {1, 2, 3, 4, 5};\n           for(int array : intArray)\n             {\n                  System.out.println(array);\n</code></pre></li>\n<li><p>Using simple for loop.</p>\n\n<p>code example:</p>\n\n<pre><code>           int[] intArray = new int[] {1, 2, 3, 4, 5};\n           for(int i=0; i&lt;intArray.length/2; i++)\n            {\n                System.out.println(intArray[i]);\n            }\n</code></pre></li>\n<li><p>One can also use user defined function if want to formatted the\noutput in his own way...</p>\n\n<p>I hope this will working..Happy coding.</p></li>\n</ul>\n\n<p>** Don't forget to add the Java Library Package in following way..</p>\n\n<pre><code>               import java.util.Arrays;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Prior to Java 8 we could have used <code>Arrays.toString(array)</code> to print one dimensional array and <code>Arrays.deepToString(array)</code> for multi-dimensional arrays. We have got the option of <code>Stream</code> and <code>lambda</code> in Java 8 which can also be used for the printing the array.</p>\n\n<p><strong>Printing One dimensional Array:</strong></p>\n\n<pre><code>public static void main(String[] args) {\n    int[] intArray = new int[] {1, 2, 3, 4, 5};\n    String[] strArray = new String[] {\"John\", \"Mary\", \"Bob\"};\n\n    //Prior to Java 8\n    System.out.println(Arrays.toString(intArray));\n    System.out.println(Arrays.toString(strArray));\n\n    // In Java 8 we have lambda expressions\n    Arrays.stream(intArray).forEach(System.out::println);\n    Arrays.stream(strArray).forEach(System.out::println);\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<blockquote>\n  <p>[1, 2, 3, 4, 5]<br>\n  [John, Mary, Bob]<br>\n  1<br>\n  2<br>\n  3<br>\n  4<br>\n  5<br>\n  John<br>\n  Mary<br>\n  Bob</p>\n</blockquote>\n\n<p><strong>Printing Multi-dimensional Array</strong>\nJust in case we want to print multi-dimensional array we can use <code>Arrays.deepToString(array)</code> as:</p>\n\n<pre><code>public static void main(String[] args) {\n    int[][] int2DArray = new int[][] { {11, 12}, { 21, 22}, {31, 32, 33} };\n    String[][] str2DArray = new String[][]{ {\"John\", \"Bravo\"} , {\"Mary\", \"Lee\"}, {\"Bob\", \"Johnson\"} };\n\n    //Prior to Java 8\n    System.out.println(Arrays.deepToString(int2DArray));\n    System.out.println(Arrays.deepToString(str2DArray));\n\n    // In Java 8 we have lambda expressions\n    Arrays.stream(int2DArray).flatMapToInt(x -&gt; Arrays.stream(x)).forEach(System.out::println);\n    Arrays.stream(str2DArray).flatMap(x -&gt; Arrays.stream(x)).forEach(System.out::println);\n} \n</code></pre>\n\n<p>Now the point to observe is that the method <code>Arrays.stream(T[])</code>, which in case of <code>int[]</code> returns us <code>Stream&lt;int[]&gt;</code> and then method <code>flatMapToInt()</code> maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element.</p>\n\n<p>The output is:</p>\n\n<blockquote>\n  <p>[[11, 12], [21, 22], [31, 32, 33]]<br>\n  [[John, Bravo], [Mary, Lee], [Bob, Johnson]]<br>\n  11<br>\n  12<br>\n  21<br>\n  22<br>\n  31<br>\n  32<br>\n  33<br>\n  John<br>\n  Bravo<br>\n  Mary<br>\n  Lee<br>\n  Bob<br>\n  Johnson</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This does the job.  </p>\n\n<pre><code>int [] list = {22,55,66,11,32,56,67,89,95,10};\n\n// print for each number a comma separated  \nfor (int x: list )\n    System.out.print(x + \",\");\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>My humble one liner:</p>\n\n<pre><code>for(int n: someArray) System.out.println(n+\" \");\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>System.out.println(Arrays.toString(array));\n</code></pre>\n\n<p>or if your array contains other arrays as elements:</p>\n\n<pre><code>System.out.println(Arrays.deepToString(array));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A simplified shortcut I've tried is this:</p>\n\n<pre><code>    int x[] = {1,2,3};\n    String printableText = Arrays.toString(x).replaceAll(\"[\\\\[\\\\]]\", \"\").replaceAll(\", \", \"\\n\");\n    System.out.println(printableText);\n</code></pre>\n\n<p>It will print</p>\n\n<pre><code>1\n2\n3\n</code></pre>\n\n<p>No loops required in this approach and it is best for small arrays only</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's one additional way if your array is of type char[]:</p>\n\n<pre><code>char A[] = {'a', 'b', 'c'}; \n\nSystem.out.println(A); // no other arguments\n</code></pre>\n\n<p>prints </p>\n\n<pre><code>abc\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>public class printer {\n\n    public static void main(String[] args) {\n        String a[] = new String[4];\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"enter the data\");\n        for (int i = 0; i &lt; 4; i++) {\n            a[i] = sc.nextLine();\n        }\n        System.out.println(\"the entered data is\");\n        for (String i : a) {\n            System.out.println(i);\n        }\n      }\n    }\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option<br>\nFor example:</p>\n\n<pre><code>String[] strArray = new String[] { \"John\", \"Mary\", \"Bob\" };\nString arrayAsCSV = StringUtils.join(strArray, \" , \");\nSystem.out.printf(\"[%s]\", arrayAsCSV);\n//output: [John , Mary , Bob]\n</code></pre>\n\n<p>I used the following dependency </p>\n\n<pre><code>&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n&lt;version&gt;3.3.2&lt;/version&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The simplest way to print an array is to use a for-loop:</p>\n\n<pre><code>// initialize array\nfor(int i=0;i&lt;10;i++)\n{\n    System.out.print(array[i] + \" \");\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <code>java 8</code> we can use <strong>Lamda expression</strong> to iterate List so here is the very simple code to print array items</p>\n\n<pre><code>int[] a = new int[]{1, 2, 3, 4, 5, 6, 7, 8};\nArrays.asList(a).forEach( s -&gt; System.out.println(s));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To add to all the answers, printing the object as a JSON string is also an option.</p>\n\n<p>Using Jackson:</p>\n\n<pre><code>ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();\nSystem.out.println(ow.writeValueAsString(anyArray));\n</code></pre>\n\n<p>Using Gson:</p>\n\n<pre><code>Gson gson = new Gson();\nSystem.out.println(gson.toJson(anyArray));\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>No, a <code>List&lt;Dog&gt;</code> is <em>not</em> a <code>List&lt;Animal&gt;</code>. Consider what you can do with a <code>List&lt;Animal&gt;</code> - you can add <em>any</em> animal to it... including a cat. Now, can you logically add a cat to a litter of puppies? Absolutely not.</p>\n\n<pre><code>// Illegal code - because otherwise life would be Bad\nList&lt;Dog&gt; dogs = new List&lt;Dog&gt;();\nList&lt;Animal&gt; animals = dogs; // Awooga awooga\nanimals.add(new Cat());\nDog dog = dogs.get(0); // This should be safe, right?\n</code></pre>\n\n<p>Suddenly you have a <em>very</em> confused cat.</p>\n\n<p>Now, you <em>can't</em> add a <code>Cat</code> to a <code>List&lt;? extends Animal&gt;</code> because you don't know it's a <code>List&lt;Cat&gt;</code>. You can retrieve a value and know that it will be an <code>Animal</code>, but you can't add arbitrary animals. The reverse is true for <code>List&lt;? super Animal&gt;</code> - in that case you can add an <code>Animal</code> to it safely, but you don't know anything about what might be retrieved from it, because it could be a <code>List&lt;Object&gt;</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What you are looking for is called <em>covariant type parameters</em>.  The problem is that they are not type-safe in the general case, specifically for mutable lists.  Suppose you have a <code>List&lt;Dog&gt;</code>, and it is allowed to function as a <code>List&lt;Animal&gt;</code>.  What happens when you try to add a Cat to this <code>List&lt;Animal&gt;</code> which is really a <code>List&lt;Dog&gt;</code>?  Automatically allowing type parameters to be covariant therefore breaks the type system.</p>\n\n<p>It would be useful to add syntax to allow type parameters to be specified as covariant, which avoids the <code>? extends Foo</code> in method declarations, but that does add additional complexity.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The reason a <code>List&lt;Dog&gt;</code> is not a <code>List&lt;Animal&gt;</code>, is that, for example, you can insert a <code>Cat</code> into a <code>List&lt;Animal&gt;</code>, but not into a <code>List&lt;Dog&gt;</code>... you can use wildcards to make generics more extensible where possible; for example, reading from  a <code>List&lt;Dog&gt;</code> is the similar to reading from a <code>List&lt;Animal&gt;</code> -- but not writing.</p>\n\n<p>The <a href=\"http://java.sun.com/j2se/1.5.0/docs/guide/language/generics.html\">Generics in the Java Language</a> and the <a href=\"http://java.sun.com/docs/books/tutorial/java/generics/index.html\">Section on Generics from the Java Tutorials</a> have a very good, in-depth explanation as to why some things are or are not polymorphic or permitted with generics.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I would say the whole point of Generics is that it doesn't allow that. Consider the situation with arrays, which do allow that type of covariance:</p>\n\n<pre><code>  Object[] objects = new String[10];\n  object[0] = Boolean.FALSE;\n</code></pre>\n\n<p>That code compiles fine, but throws a runtime error. It is not typesafe. The point of Generics is to add the compile time type safety, otherwise you could just stick with a plain class without generics.</p>\n\n<p>Now there are times where you need to be more flexible and that is what the ? super Class and ? extends Class are for. The former is when you need to insert into a type Collection (for example), and the latter is for when you need to read from it, in a type safe manner. But the only way to do both at the same time is to have a specific type.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A point I think should be added to what <a href=\"http://stackoverflow.com/a/2745301/1593077\">other</a> <a href=\"http://stackoverflow.com/a/2745319/1593077\">answers</a> mention is that while</p>\n\n<blockquote>\n  <p><code>List&lt;Dog&gt;</code> isn't-a <code>List&lt;Animal&gt;</code> <strong>in Java</strong></p>\n</blockquote>\n\n<p>it is also true that</p>\n\n<blockquote>\n  <p>A list of dogs is-a list of animals <strong>in English</strong> (well, under a reasonable interpretation)</p>\n</blockquote>\n\n<p>The way the OP's intuition works - which is completely valid of course - is the latter sentence. However, if we apply this intuition we get a language that is not Java-esque in its type system: Suppose our language does allow adding a cat to our list of dogs. What would that mean? It would mean that the list ceases to be a list of dogs, and remains merely a list of animals. And a list of mammals, and a list of quadrapeds.</p>\n\n<p>More generally, <strong>OP's intuition lends itself towards a language in which operations on objects can change their type</strong>, or rather, an object's type(s) is a (dynamic) function of its value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The basis logic for such behavior is that <code>Generics</code> follow a mechanism of type erasure. So at run time you have no way if identifying the type of <code>collection</code> unlike <code>arrays</code> where there is no such erasure process. So coming back to your question...</p>\n\n<p>So suppose there is a method as given below:</p>\n\n<pre><code>add(List&lt;Animal&gt;){//You can add List&lt;Dog or List&lt;Cat&gt; and this will compile as per rules of polymorphism}\n</code></pre>\n\n<p>Now if java allows caller to add List of type Animal to this method then you might add wrong thing into collection and at run time too it will run due to type erasure. While in case of arrays you will get a run time exception for such scenarios...</p>\n\n<p>Thus in essence this behavior is implemented so that one cannot add wrong thing into collection. Now  I believe type erasure exists so as to give compatibility with legacy java without generics....</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The answers given here didn't fully convince me. So instead, I make another example.</p>\n\n<pre><code>public void passOn(Consumer&lt;Animal&gt; consumer, Supplier&lt;Animal&gt; supplier) {\n    consumer.accept(supplier.get());\n}\n</code></pre>\n\n<p>sounds fine, doesn't it? But you can only pass <code>Consumer</code>s and <code>Supplier</code>s for <code>Animal</code>s. If you have a <code>Mammal</code> consumer, but a <code>Duck</code> supplier, they should not fit although both are animals. In order to disallow this, additional restrictions have been added.</p>\n\n<p>Instead of the above, we have to define relationships between the types we use.</p>\n\n<p>E. g.,</p>\n\n<pre><code>public &lt;A extends Animal&gt; void passOn(Consumer&lt;A&gt; consumer, Supplier&lt;? extends A&gt; supplier) {\n    consumer.accept(supplier.get());\n}\n</code></pre>\n\n<p>makes sure that we can only use a supplier which provides us the right type of object for the consumer.</p>\n\n<p>OTOH, we could as well do</p>\n\n<pre><code>public &lt;A extends Animal&gt; void passOn(Consumer&lt;? super A&gt; consumer, Supplier&lt;A&gt; supplier) {\n    consumer.accept(supplier.get());\n}\n</code></pre>\n\n<p>where we go the other way: we define the type of the <code>Supplier</code> and restrict that it can be put into the <code>Consumer</code>.</p>\n\n<p>We even can do</p>\n\n<pre><code>public &lt;A extends Animal&gt; void passOn(Consumer&lt;? super A&gt; consumer, Supplier&lt;? extends A&gt; supplier) {\n    consumer.accept(supplier.get());\n}\n</code></pre>\n\n<p>where, having the intuitive relations <code>Life</code> -&gt; <code>Animal</code> -&gt; <code>Mammal</code> -&gt; <code>Dog</code>, <code>Cat</code> etc., we could even put a <code>Mammal</code> into a <code>Life</code> consumer, but not a <code>String</code> into a <code>Life</code> consumer.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The answer <a href=\"http://stackoverflow.com/a/2745301/4350148\">http://stackoverflow.com/a/2745301/4350148</a> as well as other answers are correct. I am  going to add to those answers with a solution that I think will be helpful.  I think this comes up often in programming. One thing to note, is that for Collections(Lists,Sets, etc) the main issue is adding to the Collection. That is where things break down.  Even removing is OK.  In most cases we can use <code>Collection&lt;? extends T&gt;</code> rather then <code>Collection&lt;T&gt;</code> and that should be the first choice.  However, I am finding cases where it is not easy to do that.  It  is up for debate as to whether that is always the  best thing to do.  I am  presenting here a class DownCastCollection that can take convert a <code>Collection&lt;? extends T&gt;</code> to a <code>Collection&lt;T&gt;</code> (we can define similar classes for List, Set, NavigableSet,..) to be used when using the standard approach is very inconvenient.  Below is an example of how to use it (we could also use <code>Collection&lt;? extends Object&gt;</code> in this case, but I am keeping it simple to illustrate using DownCastCollection.</p>\n\n<pre><code>/**Could use Collection&lt;? extends Object&gt; and that is the better choice. \n* But I am doing this to illustrate how to use DownCastCollection. **/\n\npublic static void print(Collection&lt;Object&gt; col){  \n    for(Object obj : col){\n    System.out.println(obj);\n    }\n}\npublic static void main(String[] args){\n  ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n  list.addAll(Arrays.asList(\"a\",\"b\",\"c\"));\n  print(new DownCastCollection&lt;Object&gt;(list));\n}\n</code></pre>\n\n<p>Now the class:</p>\n\n<pre><code>import java.util.AbstractCollection;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class DownCastCollection&lt;E&gt; extends AbstractCollection&lt;E&gt; implements Collection&lt;E&gt; {\nprivate Collection&lt;? extends E&gt; delegate;\n\npublic DownCastCollection(Collection&lt;? extends E&gt; delegate) {\n    super();\n    this.delegate = delegate;\n}\n\n@Override\npublic int size() {\n    return delegate ==null ? 0 : delegate.size();\n}\n\n@Override\npublic boolean isEmpty() {\n    return delegate==null || delegate.isEmpty();\n}\n\n@Override\npublic boolean contains(Object o) {\n    if(isEmpty()) return false;\n    return delegate.contains(o);\n}\nprivate class MyIterator implements Iterator&lt;E&gt;{\n    Iterator&lt;? extends E&gt; delegateIterator;\n\n    protected MyIterator() {\n        super();\n        this.delegateIterator = delegate == null ? null :delegate.iterator();\n    }\n\n    @Override\n    public boolean hasNext() {\n        return delegateIterator != null &amp;&amp; delegateIterator.hasNext();\n    }\n\n    @Override\n    public  E next() {\n        if(!hasNext()) throw new NoSuchElementException(\"The iterator is empty\");\n        return delegateIterator.next();\n    }\n\n    @Override\n    public void remove() {\n        delegateIterator.remove();\n\n    }\n\n}\n@Override\npublic Iterator&lt;E&gt; iterator() {\n    return new MyIterator();\n}\n\n\n\n@Override\npublic boolean add(E e) {\n    throw new UnsupportedOperationException();\n}\n\n@Override\npublic boolean remove(Object o) {\n    if(delegate == null) return false;\n    return delegate.remove(o);\n}\n\n@Override\npublic boolean containsAll(Collection&lt;?&gt; c) {\n    if(delegate==null) return false;\n    return delegate.containsAll(c);\n}\n\n@Override\npublic boolean addAll(Collection&lt;? extends E&gt; c) {\n    throw new UnsupportedOperationException();\n}\n\n@Override\npublic boolean removeAll(Collection&lt;?&gt; c) {\n    if(delegate == null) return false;\n    return delegate.removeAll(c);\n}\n\n@Override\npublic boolean retainAll(Collection&lt;?&gt; c) {\n    if(delegate == null) return false;\n    return delegate.retainAll(c);\n}\n\n@Override\npublic void clear() {\n    if(delegate == null) return;\n        delegate.clear();\n\n}\n</code></pre>\n\n<p>}</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually you can use an interface to achieve what you want.</p>\n\n<pre><code>public interface Animal {\n    String getName();\n    String getVoice();\n}\npublic class Dog implements Animal{\n    @Override \n    String getName(){return \"Dog\";}\n    @Override\n    String getVoice(){return \"woof!\";}\n</code></pre>\n\n<p>}</p>\n\n<p>you can then use the collections using</p>\n\n<pre><code>List &lt;Animal&gt; animalGroup = new ArrayList&lt;Animal&gt;();\nanimalGroup.add(new Dog());\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're mis-interpreting the information given to you. You should avoid using Swing components with AWT <strong>components</strong>. It's OK to use Swing with the AWT listener structure, layout managers, etc. and in fact it's impossible not to.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There have been some good answers, but I would like to cover a slightly different aspect.  Things that Swing provides beyond AWT.</p>\n\n<h2>Components</h2>\n\n<p>Swing supports styled documents in <code>JEditorPane</code> &amp; <code>JTextPane</code> &amp; to a limited extent using HTML in some other <code>JComponents</code>.  AWT does not support styled documents in any component.  </p>\n\n<p>AWT provides no tree based structure like <code>JTree</code>, no tabular structure such as <code>JTable</code>, no version of <code>JToolBar</code>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/iueSU.png\" width=\"677\" height=\"398\"> </p>\n\n<p>AWT has no equivalent (that I can find or recall) for <code>JColorChooser</code> &amp; none for the simple utility class - <code>JOptionPane</code>.  </p>\n\n<p><img src=\"http://i.stack.imgur.com/UZB98.png\"></p>\n\n<h2>Listeners</h2>\n\n<p>As mentioned in a comment, see the 20+ extra/alternate listeners in the <code>javax.swing.event</code> package.</p>\n\n<h2>Pluggable Look &amp; Feel</h2>\n\n<p>Swing components can be set to a particular look &amp; feel at run-time, including a native PLAF.  </p>\n\n<p><img src=\"http://i.stack.imgur.com/Jaqap.png\"></p>\n\n<p>See the screen shots on the <a href=\"http://stackoverflow.com/questions/5621338/about-swing-and-jtable/5630271#5630271\">Nested Layout Example</a> for some more samples.</p>\n\n<h2>Layouts</h2>\n\n<p>In addition to the plethora of AWT layouts, Swing provides:</p>\n\n<ol>\n<li><code>BoxLayout</code></li>\n<li><code>GroupLayout</code></li>\n<li><code>OverlayLayout</code></li>\n<li><code>ScrollPaneLayout</code></li>\n<li><code>SpringLayout</code></li>\n<li><code>ViewportLayout</code></li>\n</ol>\n\n<h2>Other</h2>\n\n<ul>\n<li>Key Bindings.  See <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\">How to Use Key Bindings</a> for details.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/javax/swing/undo/UndoManager.html\"><code>UndoManager</code></a> for undo/redo ability in editable documents.</li>\n<li>Inbuilt <a href=\"http://www.oracle.com/technetwork/java/painting-140037.html#db\">double buffering</a> to avoid flicker on repaint.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/javax/swing/SwingWorker.html\"><code>SwingWorker</code></a> for responsive GUIs.</li>\n</ul>\n\n<hr>\n\n<p>There is probably a lot more I missed in that brief description, but the bottom line is that Swing is an altogether newer and more enabled GUI toolkit.  </p>\n\n<p><em>Swing both builds on, <strong>and</strong> relies heavily on, classes in the AWT.</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java's Swing takes ActionListeners, which are part of the AWT package.  If you wish to use swing, you must use some form of an AWT ActionListener.  That is just the way things are.  I don't suggest using Java at all for complex guis, but nor would I say that AWT is outdated, as there is no direct replacement.  Thus, just go ahead and use AWT.</p>\n\n<p>As an alternative, you could look into JOGL, but that's more if you are trying to create something game-oriented.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is a small example which can demonstrate, the use of <strong>javax.swing.Action</strong> package\nyou should also refer to java doc for <strong>javax.swing.event</strong> package i think you are finding that . . . </p>\n\n<pre><code>import java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.AbstractAction;\nimport javax.swing.Action;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JToolBar;\n\nclass SysOutHelloAction extends AbstractAction {\n    private static final Icon printIcon = new ImageIcon(\"Print.gif\");\n\n    SysOutHelloAction() {\n        super(\"Print\", printIcon);\n        putValue(Action.SHORT_DESCRIPTION, \"Hello, World\");\n    }\n\n    public void actionPerformed(ActionEvent actionEvent) {\n        System.out.println(\"Hello, World\");\n    }\n}\n\npublic class SwingActionTester {\n    public static void main(String args[]) {\n        JFrame frame = new JFrame(\"Action Sample\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        final Action printAction = new SysOutHelloAction();\n        JMenuBar menuBar = new JMenuBar();\n        JMenu menu = new JMenu(\"File\");\n        menuBar.add(menu);\n        menu.add(new JMenuItem(printAction));\n        JToolBar toolbar = new JToolBar();\n        toolbar.add(new JButton(printAction));\n        JButton enableButton = new JButton(\"Enable\");\n        ActionListener enableActionListener = new ActionListener() {\n            public void actionPerformed(ActionEvent actionEvent) {\n                printAction.setEnabled(true);\n            }\n        };\n        enableButton.addActionListener(enableActionListener);\n        JButton disableButton = new JButton(\"Disable\");\n        ActionListener disableActionListener = new ActionListener() {\n            public void actionPerformed(ActionEvent actionEvent) {\n                printAction.setEnabled(false);\n            }\n        };\n        disableButton.addActionListener(disableActionListener);\n        JButton relabelButton = new JButton(\"Relabel\");\n        ActionListener relabelActionListener = new ActionListener() {\n            public void actionPerformed(ActionEvent actionEvent) {\n                printAction.putValue(Action.NAME, \"Changed Action Value\");\n            }\n        };\n        relabelButton.addActionListener(relabelActionListener);\n        JPanel buttonPanel = new JPanel();\n        buttonPanel.add(enableButton);\n        buttonPanel.add(disableButton);\n        buttonPanel.add(relabelButton);\n        frame.setJMenuBar(menuBar);\n        frame.add(toolbar, BorderLayout.SOUTH);\n        frame.add(buttonPanel, BorderLayout.NORTH);\n        frame.setSize(300, 200);\n        frame.setVisible(true);\n    }\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-\"><code>string.equals(String other)</code></a> function to compare strings, not the <code>==</code> operator.</p>\n\n<p>The function checks the actual contents of the string, the <code>==</code> operator checks whether the references to the objects are equal.  Note that string constants are usually \"interned\" such that two constants with the same value can actually be compared with <code>==</code>, but it's better not to rely on that.</p>\n\n<pre><code>if (usuario.equals(datos[0])) {\n    ...\n}\n</code></pre>\n\n<p>NB: the compare is done on 'usuario' because that's guaranteed non-null in your code, although you should still check that you've actually got some tokens in the <code>datos</code> array otherwise you'll get an array-out-of-bounds exception.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Meet Jorman</h2>\n\n<p>Jorman is a successful businessman and has 2 houses. </p>\n\n<p><img src=\"http://i.stack.imgur.com/xLcfG.png\" alt=\"enter image description here\"></p>\n\n<p>But others don't know that.</p>\n\n<h2>Is it the same Jorman?</h2>\n\n<p>When you ask neighbours from either Madison or Burke streets, this is the only thing they can say:</p>\n\n<p><img src=\"http://i.stack.imgur.com/ZjMlG.png\" alt=\"enter image description here\"></p>\n\n<p>Using the residence alone, it's tough to confirm that it's the same Jorman. Since they're 2 different addresses, it's just natural to assume that those are 2 different persons.</p>\n\n<p><strong>That's how the operator <code>==</code> behaves.</strong> So it will say that <code>datos[0]==usuario</code> is false, because it only <em>compares the addresses</em>.</p>\n\n<h2>An Investigator to the Rescue</h2>\n\n<p>What if we sent an investigator? We know that it's the same Jorman, but we need to prove it. Our detective will look closely at all physical aspects. With thorough inquiry, the agent will be able to conclude whether it's the same person or not. Let's see it happen in Java terms.</p>\n\n<p>Here's the source code of String's <code>equals()</code> method:</p>\n\n<p><img src=\"http://i.stack.imgur.com/6MYZy.png\" alt=\"enter image description here\"></p>\n\n<p>It compares the Strings character by character, in order to come to a conclusion that they are indeed equal.</p>\n\n<p><strong>That's how the String <code>equals</code> method behaves.</strong> So <code>datos[0].equals(usuario)</code> will return true, because it performs a <em>logical comparison</em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's good to notice that <strong>in some cases use of \"==\" operator can lead to the expected result, because the way how java handles strings</strong> - string literals are interned  (see <code>String.intern()</code>) during compilation - so when you write for example <code>\"hello world\"</code> in two classes and compare those strings with \"==\" you could get result: true, which is expected according to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.5\">specification</a>; when you compare same strings (if they have same value) when the first one is string literal (ie. defined through <code>\"i am string literal\"</code>) and second is constructed during runtime ie. with \"new\" keyword like <code>new String(\"i am string literal\")</code>, the <code>==</code> (equality) operator returns false, because both of them are different instances of the <code>String</code> class. </p>\n\n<p><strong>Only right way is using <code>.equals()</code> -&gt; <code>datos[0].equals(usuario)</code>.</strong> <code>==</code> says only if two objects are the same instance of object (ie. have same memory address)</p>\n\n<p><strong>Update</strong>: 01.04.2013 I updated this post due comments below which are somehow right. Originally I declared that interning (String.intern) is side effect of JVM optimization. Although it certainly save memory resources (which was what i meant by \"optimization\") it is mainly feature of language</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Instead of</p>\n\n<pre><code>datos[0] == usuario\n</code></pre>\n\n<p>use </p>\n\n<pre><code>datos[0].equals(usuario)\n</code></pre>\n\n<p><code>==</code> compares the reference of the variable where <code>.equals()</code> compares the values which is what you want.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>equals()</code> function is a method of <code>Object</code> class which should be overridden by programmer. <code>String</code> class overrides it to check if two strings are equal i.e. in content and not reference. </p>\n\n<p><code>==</code> operator checks if the references of both the objects are the same. </p>\n\n<p>Consider the programs</p>\n\n<pre><code>String abc = \"Awesome\" ;\nString xyz =  abc;\n\nif(abc == xyz)\n     System.out.println(\"Refers to same string\");\n</code></pre>\n\n<p>Here the <code>abc</code> and <code>xyz</code>, both refer to same <code>String</code> <code>\"Awesome\"</code>. Hence the expression <code>(abc == xyz)</code> is <code>true</code>.</p>\n\n<pre><code>String abc = \"Hello World\";\nString xyz = \"Hello World\";\n\nif(abc == xyz)\n    System.out.println(\"Refers to same string\");\nelse\n    System.out.println(\"Refers to different strings\");\n\nif(abc.equals(xyz))\n     System.out.prinln(\"Contents of both strings are same\");\nelse\n     System.out.prinln(\"Contents of strings are different\");\n</code></pre>\n\n<p>Here <code>abc</code> and <code>xyz</code> are two different strings with the same content <code>\"Hello World\"</code>. Hence here the expression <code>(abc == xyz)</code> is <code>false</code> where as <code>(abc.equals(xyz))</code> is <code>true</code>.</p>\n\n<p>Hope you understood the difference between <code>==</code> and <code>&lt;Object&gt;.equals()</code> </p>\n\n<p>Thanks.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> tests for reference equality.</p>\n\n<p><code>.equals()</code> tests for value equality.</p>\n\n<p>Consequently, if you actually want to test whether two strings have the same value you should use <code>.equals()</code> (except in a few situations where you can guarantee that two strings with the same value will be represented by the same object eg: <code>String</code> interning).</p>\n\n<p><code>==</code> is for testing whether two strings are the same <code>Object</code>.</p>\n\n<pre><code>// These two have the same value\nnew String(\"test\").equals(\"test\") ==&gt; true \n\n// ... but they are not the same object\nnew String(\"test\") == \"test\" ==&gt; false \n\n// ... neither are these\nnew String(\"test\") == new String(\"test\") ==&gt; false \n\n// ... but these are because literals are interned by \n// the compiler and thus refer to the same object\n\"test\" == \"test\" ==&gt; true \n\n// concatenation of string literals happens at compile time resulting in same objects\n\"test\" == \"te\" + \"st\"  ==&gt; true\n\n// but .substring() is invoked at runtime, generating distinct objects\n\"test\" == \"!test\".substring(1) ==&gt; false\n</code></pre>\n\n<p>It is important to note that <code>==</code> is much cheaper than <code>equals()</code> (a single pointer comparision instead of a loop), thus, in situations where it is applicable (i.e. you can guarantee that you are only dealing with interned strings) it can present an important performance improvement. However, these situations are rare.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>== operator check if the two references point to the same object or not.\n.equals() check for the actual string content(value).\n</code></pre>\n\n<p>Note that .equals() method belongs to Class Object(Super class of all classes). You need to override it as per you class requirement but for String it is already implemented and it checks whether two string have same value or not.</p>\n\n<pre><code>Case1)\nString s1 = \"StackOverflow\";\nString s2 = \"StackOverflow\";\ns1 == s1;      //true\ns1.equals(s2); //true\nReason:  String literals created without null are stores in String pool in permgen area of heap. So both s1 and s2 point to same object in the pool.\nCase2)\nString s1 = new String(\"StackOverflow\");\nString s2 = new String(\"StackOverflow\");\ns1 == s2;      //false\ns1.equals(s2); //true\nReason: If you create String object using new keyword separate space is allocated to it on heap.\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It will also work if you call <code>intern()</code> on the string before inserting it into the array.\nInterned strings are reference-equal (<code>==</code>) if and only if the are value-equal (<code>equals()</code>.)</p>\n\n<pre><code>public static void main (String... aArguments) throws IOException {\n\nString usuario = \"Jorman\";\nString password = \"14988611\";\n\nString strDatos=\"Jorman 14988611\";\nStringTokenizer tokens=new StringTokenizer(strDatos, \" \");\nint nDatos=tokens.countTokens();\nString[] datos=new String[nDatos];\nint i=0;\n\nwhile(tokens.hasMoreTokens()) {\n    String str=tokens.nextToken();\n    datos[i]= str.intern();            \n    i++;\n}\n\n//System.out.println (usuario);\n\nif(datos[0]==usuario) {  \n     System.out.println (\"WORKING\");    \n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let's analyze the following Java, to understand the identity and equality of Strings:</p>\n\n<pre><code>public static void testEquality(){\n    String str1 = \"Hello world.\";\n    String str2 = \"Hello world.\";\n\n    if (str1 == str2)\n        System.out.print(\"str1 == str2\\n\");\n    else\n        System.out.print(\"str1 != str2\\n\");\n\n    if(str1.equals(str2))\n        System.out.print(\"str1 equals to str2\\n\");\n    else\n        System.out.print(\"str1 doesn't equal to str2\\n\");\n\n    String str3 = new String(\"Hello world.\");\n    String str4 = new String(\"Hello world.\");\n\n    if (str3 == str4)\n        System.out.print(\"str3 == str4\\n\");\n    else\n        System.out.print(\"str3 != str4\\n\");\n\n    if(str3.equals(str4))\n        System.out.print(\"str3 equals to str4\\n\");\n    else\n        System.out.print(\"str3 doesn't equal to str4\\n\");\n}\n</code></pre>\n\n<p>When the first line of code <code>String str1 = \"Hello world.\"</code> executes, a string <code>\\Hello world.\"</code>\nis created, and the variable <code>str1</code> refers to it. Another string <code>\"Hello world.\"</code> will not be created again when the next line of code executes because of optimization. The variable <code>str2</code> also refers to the existing <code>\"\"Hello world.\"</code>.</p>\n\n<p>The operator <code>==</code> checks identity of two objects (whether two variables refer to same object). Since <code>str1</code> and <code>str2</code> refer to same string in memory, they are identical to each other. The method <code>equals</code> checks equality of two objects (whether two objects have same content). Of course, the content of <code>str1</code> and <code>str2</code> are same.</p>\n\n<p>When code <code>String str3 = new String(\"Hello world.\")</code> executes, a new instance of string with content <code>\"Hello world.\"</code> is created, and it is referred to by the variable <code>str3</code>. And then another instance of string with content <code>\"Hello world.\"</code> is created again, and referred to by\n<code>str4</code>. Since <code>str3</code> and <code>str4</code> refer to two different instances, they are not identical, but their\ncontent are same.</p>\n\n<p>Therefore, the output contains four lines:</p>\n\n<pre><code>Str1 == str2\n\nStr1 equals str2\n\nStr3! = str4\n\nStr3 equals str4\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should use <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#equals(java.lang.Object)\" rel=\"nofollow\">string equals</a> to compare two strings for equality, not operator == which just compares the references.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> operator compares the reference of an object in java. You can use string's <code>equals</code> method .</p>\n\n<pre><code>String s = \"Test\";\nif(s.equals(\"Test\"))\n{\n    System.out.println(\"Equal\");\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The == operator is a simple comparison of values.<br>\nFor object references the (values) are the (references). So x == y returns true if x and y reference the same object.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I know this is an old question but here's how I look at it (I find very useful):</p>\n\n<hr>\n\n<p><strong>Technical explanations</strong></p>\n\n<p>In Java, all variables are either <strong>primitive types</strong> or <strong>references</strong>.</p>\n\n<p>(If you need to know what a reference is: \"Object variables\" are just <em>pointers to objects.</em> So with <code>Object something = ...</code>, something is really an address in memory (a number).)</p>\n\n<p><code>==</code> compares the exact values. So it compares if the primitive values are the same, or if the references (addresses) are the same. That's why <code>==</code> often doesn't work on Strings; Strings are objects, and doing <code>==</code> on two string variables just compares if the address is same in memory, as others have pointed out. <code>.equals()</code> calls the comparison method of objects, which will compare the actual objects pointed by the references. In the case of Strings, it compares each character to see if they're equal.</p>\n\n<hr>\n\n<p><strong>The interesting part</strong>:</p>\n\n<p>So why does <code>==</code> sometimes return true for Strings? Note that Strings are immutable. In your code, if you do</p>\n\n<pre><code>String foo = \"hi\";\nString bar = \"hi\";\n</code></pre>\n\n<p>Since strings are immutable (when you call <code>.trim()</code> or something, it produces a new string, not modifying the original object pointed to in memory), you don't really need two different <code>String(\"hi\")</code> objects. If the compiler is smart, the bytecode will read to only generate one <code>String(\"hi\")</code> object. So if you do </p>\n\n<pre><code>if (foo == bar) ...\n</code></pre>\n\n<p>right after, they're pointing to the same object, and will return true. But you rarely intend this. Instead, you're asking for user input, which is creating new strings at different parts of memory, etc. etc.</p>\n\n<p><strong>Note</strong>: If you do something like <code>baz = new String(bar)</code> the compiler may still figure out they're the same thing. But the main point is when the compiler sees literal strings, it can easily optimize same strings.</p>\n\n<p>I don't know how it works in runtime, but I assume the JVM doesn't keep a list of \"live strings\" and check if a same string exists. (eg if you read a line of input twice, and the user enters the same input twice, it won't check if the second input string is the same as the first, and point them to the same memory). It'd save a bit of heap memory, but it's so negligible the overhead isn't worth it. Again, the point is it's easy for the compiler to optimize literal strings.</p>\n\n<p>There you have it... a gritty explanation for <code>==</code> vs. <code>.equals()</code> and why it seems random.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>@Melkhiah66 You can use equals method instead of '==' method to check the equality.\nIf you use intern() then it checks whether the object is in pool if present then returns\nequal else unequal. equals method internally uses hashcode and gets you the required result.\n<code></code></p>\n\n<pre><code>public class Demo\n{\n  public static void main(String[] args)\n  {\n              String str1 = \"Jorman 14988611\";\n    String str2 = new StringBuffer(\"Jorman\").append(\" 14988611\").toString();\n    String str3 = str2.intern();\n    System.out.println(\"str1 == str2 \" + (str1 == str2));           //gives false\n    System.out.println(\"str1 == str3 \" + (str1 == str3));           //gives true\n    System.out.println(\"str1 equals str2 \" + (str1.equals(str2)));  //gives true\n    System.out.println(\"str1 equals str3 \" + (str1.equals(str3)));  //gives true\n  }\n}\n</code></pre>\n\n<p></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If You are going to compare any assigned value of the string ie)primitive string, Both \"==\" and .equals will work, but for the new string object you should use only .equals, here \"==\" will not work</p>\n\n<p>Example:</p>\n\n<pre><code>String a = \"name\";\n\nString b = \"name\";\n</code></pre>\n\n<p><code>if(a == b)</code>  and <code>(a.equals(b))</code> will return true.</p>\n\n<p>but</p>\n\n<pre><code>String a = new String(\"a\");\n</code></pre>\n\n<p>in this case <code>if(a == b)</code> will return <code>false</code></p>\n\n<p>so its better to use <code>.equals</code> operator....</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Generally <code>.equals</code> is used for <code>Object</code> comparison, where you want to verify if two <code>Objects</code> have an identical value.</p>\n\n<p><code>==</code> for reference comparison (are the two <code>Objects</code> the same <code>Object</code> on the heap) &amp; to check if the <code>Object</code> is null. It is also used to compare the values of primitive types.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use Split rather than tokenizer,it will surely provide u exact output\nfor E.g:</p>\n\n<pre><code>string name=\"Harry\";\nstring salary=\"25000\";\nstring namsal=\"Harry 25000\";\nstring[] s=namsal.split(\" \");\nfor(int i=0;i&lt;s.length;i++)\n{\nSystem.out.println(s[i]);\n}\nif(s[0].equals(\"Harry\"))\n{\nSystem.out.println(\"Task Complete\");\n}\n</code></pre>\n\n<p>After this I am sure you will get better results.....</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>.equals()</code> will check if the two strings have the same value and return the <code>boolean</code> value where as the <code>==</code> operator checks to see if the two strings are the same object.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Someone said on a post higher up that  == is used for int and for checking nulls.\nIt may also be used to check for Boolean operations and char types.</p>\n\n<p>Be very careful though and double check that you are using a char and not a String.\nfor example </p>\n\n<pre><code>    String strType = \"a\";\n    char charType = 'a';\n</code></pre>\n\n<p>for strings you would then check\nThis would be correct</p>\n\n<pre><code>    if(strType.equals(\"a\")\n        do something\n</code></pre>\n\n<p>but </p>\n\n<pre><code>    if(charType.equals('a')\n        do something else\n</code></pre>\n\n<p>would be incorrect, you would need to do the following</p>\n\n<pre><code>    if(charType == 'a')\n         do something else\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>a==b</code></p>\n\n<p>Compares references, not values. The use of <code>==</code> with object references is generally limited to the following:</p>\n\n<ol>\n<li><p>Comparing to see if a reference is <code>null</code>.</p></li>\n<li><p>Comparing two enum values. This works because there is only one object for each <code>enum</code> constant.</p></li>\n<li><p>You want to know if two references are to the same object</p></li>\n</ol>\n\n<p><code>\"a\".equals(\"b\")</code></p>\n\n<p>Compares values for equality. Because this method is defined in the <code>Object</code> class, from which all other classes are derived, it's automatically defined for every class. However, it doesn't perform an intelligent comparison for most classes unless the class overrides it. It has been defined in a meaningful way for most Java core classes. If it's not defined for a (user) class, it behaves the same as <code>==</code>.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>In simple terms, a <strong>stack trace</strong> is a list of the method calls that the application was in the middle of when an Exception was thrown.</p>\n\n<p><strong>Simple Example</strong></p>\n\n<p>With the example given in the question, we can determine exactly where the exception was thrown in the application. Let's have a look at the stack trace:</p>\n\n<pre><code>Exception in thread \"main\" java.lang.NullPointerException\n        at com.example.myproject.Book.getTitle(Book.java:16)\n        at com.example.myproject.Author.getBookTitles(Author.java:25)\n        at com.example.myproject.Bootstrap.main(Bootstrap.java:14)\n</code></pre>\n\n<p>This is a very simple stack trace. If we start at the beginning of the list of \"at ...\", we can tell where our error happened. What we're looking for is the <strong>topmost</strong> method call that is part of our application. In this case, it's:</p>\n\n<pre><code>at com.example.myproject.Book.getTitle(Book.java:16)\n</code></pre>\n\n<p>To debug this, we can open up <code>Book.java</code> and look at line <code>16</code>, which is:</p>\n\n<pre><code>public String getTitle() {\n    System.out.println(title.toString()); &lt;-- line 16\n    return title;\n}\n</code></pre>\n\n<p>This would indicate that something (probably <code>title</code>) is <code>null</code> in the above code.</p>\n\n<p><strong>Example with a chain of exceptions</strong></p>\n\n<p>Sometimes applications will catch an Exception and re-throw it as the cause of another Exception.  This typically looks like:</p>\n\n<pre><code>try {\n....\n} catch (NullPointerException e) {\n  throw new IllegalStateException(\"A book has a null property\", e)\n}\n</code></pre>\n\n<p>This might give you a stack trace that looks like:</p>\n\n<pre><code>Exception in thread \"main\" java.lang.IllegalStateException: A book has a null property\n        at com.example.myproject.Author.getBookIds(Author.java:38)\n        at com.example.myproject.Bootstrap.main(Bootstrap.java:14)\nCaused by: java.lang.NullPointerException\n        at com.example.myproject.Book.getId(Book.java:22)\n        at com.example.myproject.Author.getBookIds(Author.java:35)\n        ... 1 more\n</code></pre>\n\n<p>What's different about this one is the \"Caused by\". Sometimes exceptions will have multiple \"Caused by\" sections. For these, you typically want to find the \"root cause\", which will be one of the lowest \"Caused by\" sections in the stack trace. In our case, it's:</p>\n\n<pre><code>Caused by: java.lang.NullPointerException &lt;-- root cause\n        at com.example.myproject.Book.getId(Book.java:22) &lt;-- important line\n</code></pre>\n\n<p>Again, with this exception we'd want to look at line <code>22</code> of <code>Book.java</code> to see what might cause the <code>NullPointerException</code> here.</p>\n\n<p><strong>More daunting example with library code</strong></p>\n\n<p>Usually stack traces are much more complex than the two examples above. Here's an example (it's a long one, but demonstrates several levels of chained exceptions):</p>\n\n<pre><code>javax.servlet.ServletException: Something bad happened\n    at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:60)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\n    at com.example.myproject.ExceptionHandlerFilter.doFilter(ExceptionHandlerFilter.java:28)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\n    at com.example.myproject.OutputBufferFilter.doFilter(OutputBufferFilter.java:33)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)\n    at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)\n    at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n    at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n    at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)\n    at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)\n    at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\n    at org.mortbay.jetty.Server.handle(Server.java:326)\n    at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\n    at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:943)\n    at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756)\n    at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)\n    at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\n    at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)\n    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\nCaused by: com.example.myproject.MyProjectServletException\n    at com.example.myproject.MyServlet.doPost(MyServlet.java:169)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n    at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)\n    at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)\n    at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:30)\n    ... 27 more\nCaused by: org.hibernate.exception.ConstraintViolationException: could not insert: [com.example.myproject.MyEntity]\n    at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:96)\n    at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66)\n    at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:64)\n    at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2329)\n    at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2822)\n    at org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:71)\n    at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:268)\n    at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:321)\n    at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:204)\n    at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:130)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:210)\n    at org.hibernate.event.def.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:56)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:195)\n    at org.hibernate.event.def.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:50)\n    at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:93)\n    at org.hibernate.impl.SessionImpl.fireSave(SessionImpl.java:705)\n    at org.hibernate.impl.SessionImpl.save(SessionImpl.java:693)\n    at org.hibernate.impl.SessionImpl.save(SessionImpl.java:689)\n    at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.hibernate.context.ThreadLocalSessionContext$TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:344)\n    at $Proxy19.save(Unknown Source)\n    at com.example.myproject.MyEntityService.save(MyEntityService.java:59) &lt;-- relevant call (see notes below)\n    at com.example.myproject.MyServlet.doPost(MyServlet.java:164)\n    ... 32 more\nCaused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]\n    at org.hsqldb.jdbc.Util.throwError(Unknown Source)\n    at org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown Source)\n    at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105)\n    at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:57)\n    ... 54 more\n</code></pre>\n\n<p>In this example, there's a lot more. What we're mostly concerned about is looking for methods that are from <em>our code</em>, which would be anything in the <code>com.example.myproject</code> package. From the second example (above), we'd first want to look down for the root cause, which is:</p>\n\n<pre><code>Caused by: java.sql.SQLException\n</code></pre>\n\n<p>However, all the method calls under that are library code. So we'll move up to the \"Caused by\" above it, and look for the first method call originating from our code, which is:</p>\n\n<pre><code>at com.example.myproject.MyEntityService.save(MyEntityService.java:59)\n</code></pre>\n\n<p>Like in previous examples, we should look at <code>MyEntityService.java</code> on line <code>59</code>, because that's where this error originated (this one's a bit obvious what went wrong, since the SQLException states the error, but the debugging procedure is what we're after).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To add on to what Rob has mentioned.  Setting break points in your application allows for the step-by-step processing of the stack.  This enables the developer to use the debugger to see at what exact point the method is doing something that was unanticipated.</p>\n\n<p>Since Rob has used the NullPointerException (NPE) to illustrate something common, we can help to remove this issue in the following manner:  </p>\n\n<p>if we have a method that takes parameters such as:  <code>void (String firstName)</code>  </p>\n\n<p>In our code we would want to evaluate that firstName contains a value, we would do this like so: <code>if(firstName == null || firstName.equals(\"\"))  return;</code></p>\n\n<p>The above prevents us from using firstName as an unsafe parameter.  Therefore  by doing null checks before processing we can help to ensure that our code will run properly.  To expand on an example that utilizes an object with methods we can look here:  </p>\n\n<p><code>if(dog == null || dog.firstName == null)  return;</code></p>\n\n<p>The above is the proper order to check for nulls, we start with the base object, dog in this case, and then begin walking down the tree of possibilities to make sure everything is valid before processing.  If the order were reversed a NPE could potentially be thrown and our program would crash.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is one more stacktrace feature offered by Throwable family - the possibility to <strong>manipulate</strong> stack trace information.</p>\n\n<p><strong>Standard behavior:</strong></p>\n\n<pre><code>package test.stack.trace;\n\npublic class SomeClass {\n\n    public void methodA() {\n        methodB();\n    }\n\n    public void methodB() {\n        methodC();\n    }\n\n    public void methodC() {\n        throw new RuntimeException();\n    }\n\n    public static void main(String[] args) {\n        new SomeClass().methodA();\n    }\n}\n</code></pre>\n\n<p>Stack trace:</p>\n\n<pre><code>Exception in thread \"main\" java.lang.RuntimeException\n    at test.stack.trace.SomeClass.methodC(SomeClass.java:18)\n    at test.stack.trace.SomeClass.methodB(SomeClass.java:13)\n    at test.stack.trace.SomeClass.methodA(SomeClass.java:9)\n    at test.stack.trace.SomeClass.main(SomeClass.java:27)\n</code></pre>\n\n<p><strong>Manipulated stack trace:</strong></p>\n\n<pre><code>package test.stack.trace;\n\npublic class SomeClass {\n\n    ...\n\n    public void methodC() {\n        RuntimeException e = new RuntimeException();\n        e.setStackTrace(new StackTraceElement[]{\n                new StackTraceElement(\"OtherClass\", \"methodX\", \"String.java\", 99),\n                new StackTraceElement(\"OtherClass\", \"methodY\", \"String.java\", 55)\n        });\n        throw e;\n    }\n\n    public static void main(String[] args) {\n        new SomeClass().methodA();\n    }\n}\n</code></pre>\n\n<p>Stack trace:</p>\n\n<pre><code>Exception in thread \"main\" java.lang.RuntimeException\n    at OtherClass.methodX(String.java:99)\n    at OtherClass.methodY(String.java:55)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I post this answer so that the topmost answer when sorting by activity is not the one that is just plain wrong.</p>\n\n<p><strong>What is a Stacktrace?</strong></p>\n\n<p>A stacktrace is a very helpful debugging tool. It shows you the call stack (meaning, the stack of functions that were called up to that point) at the time an uncaught exception was thrown (or the time the stacktrace was generated manually). This is very useful because it doesn't only show you where the error happened, but also how the program ended up in that place of the code.\nThis leads over to the next question:</p>\n\n<p><strong>What is an Exception?</strong></p>\n\n<p>An Exception is what the Runtime Environment uses to tell you that an error occurred. Popular examples are NullPointerException, IndexOutOfBoundsException or ArithmeticException. Each of these are caused when you try to do something that is not possible. For example, a NullPointerException will be thrown when you try to deference a Null-object:</p>\n\n<pre><code>Object a = null;\na.toString();    //this line throws a NullPointerException\n\nObject[] b = new Object[5];\nSystem.out.println(b[10]);    //this line throws an IndexOutOfBoundsException,\n                              //because b is only 5 elements long\nint ia = 5;\nint ib = 0;\nia = ia/b;                      //this line throws an  ArithmeticException with the \n                              //message \"/ by 0\", because you are trying to\n                              //divide by 0, which is not possible.\n</code></pre>\n\n<p><strong>How to deal with Stacktraces/Exceptions?</strong></p>\n\n<p>At first, find out what is causing the Exception. Try googleing the name of the exception to find out, what is the cause of that exception. Most of the time it will be caused by incorrect code. In the given examples above, all of the exceptions are caused by incorrect code. So for the NullPointerException example you could make sure that <code>a</code> is never null at that time. You could, for example, initialize <code>a</code> or include a check like this one:</p>\n\n<pre><code>if (a!=null) {\n    a.toString();\n}\n</code></pre>\n\n<p>This way, the offending line is not executed if <code>a==null</code>. Same goes for the other examples.</p>\n\n<p>Sometimes you can't make sure that you don't get an exception. For example, if you are using a network connection in your program, you cannot stop computer from loosing the internet connection (e.g. you can't stop the user from disconnecting the computer's network connection). In this case the network library will probably throw an exception. In this case, you should catch the exception and <strong>handle</strong> it. This means, in the example with the network connection, you should use this to try to reopen the connection or notify the user or something like that. Also, whenever you use catch, always catch only the exception you want to catch, <strong>do not use broad catch statements like <code>catch (Exception e)</code></strong> that would catch all exceptions. This is very important, because otherwise you might accidentally catch the wrong exception and react in the wrong way.</p>\n\n<pre><code>try {\n    Socket x = new Socket(\"1.1.1.1\", 6789);\n    x.getInputStream().read()\n} catch (IOException e) {\n    System.err.println(\"Connection could not be established, please try again later!\")\n}\n</code></pre>\n\n<p><strong>Why should I not use <code>catch (Exception e)</code>?</strong></p>\n\n<p>Let's use a small example to show why not to just catch all Exceptions:</p>\n\n<pre><code>int mult(Integer a,Integer b) {\n    try {\n        int result = a*b\n        return result;\n    } catch (Exception e) {\n        System.err.println(\"Error: Division by zero!\");\n        return 0;\n    }\n}\n</code></pre>\n\n<p>What this code is trying to do is to catch the <code>ArithmeticException</code> caused by a possible division by 0. But what it also catches is a possible <code>NullPointerException</code> that is thrown if <code>a</code> or <code>b</code> are <code>null</code>. This means, you might get a <code>NullPointerException</code> but you'll treat it as an ArithmeticException and probably do the wrong thing. In the best case you still miss that there was a NullPointerException. Stuff like that makes debugging much harder, so don't do that.</p>\n\n<p><strong>TLDR</strong></p>\n\n<ol>\n<li>Figure out what is the cause of the exception and fix it, so that it doesn't throw the exception at all.</li>\n<li><p>If 1. is not possible, catch the specific exception and handle it.</p>\n\n<ul>\n<li>Never just add a try/catch for any exception and then just ignore the exception! Don't do that!</li>\n<li>Never use <code>catch (Exception e)</code>, always catch specific Exceptions. That will save you a lot of headaches.</li>\n</ul></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The other posts describe what a stack trace is, but it can still be hard to work with.</p>\n\n<p>If you get a stack trace and want to trace the cause of the exception, a good start point in understanding it is to use the <em>Java Stack Trace Console</em> in <strong>Eclipse</strong>. If you use another IDE there may be a similar feature, but this answer is about Eclipse.</p>\n\n<p>First, ensure that you have all of your Java sources accessible in an Eclipse project.</p>\n\n<p>Then in the <em>Java</em> respective, click on the <em>Console</em> tab (usually at the bottom). If the Console view is not visible, go to the menu option <em>Window -&gt; Show View</em> and select <em>Console</em>.</p>\n\n<p>Then in the console window, click on the following button (on the right)</p>\n\n<p><img src=\"http://i.stack.imgur.com/B57aS.gif\" alt=\"Consoles button\"></p>\n\n<p>and then select <strong>Java Stack Trace Console</strong> from the drop-down list.</p>\n\n<p>Paste your stack trace into the console. It will then provide a list of links into your source code and any other source code available.</p>\n\n<p>This is what you might see (image from the Eclipse documentation):</p>\n\n<p><img src=\"http://i.stack.imgur.com/E5hFw.png\" alt=\"Diagram from Eclipse documentation\"></p>\n\n<p>The most recent method call made will be the <em>top</em> of the stack, which is the top line (excluding the message text). Going down the stack goes back in time. The second line is the method that calls the first line, etc.</p>\n\n<p>If you are using open-source software, you might need to download and attach to your project the sources if you want to examine. Download the source jars, in your project, open the <em>Referenced Libraries</em> folder to find your jar for your open-source module (the one with the class files) then right click, select <em>Properties</em> and attach the source jar.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>if you are getting error of stack trace like following error</strong></p>\n\n<pre><code>30:                 String s3=rs.getString(\"username\");\n31:                 String s4=rs.getString(\"password\");\n32:                 \n33:                 if(s1.equals(s3)&amp;&amp;s2.equals(s4))\n34:                 {\n35:         %&gt;          &lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt; \n36:                     &lt;c:redirect url=\"user1.jsp\"/&gt;\nStacktrace:\n    org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:568)\n    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:470)\n    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:390)\n    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:334)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\n    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\nroot cause\njava.lang.NullPointerException\n</code></pre>\n\n<p><strong>to avoid stack trace error in database just simply add try and catch method to remove that error try as folowwing</strong></p>\n\n<pre><code>try\n        {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            java.sql.Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost/c_d\", \"root\",\"root\");\n            Statement st=con.createStatement();\n            ResultSet rs;\n            rs=st.executeQuery(\"select username,password from temp1\");\n\n        while(rs.next())\n        {\n            String s3=rs.getString(\"username\");\n            String s4=rs.getString(\"password\");\n\n            if(s1.equals(s3)&amp;&amp;s2.equals(s4))\n            {\n    %&gt;          &lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt; \n                &lt;c:redirect url=\"user1.jsp\"/&gt;\n    &lt;%\n            }\n          }\n\n        }\n\n        catch(Exception e)\n        {\n            e.printStackTrace();\n        }\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The standard way to do this (before Java 1.7) is as follows:</p>\n\n<pre><code>import java.util.Random;\n\n/**\n * Returns a pseudo-random number between min and max, inclusive.\n * The difference between min and max can be at most\n * &lt;code&gt;Integer.MAX_VALUE - 1&lt;/code&gt;.\n *\n * @param min Minimum value\n * @param max Maximum value.  Must be greater than min.\n * @return Integer between min and max, inclusive.\n * @see java.util.Random#nextInt(int)\n */\npublic static int randInt(int min, int max) {\n\n    // NOTE: This will (intentionally) not run as written so that folks\n    // copy-pasting have to think about how to initialize their\n    // Random instance.  Initialization of the Random instance is outside\n    // the main scope of the question, but some decent options are to have\n    // a field that is initialized once and then re-used as needed or to\n    // use ThreadLocalRandom (if using at least Java 1.7).\n    Random rand;\n\n    // nextInt is normally exclusive of the top value,\n    // so add 1 to make it inclusive\n    int randomNum = rand.nextInt((max - min) + 1) + min;\n\n    return randomNum;\n}\n</code></pre>\n\n<p>See <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#nextInt-int-\">the relevant JavaDoc</a>.  In practice, the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Random.html\">java.util.Random</a> class is often preferable to <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#random--\">java.lang.Math.random()</a>.</p>\n\n<p>In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.</p>\n\n<p>In Java 1.7 or later, the following <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextInt-int-int-\">method</a> is even more straightforward as long as there is no need to explicitly set the initial seed:</p>\n\n<pre><code>import java.util.concurrent.ThreadLocalRandom;\n\n// nextInt is normally exclusive of the top value,\n// so add 1 to make it inclusive\nThreadLocalRandom.current().nextInt(min, max + 1);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One standard pattern for accomplishing this is:</p>\n\n<pre><code>Min + (int)(Math.random() * ((Max - Min) + 1))\n</code></pre>\n\n<p>The <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\">Java</a> Math library function Math.random() generates a double value in the range <code>[0,1)</code>. Notice this range does not include the 1.</p>\n\n<p>In order to get a specific range of values first, you need to multiply by the magnitude of the range of values you want covered. </p>\n\n<pre><code>Math.random() * ( Max - Min )\n</code></pre>\n\n<p>This returns a value in the range <code>[0,Max-Min)</code>, where 'Max-Min' is not included.</p>\n\n<p>For example, if you want <code>[5,10]</code>, you need to cover five integer values so you use</p>\n\n<pre><code>Math.random() * 5\n</code></pre>\n\n<p>This would return a value in the range <code>[0,5)</code>, where 5 is not included.</p>\n\n<p>Now you need to shift this range up to the range that you are targeting. You do this by adding the Min value.</p>\n\n<pre><code>Min + (Math.random() * (Max - Min))\n</code></pre>\n\n<p>You now will get a value in the range <code>[Min,Max)</code>. Following our example, that means <code>[5,10)</code>:</p>\n\n<pre><code>5 + (Math.random() * (10 - 5))\n</code></pre>\n\n<p>But, this still doesn't include <code>Max</code> and you are getting a double value. In order to get the <code>Max</code> value included, you need to add 1 to your range parameter <code>(Max - Min)</code> and then truncate the decimal part by casting to an int. This is accomplished via:</p>\n\n<pre><code>Min + (int)(Math.random() * ((Max - Min) + 1))\n</code></pre>\n\n<p>And there you have it. A random integer value in the range <code>[Min,Max]</code>, or per the example <code>[5,10]</code>:</p>\n\n<pre><code>5 + (int)(Math.random() * ((10 - 5) + 1))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use:</p>\n\n<pre><code>Random ran = new Random();\nint x = ran.nextInt(6) + 5;\n</code></pre>\n\n<p>The integer <code>x</code> is now the random number that has a possible outcome of 5-10.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use:</p>\n\n<pre><code>minimum + rn.nextInt(maxValue - minvalue + 1)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can edit your second code example to:</p>\n\n<pre><code>Random rn = new Random();\nint range = maximum - minimum + 1;\nint randomNum =  rn.nextInt(range) + minimum;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Forgive me for being fastidious, but the solution suggested by the majority, i.e., <code>min + rng.nextInt(max - min + 1))</code>, seems perilous due to the fact that:</p>\n\n<ul>\n<li>rng.nextInt(n) cannot reach Integer.MAX_VALUE.</li>\n<li>(max - min) may cause overflow when min is negative.</li>\n</ul>\n\n<p>A foolproof solution would return correct results for any min &lt;= max within [Integer.MIN_VALUE, Integer.MAX_VALUE]. Consider the following na\u00efve implementation:</p>\n\n<pre><code>int nextIntInRange(int min, int max, Random rng) {\n   if (min &gt; max) {\n      throw new IllegalArgumentException(\"Cannot draw random int from invalid range [\" + min + \", \" + max + \"].\");\n   }\n   int diff = max - min;\n   if (diff &gt;= 0 &amp;&amp; diff != Integer.MAX_VALUE) {\n      return (min + rng.nextInt(diff + 1));\n   }\n   int i;\n   do {\n      i = rng.nextInt();\n   } while (i &lt; min || i &gt; max);\n   return i;\n}\n</code></pre>\n\n<p>Although inefficient, note that the probability of success in the while-loop will always be 50% or higher.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With <a href=\"/questions/tagged/java-8\" class=\"post-tag\" title=\"show questions tagged 'java-8'\" rel=\"tag\">java-8</a> they introduced the method <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-\"><code>ints(int randomNumberOrigin, int randomNumberBound)</code></a> in the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Random.html\"><code>Random</code></a> class.</p>\n\n<p>For example if you want to generate five random integers (or a single one) in the range [0, 10], just do:</p>\n\n<pre><code>Random r = new Random();\nint[] fiveRandomNumbers = r.ints(5, 0, 11).toArray();\nint randomNumber = r.ints(1, 0, 11).findFirst().getAsInt();\n</code></pre>\n\n<p>The first parameter indicates just the size of the <code>IntStream</code> generated (which is the overloaded method of the one that produces an unlimited <code>IntStream</code>).</p>\n\n<p>If you need to do multiple separate calls, you can create an infinite primitive iterator from the stream:</p>\n\n<pre><code>public final class RandomNumberGenerator {\n\n    private PrimitiveIterator.OfInt randomIterator;\n\n    /**\n     * Initialize a new random number generator that generates\n     * random numbers in the range [min, max]\n     * @param min - the min value (inclusive)\n     * @param max - the max value (inclusive)\n     */\n    public RandomNumberGenerator(int min, int max) {\n        randomIterator = new Random().ints(min, max + 1).iterator();\n    }\n\n    /**\n     * Returns a random number in the range (min, max)\n     * @return a random number in the range (min, max)\n     */\n    public int nextInt() {\n        return randomIterator.nextInt();\n    }\n}\n</code></pre>\n\n<p>You can also do it for <code>double</code> and <code>long</code> values.</p>\n\n<p>Hope it helps! :)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>ThreadLocalRandom equivalent of class java.util.Random for multithreaded environment. Generating a random number is carried out locally in each of the threads. So we have a better performance by reducing the conflicts.</p>\n\n<pre><code>int rand = ThreadLocalRandom.current().nextInt(x,y);\n</code></pre>\n\n<p>x,y - intervals e.g. (1,10)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The Math.Random class in <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\">Java</a> is 0-based. So, if you write something like </p>\n\n<pre><code>Random rand = new Random();\nint x = rand.nextInt(10);\n</code></pre>\n\n<p>x will be between 0-9 inclusive.</p>\n\n<p>So given the following array of 25 items, the code to generate a random number between\n0 (the base of the array) and <code>array.length</code> would be:</p>\n\n<pre><code>String[] i = new String[25];\nRandom rand = new Random();\nint index = 0;\n\nindex = rand.nextInt(i.Length)\n</code></pre>\n\n<p>Since <code>i.Length</code> will return 25, the <code>nextInt(i.Length)</code> will return a number between the range of 0-24. The other option is going with <code>Math.Random</code> which works in the same way.</p>\n\n<pre><code>   index = (int)Math.floor(Math.random()*i.length);\n</code></pre>\n\n<p>For a better understanding, check out forum post <em><a href=\"http://www.kirupaforum.com/forums/showthread.php?s=&amp;postid=81565#post81565\">Random Intervals</a></em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In case of rolling a dice it would be random number between 1 to 6 (not 0 to 6), so:</p>\n\n<pre><code>face = 1 + randomNumbers.nextInt(6);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try</p>\n\n<pre><code>rand.nextInt((max+1) - min) + min;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This methods might be convenient to use:</p>\n\n<p>This method will return a random number <strong><em>between</em></strong> the provided min and max value:</p>\n\n<pre><code>public static int getRandomNumberBetween(int min, int max) {\n        Random foo = new Random();\n        int randomNumber = foo.nextInt(max - min) + min;\n        if(randomNumber == min) {\n            // Since the random number is between the min and max values, simply add 1\n            return min + 1;\n        }\n        else {\n            return randomNumber;\n        }\n\n    }\n</code></pre>\n\n<p>and this method will return a random number <strong><em>from</em></strong> the provided min and max value (so the generated number could also be the min or max number):</p>\n\n<pre><code>public static int getRandomNumberFrom(int min, int max) {\n        Random foo = new Random();\n        int randomNumber = foo.nextInt((max + 1) - min) + min;\n\n        return randomNumber;\n\n    }\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I wonder if any of the random number generating methods provided by an <a href=\"http://commons.apache.org/proper/commons-math/\">Apache Commons Math</a> library would fit the bill. </p>\n\n<p>For example: <a href=\"http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/random/RandomDataGenerator.html#nextInt%28int,%20int%29\"><code>RandomDataGenerator.nextInt</code></a> or <a href=\"http://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/random/RandomDataGenerator.html#nextLong%28long,%20long%29\"><code>RandomDataGenerator.nextLong</code></a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a helpful class to generate random <code>ints</code> in a range with any combination of inclusive/exclusive bounds:</p>\n\n<pre><code>import java.util.Random;\n\npublic class RandomRange extends Random {\n    public int nextIncInc(int min, int max) {\n        return nextInt(max - min + 1) + min;\n    }\n\n    public int nextExcInc(int min, int max) {\n        return nextInt(max - min) + 1 + min;\n    }\n\n    public int nextExcExc(int min, int max) {\n        return nextInt(max - min - 1) + 1 + min;\n    }\n\n    public int nextIncExc(int min, int max) {\n        return nextInt(max - min) + min;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>public static Random RANDOM = new Random(System.nanoTime());\n\npublic static final float random(final float pMin, final float pMax) {\n    return pMin + RANDOM.nextFloat() * (pMax - pMin);\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just a small modification of your first solution would suffice</p>\n\n<pre><code> Random rand = new Random2();\n randomNum = minimum + rand.nextInt((maximum - minimum) + 1);\n</code></pre>\n\n<hr>\n\n<p><a href=\"http://codatlas.com/github.com/lambdalab-mirror/jdk7u-jdk/master/src/share/classes/java/util/Random.java?keyword=java.util.random&amp;line=69\" rel=\"nofollow\">Random</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let us take an example. </p>\n\n<p>Suppose I wish to generate a number between <strong>5-10</strong>.</p>\n\n<pre><code>    int max=10;\n    int min=5;\n    int diff=max-min;\n    Random rn = new Random();\n    int i = rn.nextInt(diff+1);\n    i+=min;\n    System.out.print(\"The Random Number is \" + i);\n</code></pre>\n\n<p><em>Let us understand this</em>...</p>\n\n<blockquote>\n  <blockquote>\n    <p>Initialize max with highest value and min with the lowest value. </p>\n    \n    <p>Now, we need to determine how many possible values can be obtained. For this example, it would be </p>\n    \n    <blockquote>\n      <p><strong>5, 6, 7, 8, 9, 10</strong></p>\n    </blockquote>\n    \n    <p>So, count of this would be max-min+1. </p>\n    \n    <blockquote>\n      <p>i.e. 10-5+1=6</p>\n    </blockquote>\n    \n    <p>The random number will generate a number between <strong>0-5</strong>. </p>\n    \n    <blockquote>\n      <p>i.e.   0, 1, 2, 3, 4, 5</p>\n    </blockquote>\n    \n    <p>Adding the <em>min</em> value to the random number would produce</p>\n    \n    <blockquote>\n      <p>5, 6, 7, 8, 9, 10      </p>\n    </blockquote>\n    \n    <p>Hence we obtain the desired range. </p>\n  </blockquote>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a simple sample that shows how to generate random number from closed <code>[min, max]</code> range, while <code>min &lt;= max is true</code></p>\n\n<p>You can reuse it as field in hole class, also having all <code>Random.class</code> methods in one place</p>\n\n<p><strong>Results example:</strong></p>\n\n<pre><code>RandomUtils random = new RandomUtils();\nrandom.nextInt(0, 0); // returns 0\nrandom.nextInt(10, 10); // returns 10\nrandom.nextInt(-10, 10); // returns numbers from -10 to 10 (-10, -9....9, 10)\nrandom.nextInt(10, -10); // throws assert\n</code></pre>\n\n<p><strong>Sources:</strong></p>\n\n<pre><code>import junit.framework.Assert;\nimport java.util.Random;\n\npublic class RandomUtils extends Random {\n\n    /**\n     * @param min generated value. Can't be &gt; then max\n     * @param max generated value\n     * @return values in closed range [min, max].\n     */\n    public int nextInt(int min, int max) {\n        Assert.assertFalse(\"min can't be &gt; then max; values:[\" + min + \", \" + max + \"]\", min &gt; max);\n        if (min == max) {\n            return max;\n        }\n\n        return nextInt(max - min + 1) + min;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just use the <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Random.html\">Random</a> class:</p>\n\n<pre><code>Random ran = new Random();\n// Assumes max and min are non-negative.\nint randomInt = min + ran.nextInt(max - min + 1);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>int random = minimum + Double.valueOf(Math.random()*(maximum-minimun)).intValue();\n</code></pre>\n\n<p>Or take a look to RandomUtils from <a href=\"http://commons.apache.org/lang\">Apache Commons</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want to try the answer with the most votes above, you can simply use this code:</p>\n\n<pre><code>public class Randomizer\n{\n    public static int generate(int min,int max)\n    {\n        return min + (int)(Math.random() * ((max - min) + 1));\n    }\n\n    public static void main(String[] args)\n    {\n        System.out.println(Randomizer.generate(0,10));\n    }\n}\n</code></pre>\n\n<p>It is just clean and simple.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>rand.nextInt((max+1) - min) + min;\n</code></pre>\n\n<p>This is working fine.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found this example on <a href=\"http://www.javapractices.com/topic/TopicAction.do?Id=62\">http://www.javapractices.com/topic/TopicAction.do?Id=62</a>:</p>\n\n<hr>\n\n<p>This example generates random integers in a specific range. </p>\n\n<pre><code>import java.util.Random;\n\n/** Generate random integers in a certain range. */\npublic final class RandomRange {\n\n  public static final void main(String... aArgs){\n    log(\"Generating random integers in the range 1..10.\");\n\n    int START = 1;\n    int END = 10;\n    Random random = new Random();\n    for (int idx = 1; idx &lt;= 10; ++idx){\n      showRandomInteger(START, END, random);\n    }\n\n    log(\"Done.\");\n  }\n\n  private static void showRandomInteger(int aStart, int aEnd, Random aRandom){\n    if ( aStart &gt; aEnd ) {\n      throw new IllegalArgumentException(\"Start cannot exceed End.\");\n    }\n    //get the range, casting to long to avoid overflow problems\n    long range = (long)aEnd - (long)aStart + 1;\n    // compute a fraction of the range, 0 &lt;= frac &lt; range\n    long fraction = (long)(range * aRandom.nextDouble());\n    int randomNumber =  (int)(fraction + aStart);    \n    log(\"Generated : \" + randomNumber);\n  }\n\n  private static void log(String aMessage){\n    System.out.println(aMessage);\n  }\n} \n</code></pre>\n\n<p>An example run of this class :<br>\nGenerating random integers in the range 1..10.<br>\nGenerated : 9<br>\nGenerated : 3<br>\nGenerated : 3<br>\nGenerated : 9<br>\nGenerated : 4<br>\nGenerated : 1<br>\nGenerated : 3<br>\nGenerated : 9<br>\nGenerated : 10<br>\nGenerated : 10<br>\nDone.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you need a lot of random numbers, I do not recommend the Random class in the API. It has just a too small period. Try the <a href=\"http://en.wikipedia.org/wiki/Mersenne_twister\">Mersenne twister</a> instead. There is <a href=\"http://cs.gmu.edu/~sean/research/\">a Java implementation</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use this code snippet which will resolve your problem:</p>\n\n<pre><code>Random r = new Random();\nint myRandomNumber = 0;\nmyRandomNumber = r.nextInt(maxValue-minValue+1)+minValue;\n</code></pre>\n\n<p>Use myRandomNumber (which will give you a number within a range).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another option is just using <a href=\"http://en.wikipedia.org/wiki/Apache_Commons\">Apache Commons</a>:</p>\n\n<pre><code>import org.apache.commons.math.random.RandomData;\nimport org.apache.commons.math.random.RandomDataImpl;\n\npublic void method( ) {\n    RandomData randomData = new RandomDataImpl( );\n    int number = randomData.nextInt(5,10);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import java.util.Random;\n\npublic class RandomUtil {\n    // Declare as class variable so that it is not re-seeded every call\n    private static Random random = new Random();\n\n    /**\n     * Returns a psuedo-random number between min and max (both inclusive)\n     * @param min Minimim value\n     * @param max Maximim value. Must be greater than min.\n     * @return Integer between min and max (both inclusive)\n     * @see java.util.Random#nextInt(int)\n     */\n    public static int nextInt(int min, int max) {\n        // nextInt is normally exclusive of the top value,\n        // so add 1 to make it inclusive\n        return random.nextInt((max - min) + 1) + min;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am thinking to linearly normalize the generated random numbers into desired range by using the following. Let <code>x</code> be a random number, let <code>a</code> and <code>b</code> be the minimum and maximum range of desired normalized number.</p>\n\n<p>Then below is just a very simple code snipplet to test the range produced by the linear mapping.</p>\n\n<pre><code>public static void main(String[] args) {\n    int a = 100;\n    int b = 1000;\n    int lowest = b;\n    int highest = a;\n    int count = 100000;\n    Random random = new Random();\n    for (int i = 0; i &lt; count; i++) {\n        int nextNumber = (int) ((Math.abs(random.nextDouble()) * (b - a))) + a;\n        if (nextNumber &lt; a || nextNumber &gt; b) {\n            System.err.println(\"number not in range :\" + nextNumber);\n        }\n        else {\n            System.out.println(nextNumber);\n        }\n        if (nextNumber &lt; lowest) {\n            lowest = nextNumber;\n        }\n        if (nextNumber &gt; highest) {\n            highest = nextNumber;\n        }\n    }\n    System.out.println(\"Produced \" + count + \" numbers from \" + lowest\n            + \" to \" + highest);\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One of my friends had asked me this same question in university today (his requirements was to generate a random number between 1 &amp; -1). So I wrote this, and it works fine so far with my testing. There are ideally a lot of ways to generate random numbers given a range. Try this:</p>\n\n<p>Function:</p>\n\n<pre><code>private static float getRandomNumberBetween(float numberOne, float numberTwo) throws Exception{\n\n    if (numberOne == numberTwo){\n        throw new Exception(\"Both the numbers can not be equal\");\n    }\n\n    float rand = (float) Math.random();\n    float highRange = Math.max(numberOne, numberTwo);\n    float lowRange = Math.min(numberOne, numberTwo);\n\n    float lowRand = (float) Math.floor(rand-1);\n    float highRand = (float) Math.ceil(rand+1);\n\n    float genRand = (highRange-lowRange)*((rand-lowRand)/(highRand-lowRand))+lowRange;\n\n    return genRand;\n}\n</code></pre>\n\n<p>Execute like this:</p>\n\n<pre><code>System.out.println( getRandomNumberBetween(1,-1));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I will simply state what is wrong with the solutions provided by the question and why the errors.</p>\n\n<p>Solution 1:</p>\n\n<pre><code>randomNum = minimum + (int)(Math.random()*maximum); \n</code></pre>\n\n<p>Problem: randomNum is assigned values numbers bigger than maximum.</p>\n\n<p>Explanation: Suppose our minimum is 5, and your maximum is 10. Any value from <code>Math.random()</code> greater than 0.6 will make the expression evaluate to 6 or greater, and adding 5 makes it greater than 10 (your maximum). The problem is you are multiplying the random number by the maximum (which generates a number almost as big as the maximum) and then adding the minimum. Unless the minimum is 1, it's not correct. You have to switch to, as mentioned in other answers</p>\n\n<pre><code>randomNum = minimum + (int)(Math.random()*(maximum-minimum+1))\n</code></pre>\n\n<p>The +1 is because <code>Math.random()</code> will never return 1.0.</p>\n\n<p>Solution 2:</p>\n\n<pre><code>Random rn = new Random();\nint n = maximum - minimum + 1;\nint i = rn.nextInt() % n;\nrandomNum =  minimum + i;\n</code></pre>\n\n<p>Your problem here is that '%' may return a negative number if the first term is smaller than 0. Since <code>rn.nextInt()</code> returns negative values with ~50% chance, you will also not get the expected result.</p>\n\n<p>This, was, however, almost perfect. You just had to look a bit further down the Javadoc, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt%28int%29\" rel=\"nofollow\">nextInt(int n)</a>. With that method available, doing</p>\n\n<pre><code>Random rn = new Random();\nint n = maximum - minimum + 1;\nint i = rn.nextInt(n);\nrandomNum =  minimum + i;\n</code></pre>\n\n<p>Would also return the desired result.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<h2>What is a raw type?</h2>\n\n<p>The Java Language Specification defines a <em>raw type</em> as follows:</p>\n\n<h3><a href=\"http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.8\">JLS 4.8 Raw Types</a></h3>\n\n<blockquote>\n  <p>A raw type is define to be either:</p>\n  \n  <ul>\n  <li>The name of a generic type declaration used without any accompanying actual type parameters.</li>\n  <li>Any non-static type member of a raw type <code>R</code> that is not inherited from a superclass or superinterface of <code>R</code>.</li>\n  </ul>\n</blockquote>\n\n<p>Here's an example to illustrate:</p>\n\n<pre><code>public class MyType&lt;E&gt; {\n    class Inner { }\n    static class Nested { }\n\n    public static void main(String[] args) {\n        MyType mt;          // warning: MyType is a raw type\n        MyType.Inner inn;   // warning: MyType.Inner is a raw type\n\n        MyType.Nested nest; // no warning: not parameterized type\n        MyType&lt;Object&gt; mt1; // no warning: type parameter given\n        MyType&lt;?&gt; mt2;      // no warning: type parameter given (wildcard OK!)\n    }\n}\n</code></pre>\n\n<p>Here, <code>MyType&lt;E&gt;</code> is a <em>parameterized type</em> (<a href=\"http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.5\">JLS 4.5</a>). It is common to colloquially refer to this type as simply <code>MyType</code> for short, but technically the name is <code>MyType&lt;E&gt;</code>.</p>\n\n<p><code>mt</code> has a raw type (and generates a compilation warning) by the first bullet point in the above definition; <code>inn</code> also has a raw type by the second bullet point.</p>\n\n<p><code>MyType.Nested</code> is not a parameterized type, even though it's a member type of a parameterized type <code>MyType&lt;E&gt;</code>, because it's <code>static</code>.</p>\n\n<p><code>mt1</code>, and <code>mt2</code> are both declared with actual type parameters, so they're not raw types.</p>\n\n<hr>\n\n<h2>What's so special about raw types?</h2>\n\n<p>Essentially, raw types behaves just like they were before generics were introduced. That is, the following is entirely legal at compile-time.</p>\n\n<pre><code>List names = new ArrayList(); // warning: raw type!\nnames.add(\"John\");\nnames.add(\"Mary\");\nnames.add(Boolean.FALSE); // not a compilation error!\n</code></pre>\n\n<p>The above code runs just fine, but suppose you also have the following:</p>\n\n<pre><code>for (Object o : names) {\n    String name = (String) o;\n    System.out.println(name);\n} // throws ClassCastException!\n  //    java.lang.Boolean cannot be cast to java.lang.String\n</code></pre>\n\n<p>Now we run into trouble at run-time, because <code>names</code> contains something that isn't an <code>instanceof String</code>.</p>\n\n<p>Presumably, if you want <code>names</code> to contain only <code>String</code>, you <em>could</em> perhaps still use a raw type and <em>manually check every</em> <code>add</code> yourself, and then <em>manually cast</em> to <code>String</code> every item from <code>names</code>. <strong>Even better</strong>, though is NOT to use a raw type and <em>let the compiler does all the work for you</em>, harnessing the power of Java generics.</p>\n\n<pre><code>List&lt;String&gt; names = new ArrayList&lt;String&gt;();\nnames.add(\"John\");\nnames.add(\"Mary\");\nnames.add(Boolean.FALSE); // compilation error!\n</code></pre>\n\n<p>Of course, if you <em>DO</em> want <code>names</code> to allow a <code>Boolean</code>, then you can declare it as <code>List&lt;Object&gt; names</code>, and the above code would compile.</p>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://java.sun.com/docs/books/tutorial/extra/generics/index.html\">Java Tutorials/Generics</a></li>\n</ul>\n\n<hr>\n\n<h2>How's a raw type different from using <code>&lt;Object&gt;</code> as type parameters</h2>\n\n<p>The following is a quote from <em>Effective Java 2nd Edition, Item 23: Don't use raw types in new code</em>:</p>\n\n<blockquote>\n  <p>Just what is the difference between the raw type <code>List</code> and the parameterized type <code>List&lt;Object&gt;</code>? Loosely speaking, the former has opted out generic type checking, while the latter explicitly told the compiler that it is capable of holding objects of any type. While you can pass a <code>List&lt;String&gt;</code> to a parameter of type <code>List</code>, you can't pass it to a parameter of type <code>List&lt;Object&gt;</code>. There are subtyping rules for generics, and <code>List&lt;String&gt;</code> is a subtype of the raw type <code>List</code>, but not of the parameterized type <code>List&lt;Object&gt;</code>. As a consequence, <strong>you lose type safety if you use raw type like <code>List</code>, but not if you use a parameterized type like <code>List&lt;Object&gt;</code></strong>.</p>\n</blockquote>\n\n<p>To illustrate the point, consider the following method which takes a <code>List&lt;Object&gt;</code> and appends a <code>new Object()</code>.</p>\n\n<pre><code>void appendNewObject(List&lt;Object&gt; list) {\n   list.add(new Object());\n}\n</code></pre>\n\n<p>Generics in Java are invariant. A <code>List&lt;String&gt;</code> is not a <code>List&lt;Object&gt;</code>, so the following would generate a compiler warning:</p>\n\n<pre><code>List&lt;String&gt; names = new ArrayList&lt;String&gt;();\nappendNewObject(names); // compilation error!\n</code></pre>\n\n<p>If you had declared <code>appendNewObject</code> to take a raw type <code>List</code> as parameter, then this would compile, and you'd therefore lose the type safety that you get from generics.</p>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2770264/what-is-the-difference-between-e-extends-number-and-number/\">What is the difference between <code>&lt;E extends Number&gt;</code> and <code>&lt;Number&gt;</code>?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2660827/java-generics-covariance\">java generics (not) covariance</a></li>\n</ul>\n\n<hr>\n\n<h2>How's a raw type different from using <code>&lt;?&gt;</code> as a type parameter?</h2>\n\n<p><code>List&lt;Object&gt;</code>, <code>List&lt;String&gt;</code>, etc are all <code>List&lt;?&gt;</code>, so it may be tempting to just say that they're just <code>List</code> instead. However, there is a major difference: since a <code>List&lt;E&gt;</code> defines only <code>add(E)</code>, you can't add just any arbitrary object to a <code>List&lt;?&gt;</code>. On the other hand, since the raw type <code>List</code> does not have type safety, you can <code>add</code> just about anything to a <code>List</code>.</p>\n\n<p>Consider the following variation of the previous snippet:</p>\n\n<pre><code>static void appendNewObject(List&lt;?&gt; list) {\n    list.add(new Object()); // compilation error!\n}\n//...\n\nList&lt;String&gt; names = new ArrayList&lt;String&gt;();\nappendNewObject(names); // this part is fine!\n</code></pre>\n\n<p>The compiler did a wonderful job of protecting you from potentially violating the type invariance of the <code>List&lt;?&gt;</code>! If you had declared the parameter as the raw type <code>List list</code>, then the code would compile, and you'd violate the type invariant of <code>List&lt;String&gt; names</code>.</p>\n\n<hr>\n\n<h2>If it's unsafe, why is it allowed to use a raw type?</h2>\n\n<p>Here's another quote from JLS 4.8:</p>\n\n<blockquote>\n  <p>The use of raw types is allowed only as a concession to compatibility of legacy code. <em>The use of raw types in code written after the introduction of genericity into the Java programming language is strongly discouraged. It is possible that future versions of the Java programming language will disallow the use of raw types.</em></p>\n</blockquote>\n\n<p><em>Effective Java 2nd Edition</em> also has this to add:</p>\n\n<blockquote>\n  <p>Given that you shouldn't use raw types, why did the language designers allow them? To provide compatibility.</p>\n  \n  <p>The Java platform was about to enter its second decade when generics were introduced, and there was an enormous amount of Java code in existence that did not use generics. It was deemed critical that all this code remains legal and interoperable with new code that does use generics. It had to be legal to pass instances of parameterized types to methods that were designed for use with ordinary types, and vice versa. This requirement, known as <em>migration compatibility</em>, drove the decision to support raw types.</p>\n</blockquote>\n\n<p>In summary, raw types should NEVER be used in new code. <strong>You should always use parameterized types</strong>.</p>\n\n<hr>\n\n<h2>Are there no exceptions?</h2>\n\n<p>Unfortunately, because Java generics are non-reified, there are two exceptions where raw types must be used in new code:</p>\n\n<ul>\n<li>Class literals, e.g. <code>List.class</code>, not <code>List&lt;String&gt;.class</code></li>\n<li><code>instanceof</code> operand, e.g. <code>o instanceof Set</code>, not <code>o instanceof Set&lt;String&gt;</code></li>\n</ul>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2745193/why-is-collectionstring-class-illegal/\">Why is <code>Collection&lt;String&gt;.class</code> Illegal?</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>What are raw types in Java, and why do I often hear that they shouldn't be used in new code?</p>\n</blockquote>\n\n<p>Raw-types are ancient history of the Java language. In the beginning there were <code>Collections</code> and they held <code>Objects</code> nothing more and nothing less. Every operation on <code>Collections</code> required casts from <code>Object</code> to the desired type.</p>\n\n<pre><code>List aList = new ArrayList();\nString s = \"Hello World!\";\naList.add(s);\nString c = (String)aList.get(0);\n</code></pre>\n\n<p>While this worked most of the time, errors did happen</p>\n\n<pre><code>List aNumberList = new ArrayList();\nString one = \"1\";//Number one\naNumberList.add(one);\nInteger iOne = (Integer)aNumberList.get(0);//Insert ClassCastException here\n</code></pre>\n\n<p>The old typeless collections could not enforce type-safety so the programmer had to remember what he stored within a collection.<br>\nGenerics where invented to get around this limitation, the developer would declare the stored type once and the compiler would do it instead.</p>\n\n<pre><code>List&lt;String&gt; aNumberList = new ArrayList&lt;String&gt;();\naNumberList.add(\"one\");\nInteger iOne = aNumberList.get(0);//Compile time error\nString sOne = aNumberList.get(0);//works fine\n</code></pre>\n\n<p>For Comparison:</p>\n\n<pre><code>// Old style collections now known as raw types\nList aList = new ArrayList(); //Could contain anything\n// New style collections with Generics\nList&lt;String&gt; aList = new ArrayList&lt;String&gt;(); //Contains only Strings\n</code></pre>\n\n<p>More complex the Compareable interface:</p>\n\n<pre><code>//raw, not type save can compare with Other classes\nclass MyCompareAble implements CompareAble\n{\n   int id;\n   public int compareTo(Object other)\n   {return this.id - ((MyCompareAble)other).id;}\n}\n//Generic\nclass MyCompareAble implements CompareAble&lt;MyCompareAble&gt;\n{\n   int id;\n   public int compareTo(MyCompareAble other)\n   {return this.id - other.id;}\n}\n</code></pre>\n\n<p>Note that it is impossible to implement the <code>CompareAble</code> interface with <code>compareTo(MyCompareAble)</code> with raw types.\nWhy you should not use them:</p>\n\n<ul>\n<li>Any <code>Object</code> stored in a <code>Collection</code> has to be cast before it can be used</li>\n<li>Using generics enables compile time checks</li>\n<li>Using raw types is the same as storing each value as <code>Object</code></li>\n</ul>\n\n<p>What the compiler does:\nGenerics are backward compatible, they use the same java classes as the raw types do. The magic happens mostly at compile time.</p>\n\n<pre><code>List&lt;String&gt; someStrings = new ArrayList&lt;String&gt;();\nsomeStrings.add(\"one\");\nString one = someStrings.get(0);\n</code></pre>\n\n<p>Will be compiled as:</p>\n\n<pre><code>List someStrings = new ArrayList();\nsomeStrings.add(\"one\"); \nString one = (String)someStrings.get(0);\n</code></pre>\n\n<p>This is the same code you would write if you used the raw types directly. Thought I'm not sure what happens with the <code>CompareAble</code> interface, I guess that it creates two <code>compareTo</code> functions, one taking a <code>MyCompareAble</code> and the other taking an <code>Object</code> and passing it to the first after casting it.</p>\n\n<p>What are the alternatives to raw types: Use <a href=\"http://java.sun.com/docs/books/tutorial/extra/generics/index.html\" rel=\"nofollow\">generics</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:</p>\n\n<pre><code>public class Box&lt;T&gt; {\n    public void set(T t) { /* ... */ }\n    // ...\n}\n</code></pre>\n\n<p>To create a parameterized type of <code>Box&lt;T&gt;</code>, you supply an actual type argument for the formal type parameter <code>T</code>:</p>\n\n<pre><code>Box&lt;Integer&gt; intBox = new Box&lt;&gt;();\n</code></pre>\n\n<p>If the actual type argument is omitted, you create a raw type of <code>Box&lt;T&gt;</code>:</p>\n\n<pre><code>Box rawBox = new Box();\n</code></pre>\n\n<p>Therefore, <code>Box</code> is the raw type of the generic type <code>Box&lt;T&gt;</code>. However, a non-generic class or interface type is not a raw type.</p>\n\n<p>Raw types show up in legacy code because lots of API classes (such as the Collections classes) were not generic prior to JDK 5.0. When using raw types, you essentially get pre-generics behavior \u2014 a <code>Box</code> gives you <code>Object</code>s. For backward compatibility, assigning a parameterized type to its raw type is allowed:</p>\n\n<pre><code>Box&lt;String&gt; stringBox = new Box&lt;&gt;();\nBox rawBox = stringBox;               // OK\n</code></pre>\n\n<p>But if you assign a raw type to a parameterized type, you get a warning:</p>\n\n<pre><code>Box rawBox = new Box();           // rawBox is a raw type of Box&lt;T&gt;\nBox&lt;Integer&gt; intBox = rawBox;     // warning: unchecked conversion\n</code></pre>\n\n<p>You also get a warning if you use a raw type to invoke generic methods defined in the corresponding generic type:</p>\n\n<pre><code>Box&lt;String&gt; stringBox = new Box&lt;&gt;();\nBox rawBox = stringBox;\nrawBox.set(8);  // warning: unchecked invocation to set(T)\n</code></pre>\n\n<p>The warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, you should avoid using raw types.</p>\n\n<p>The Type Erasure section has more information on how the Java compiler uses raw types.</p>\n\n<h3>Unchecked Error Messages</h3>\n\n<p>As mentioned previously, when mixing legacy code with generic code, you may encounter warning messages similar to the following:</p>\n\n<blockquote>\n  <p>Note: Example.java uses unchecked or unsafe operations.</p>\n  \n  <p>Note: Recompile with -Xlint:unchecked for details.</p>\n</blockquote>\n\n<p>This can happen when using an older API that operates on raw types, as shown in the following example:</p>\n\n<pre><code>public class WarningDemo {\n    public static void main(String[] args){\n        Box&lt;Integer&gt; bi;\n        bi = createBox();\n    }\n\n    static Box createBox(){\n        return new Box();\n    }\n}\n</code></pre>\n\n<p>The term \"unchecked\" means that the compiler does not have enough type information to perform all type checks necessary to ensure type safety. The \"unchecked\" warning is disabled, by default, though the compiler gives a hint. To see all \"unchecked\" warnings, recompile with -Xlint:unchecked.</p>\n\n<p>Recompiling the previous example with -Xlint:unchecked reveals the following additional information:</p>\n\n<pre><code>WarningDemo.java:4: warning: [unchecked] unchecked conversion\nfound   : Box\nrequired: Box&lt;java.lang.Integer&gt;\n        bi = createBox();\n                      ^\n1 warning\n</code></pre>\n\n<p>To completely disable unchecked warnings, use the -Xlint:-unchecked flag. The <code>@SuppressWarnings(\"unchecked\")</code> annotation suppresses unchecked warnings. If you are unfamiliar with the <code>@SuppressWarnings</code> syntax, see Annotations.</p>\n\n<p>Original source: <a href=\"http://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html\">Java Tutorials</a> </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code> private static List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>You should specify the type-parameter. </p>\n\n<p>The warning advises that types that are defined to support <a href=\"http://java.sun.com/j2se/1.5.0/docs/guide/language/generics.html\">generics</a> should be parameterized, rather than using their raw form.</p>\n\n<p><code>List</code> is defined to support generics: <code>public class List&lt;E&gt;</code>. This allows many type-safe operations, that are checked compile-time.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The compiler wants you to write this:</p>\n\n<pre><code>private static List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>because otherwise, you could add any type you like into <code>list</code>, making the instantiation as <code>new ArrayList&lt;String&gt;()</code> pointless. Java generics are a compile-time feature only, so an object created with <code>new ArrayList&lt;String&gt;()</code> will happily accept <code>Integer</code> or <code>JFrame</code> elements if assigned to a reference of the \"raw type\" <code>List</code> - the object itself knows nothing about what types it's supposed to contain, only the compiler does.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A \"raw\" type in Java is a class which is non-generic and deals with \"raw\" Objects, rather than type-safe generic type parameters.</p>\n\n<p>For example, before Java generics was available, you would use a collection class like this:</p>\n\n<pre><code>LinkedList list = new LinkedList();\nlist.add(new MyObject());\nMyObject myObject = (MyObject)list.get(0);\n</code></pre>\n\n<p>When you add your object to the list, it doesn't care what type of object it is, and when you get it from the list, you have to explicitly cast it to the type you are expecting.</p>\n\n<p>Using generics, you remove the \"unknown\" factor, because you must explicitly specify which type of objects can go in the list:</p>\n\n<pre><code>LinkedList&lt;MyObject&gt; list = new LinkedList&lt;MyObject&gt;();\nlist.add(new MyObject());\nMyObject myObject = list.get(0);\n</code></pre>\n\n<p>Notice that with generics you don't have to cast the object coming from the get call, the collection is pre-defined to only work with MyObject.  This very fact is the main driving factor for generics.  It changes a source of runtime errors into something that can be checked at compile time.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>What is a raw type and why do I often hear that they shouldn't be used in new code?</em></p>\n\n<p>A \"raw type\" is the use of a generic class without specifying a type argument(s) for its parameterized type(s), e.g. using <code>List</code> instead of <code>List&lt;String&gt;</code>. When generics were introduced into Java, several classes were updated to use generics.  Using these class as a \"raw type\" (without specifying a type argument) allowed legacy code to still compile.</p>\n\n<p>\"Raw types\" are used for backwards compatibility. Their use in new code is not recommended because using the generic class with a type argument allows for stronger typing, which in turn may improve code understandability and lead to catching potential problems earlier.</p>\n\n<p><em>What is the alternative if we can't use raw types, and how is it better?</em></p>\n\n<p>The preferred alternative is to use generic classes as intended - with a suitable type argument (e.g. <code>List&lt;String&gt;</code>). This allows the programmer to specify types more specifically, conveys more meaning to future maintainers about the intended use of a variable or data structure, and it allows compiler to enforce better type-safety.  These advantages together may improve code quality and help prevent the introduction of some coding errors.</p>\n\n<p>For example, for a method where the programmer wants to ensure a List variable called 'names' contains only Strings:</p>\n\n<pre><code>List&lt;String&gt; names = new ArrayList&lt;String&gt;();\nnames.add(\"John\");          // OK\nnames.add(new Integer(1));  // compile error\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A <em>raw</em>-type is the a lack of a <em>type parameter</em> when using a generic type.</p>\n\n<p>Raw-type should not be used because it could cause runtime errors, like inserting a <code>double</code> into what was supposed to be a <code>Set</code> of <code>int</code>s.</p>\n\n<pre><code>Set set = new HashSet();\nset.add(3.45); //ok\n</code></pre>\n\n<p>When retrieving the stuff from the <code>Set</code>, you don't know what is coming out. Let's assume that you expect it to be all <code>int</code>s, you are casting it to <code>Integer</code>; exception at runtime when the <code>double</code> 3.45 comes along.</p>\n\n<p>With a <em>type parameter</em> added to your <code>Set</code>, you will get a compile error at once. This preemptive error lets you fix the problem before something blows up during runtime (thus saving on time and effort).</p>\n\n<pre><code>Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();\nset.add(3.45); //NOT ok.\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What is saying is that your <code>list</code> is a <code>List</code> of unespecified objects. That is that Java does not know what kind of objects are inside the list. Then when you want to iterate the list you have to cast every element, to be able to access the properties of that element (in this case, String).</p>\n\n<p>In general is a better idea to parametrize the collections, so you don't have conversion problems, you will only be able to add elements of the parametrized type and your editor will offer you the appropiate methods to select.</p>\n\n<pre><code>private static List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<h3>The theory (for the language lawyers and the mathematically inclined):</h3>\n\n<p><code>equals()</code> (<a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)\">javadoc</a>) must define an equivalence relation (it must be <em>reflexive</em>, <em>symmetric</em>, and <em>transitive</em>). In addition, it must be <em>consistent</em> (if the objects are not modified, then it must keep returning the same value). Furthermore, <code>o.equals(null)</code> must always return false.</p>\n\n<p><code>hashCode()</code> (<a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()\">javadoc</a>) must also be <em>consistent</em> (if the object is not modified in terms of <code>equals()</code>, it must keep returning the same value).</p>\n\n<p>The <strong>relation</strong> between the two methods is:</p>\n\n<blockquote>\n  <p><em>Whenever <code>a.equals(b)</code>, then <code>a.hashCode()</code> must be same as <code>b.hashCode()</code>.</em></p>\n</blockquote>\n\n<h3>In practice:</h3>\n\n<p>If you override one, then you should override the other.</p>\n\n<p>Use the same set of fields that you use to compute <code>equals()</code> to compute <code>hashCode()</code>.</p>\n\n<p>Use the excellent helper classes <a href=\"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html\">EqualsBuilder</a> and <a href=\"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html\">HashCodeBuilder</a> from the <a href=\"http://commons.apache.org/lang/\">Apache Commons Lang</a> library. An example:</p>\n\n<pre><code>public class Person {\n    private String name;\n    private int age;\n    // ...\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers\n            // if deriving: appendSuper(super.hashCode()).\n            append(name).\n            append(age).\n            toHashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n       if (!(obj instanceof Person))\n            return false;\n        if (obj == this)\n            return true;\n\n        Person rhs = (Person) obj;\n        return new EqualsBuilder().\n            // if deriving: appendSuper(super.equals(obj)).\n            append(name, rhs.name).\n            append(age, rhs.age).\n            isEquals();\n    }\n}\n</code></pre>\n\n<h3>Also remember:</h3>\n\n<p>When using a hash-based <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/Collection.html\">Collection</a> or <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/Map.html\">Map</a> such as <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashSet.html\">HashSet</a>, <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/LinkedHashSet.html\">LinkedHashSet</a>, <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashMap.html\">HashMap</a>, <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/Hashtable.html\">Hashtable</a>, or <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/WeakHashMap.html\">WeakHashMap</a>, make sure that the hashCode() of the key objects that you put into the collection never changes while the object is in the collection. The bulletproof way to ensure this is to make your keys immutable, <a href=\"http://www.javapractices.com/topic/TopicAction.do?Id=29\">which has also other benefits</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are some issues worth noticing if you're dealing with classes that are persisted using an Object-Relationship Mapper (ORM) like Hibernate, if you didn't think this was unreasonably complicated already!</p>\n\n<p><strong>Lazy loaded objects are subclasses</strong></p>\n\n<p>If your objects are persisted using an ORM, in many cases you will be dealing with dynamic proxies to avoid loading object too early from the data store. These proxies are implemented as subclasses of your own class. This means that<code>this.getClass() == o.getClass()</code> will return <code>false</code>. For example:</p>\n\n<pre><code>Person saved = new Person(\"John Doe\");\nLong key = dao.save(saved);\ndao.flush();\nPerson retrieved = dao.retrieve(key);\nsaved.getClass().equals(retrieved.getClass()); // Will return false if Person is loaded lazy\n</code></pre>\n\n<p><em>If you're dealing with an ORM, using <code>o instanceof Person</code> is the only thing that will behave correctly.</em></p>\n\n<p><strong>Lazy loaded objects have null-fields</strong></p>\n\n<p>ORMs usually use the getters to force loading of lazy loaded objects. This means that <code>person.name</code> will be <code>null</code> if <code>person</code> is lazy loaded, even if <code>person.getName()</code> forces loading and returns \"John Doe\". In my experience, this crops up more often in <code>hashCode()</code> and <code>equals()</code>.</p>\n\n<p><em>If you're dealing with an ORM, make sure to always use getters, and never field references in <code>hashCode()</code> and <code>equals()</code>.</em></p>\n\n<p><strong>Saving an object will change its state</strong></p>\n\n<p>Persistent objects often use a <code>id</code> field to hold the key of the object. This field will be automatically updated when an object is first saved. Don't use an id field in <code>hashCode()</code>. But you can use it in <code>equals()</code>.</p>\n\n<p>A pattern I often use is</p>\n\n<pre><code>if (this.getId() == null) {\n    return this == other;\n}\nelse {\n    return this.getId() == other.getId();\n}\n</code></pre>\n\n<p>But: you cannot include <code>getId()</code> in <code>hashCode()</code>. If you do, when an object is persisted, its <code>hashCode</code> changes. If the object is in a <code>HashSet</code>, you'll \"never\" find it again.</p>\n\n<p>In my <code>Person</code> example, I probably would use <code>getName()</code> for <code>hashCode</code> and <code>getId()</code> plus <code>getName()</code> (just for paranoia) for <code>equals()</code>. It's okay if there are some risk of \"collisions\" for <code>hashCode()</code>, but never okay for <code>equals()</code>.</p>\n\n<p><em><code>hashCode()</code> should use the non-changing subset of properties from <code>equals()</code></em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A clarification about the <code>obj.getClass() != getClass()</code>.</p>\n\n<p>This statement is the result of <code>equals()</code> being inheritance unfriendly. The JLS (Java language specification) specifies that if <code>A.equals(B) == true</code> then <code>B.equals(A)</code> must also return <code>true</code>. If you omit that statement inheriting classes that override <code>equals()</code> (and change its behavior) will break this specification.</p>\n\n<p>Consider the following example of what happens when the statement is omitted:</p>\n\n<pre><code>    class A {\n      int field1;\n\n      A(int field1) {\n        this.field1 = field1;\n      }\n\n      public boolean equals(Object other) {\n        return (other != null &amp;&amp; other instanceof A &amp;&amp; ((A) other).field1 == field1);\n      }\n    }\n\n    class B extends A {\n        int field2;\n\n        B(int field1, int field2) {\n            super(field1);\n            this.field2 = field2;\n        }\n\n        public boolean equals(Object other) {\n            return (other != null &amp;&amp; other instanceof B &amp;&amp; ((B)other).field2 == field2 &amp;&amp; super.equals(other));\n        }\n    }    \n</code></pre>\n\n<p>Doing <code>new A(1).equals(new A(1))</code> Also, <code>new B(1,1).equals(new B(1,1))</code> result give out true, as it should.</p>\n\n<p>This looks all very good, but look what happens if we try to use both classes:</p>\n\n<pre><code>A a = new A(1);\nB b = new B(1,1);\na.equals(b) == true;\nb.equals(a) == false;\n</code></pre>\n\n<p>Obviously, this is wrong.</p>\n\n<p>If you want to ensure the symmetric condition. a=b if b=a and the Liskov substitution principle call <code>super.equals(other)</code> not only in the case of <code>B</code> instance, but check after for <code>A</code> instance:</p>\n\n<pre><code>if (other instanceof B )\n   return (other != null &amp;&amp; ((B)other).field2 == field2 &amp;&amp; super.equals(other)); \nif (other instanceof A) return super.equals(other); \n   else return false;\n</code></pre>\n\n<p>Which will output:</p>\n\n<pre><code>a.equals(b) == true;\nb.equals(a) == true;\n</code></pre>\n\n<p>Where, if <code>a</code> is not a reference of <code>B</code>, then it might be a be a reference of class <code>A</code> (because you extend it), in this case you call <code>super.equals()</code> <strong>too</strong>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For an inheritance-friendly implementation, check out Tal Cohen's solution, <a href=\"http://www.drdobbs.com/jvm/java-qa-how-do-i-correctly-implement-th/184405053\">How Do I Correctly Implement the equals() Method?</a></p>\n\n<p>Summary:</p>\n\n<p>In his book <a href=\"http://rads.stackoverflow.com/amzn/click/0201310058\">Effective Java Programming Language Guide</a> (Addison-Wesley, 2001), Joshua Bloch claims that \"There is simply no way to extend an instantiable class and add an aspect while preserving the equals contract.\"  Tal disagrees.</p>\n\n<p>His solution is to implement equals() by calling another nonsymmetric blindlyEquals() both ways.  blindlyEquals() is overridden by subclasses, equals() is inherited, and never overridden.</p>\n\n<p>Example:</p>\n\n<pre><code>class Point {\n    private int x;\n    private int y;\n    protected boolean blindlyEquals(Object o) {\n        if (!(o instanceof Point))\n            return false;\n        Point p = (Point)o;\n        return (p.x == this.x &amp;&amp; p.y == this.y);\n    }\n    public boolean equals(Object o) {\n        return (this.blindlyEquals(o) &amp;&amp; o.blindlyEquals(this));\n    }\n}\n\nclass ColorPoint extends Point {\n    private Color c;\n    protected boolean blindlyEquals(Object o) {\n        if (!(o instanceof ColorPoint))\n            return false;\n        ColorPoint cp = (ColorPoint)o;\n        return (super.blindlyEquals(cp) &amp;&amp; \n        cp.color == this.color);\n    }\n}\n</code></pre>\n\n<p>Note that equals() must work across inheritance hierarchies if the <a href=\"http://en.wikipedia.org/wiki/Liskov_substitution_principle\">Liskov Substitution Principle</a> is to be satisfied.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Still amazed that none recommended the guava library for this. </p>\n\n<pre><code> //Sample taken from a current working project of mine just to illustrate the idea\n\n    @Override\n    public int hashCode(){\n        return Objects.hashCode(this.getDate(), this.datePattern);\n    }\n\n    @Override\n    public boolean equals(Object obj){\n        if ( ! obj instanceof DateAndPattern ) {\n            return false;\n        }\n        return Objects.equal(((DateAndPattern)obj).getDate(), this.getDate())\n                &amp;&amp; Objects.equal(((DateAndPattern)obj).getDate(), this.getDatePattern());\n    }\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are a couple of ways to do your check for class equality before checking member equality, and I think both are useful in the right circumstances.</p>\n\n<ol>\n<li>Use the <code>instanceof</code> operator.</li>\n<li>Use <code>this.getClass().equals(that.getClass())</code>.</li>\n</ol>\n\n<p>I use #1 in a <code>final</code> equals implementation, or when implementing an interface that prescribes an algorithm for equals (like the <code>java.util</code> collection interfaces\u2014the right way to check with with <code>(obj instanceof Set)</code> or whatever interface you're implementing). It's generally a bad choice when equals can be overridden because that breaks the symmetry property.</p>\n\n<p>Option #2 allows the class to be safely extended without overriding equals or breaking symmetry.</p>\n\n<p>If your class is also <code>Comparable</code>, the <code>equals</code> and <code>compareTo</code> methods should be consistent too. Here's a template for the equals method in a <code>Comparable</code> class:</p>\n\n<pre><code>final class MyClass implements Comparable&lt;MyClass&gt;\n{\n\n  \u2026\n\n  @Override\n  public boolean equals(Object obj)\n  {\n    /* If compareTo and equals aren't final, we should check with getClass instead. */\n    if (!(obj instanceof MyClass)) \n      return false;\n    return compareTo((MyClass) obj) == 0;\n  }\n\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are two methods in super class as java.lang.Object. We need to override them to custom object.</p>\n\n<pre><code>public boolean equals(Object obj)\npublic int hashCode()\n</code></pre>\n\n<p>Equal objects must produce the same hash code as long as they are equal, however unequal objects need not produce distinct hash codes.</p>\n\n<pre><code>public class Test\n{\n    private int num;\n    private String data;\n    public boolean equals(Object obj)\n    {\n        if(this == obj)\n            return true;\n        if((obj == null) || (obj.getClass() != this.getClass()))\n            return false;\n        // object must be Test at this point\n        Test test = (Test)obj;\n        return num == test.num &amp;&amp;\n        (data == test.data || (data != null &amp;&amp; data.equals(test.data)));\n    }\n\n    public int hashCode()\n    {\n        int hash = 7;\n        hash = 31 * hash + num;\n        hash = 31 * hash + (null == data ? 0 : data.hashCode());\n        return hash;\n    }\n\n    // other methods\n}\n</code></pre>\n\n<p>If you want get more, please check this link as <a href=\"http://www.javaranch.com/journal/2002/10/equalhash.html\">http://www.javaranch.com/journal/2002/10/equalhash.html</a></p>\n\n<p>This is another example,\n<a href=\"http://java67.blogspot.com/2013/04/example-of-overriding-equals-hashcode-compareTo-java-method.html\">http://java67.blogspot.com/2013/04/example-of-overriding-equals-hashcode-compareTo-java-method.html</a></p>\n\n<p>Have Fun! @.@</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For equals, look into <strong><a href=\"http://www.angelikalanger.com/Articles/JavaSolutions/SecretsOfEquals/Equals.html\">Secrets of Equals</a></strong> by <a href=\"http://www.angelikalanger.com/\">Angelika Langer</a>. I love it very much. She's also a great FAQ about <strong><a href=\"http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html\">Generics in Java</a></strong>. View her other articles <a href=\"http://www.angelikalanger.com/Articles/Topics.html#JAVA\">here</a> (scroll down to \"Core Java\"), where she also goes on with Part-2 and \"mixed type comparison\". Have fun reading them!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>equals() method is used to determine the equality of two objects.</p>\n\n<p>as int value of 10 is always equal to 10. But this equals() method is about equality of two objects. When we say object, it will have properties. To decide about equality those properties are considered. It is not necessary that all properties must be taken into account to determine the equality and with respect to the class definition and context it can be decided. Then the equals() method can be overridden.</p>\n\n<p>we should always override hashCode() method whenever we override equals() method. If not, what will happen? If we use hashtables in our application, it will not behave as expected. As the hashCode is used in determining the equality of values stored, it will not return the right corresponding value for a key.</p>\n\n<p>Default implementation given is hashCode() method in Object class uses the internal address of the object and converts it into integer and returns it.</p>\n\n<pre><code>public class Tiger {\n  private String color;\n  private String stripePattern;\n  private int height;\n\n  @Override\n  public boolean equals(Object object) {\n    boolean result = false;\n    if (object == null || object.getClass() != getClass()) {\n      result = false;\n    } else {\n      Tiger tiger = (Tiger) object;\n      if (this.color == tiger.getColor()\n          &amp;&amp; this.stripePattern == tiger.getStripePattern()) {\n        result = true;\n      }\n    }\n    return result;\n  }\n\n  // just omitted null checks\n  @Override\n  public int hashCode() {\n    int hash = 3;\n    hash = 7 * hash + this.color.hashCode();\n    hash = 7 * hash + this.stripePattern.hashCode();\n    return hash;\n  }\n\n  public static void main(String args[]) {\n    Tiger bengalTiger1 = new Tiger(\"Yellow\", \"Dense\", 3);\n    Tiger bengalTiger2 = new Tiger(\"Yellow\", \"Dense\", 2);\n    Tiger siberianTiger = new Tiger(\"White\", \"Sparse\", 4);\n    System.out.println(\"bengalTiger1 and bengalTiger2: \"\n        + bengalTiger1.equals(bengalTiger2));\n    System.out.println(\"bengalTiger1 and siberianTiger: \"\n        + bengalTiger1.equals(siberianTiger));\n\n    System.out.println(\"bengalTiger1 hashCode: \" + bengalTiger1.hashCode());\n    System.out.println(\"bengalTiger2 hashCode: \" + bengalTiger2.hashCode());\n    System.out.println(\"siberianTiger hashCode: \"\n        + siberianTiger.hashCode());\n  }\n\n  public String getColor() {\n    return color;\n  }\n\n  public String getStripePattern() {\n    return stripePattern;\n  }\n\n  public Tiger(String color, String stripePattern, int height) {\n    this.color = color;\n    this.stripePattern = stripePattern;\n    this.height = height;\n\n  }\n}\n</code></pre>\n\n<p>Example Code Output:</p>\n\n<pre><code>bengalTiger1 and bengalTiger2: true \nbengalTiger1 and siberianTiger: false \nbengalTiger1 hashCode: 1398212510 \nbengalTiger2 hashCode: 1398212510 \nsiberianTiger hashCode: \u20131227465966\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One gotcha I have found is where two objects contain references to each other (one example being a parent/child relationship with a convenience method on the parent to get all children).<br>\nThese sorts of things are fairly common when doing Hibernate mappings for example.</p>\n\n<p>If you include both ends of the relationship in your hashCode or equals tests it's possible to get into a recursive loop which ends in a StackOverflowException.<br>\nThe simplest solution is to not include the getChildren collection in the methods.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Logically we have:</p>\n\n<p><code>a.getClass().equals(b.getClass()) &amp;&amp; a.equals(b)</code> \u21d2 <code>a.hashCode() == b.hashCode()</code></p>\n\n<p>But <strong>not</strong> vice-versa!</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><sup><em>First a disclaimer beforehand: the posted code snippets are all basic examples. You'll need to handle trivial <code>IOException</code>s and <code>RuntimeException</code>s like <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code> and consorts yourself.</em></sup></p>\n\n<hr>\n\n<h3>Preparing</h3>\n\n<p>We first need to know at least the URL and the charset. The parameters are optional and depend on the functional requirements.</p>\n\n<pre><code>String url = \"http://example.com\";\nString charset = \"UTF-8\";  // Or in Java 7 and later, use the constant: java.nio.charset.StandardCharsets.UTF_8.name()\nString param1 = \"value1\";\nString param2 = \"value2\";\n// ...\n\nString query = String.format(\"param1=%s&amp;param2=%s\", \n     URLEncoder.encode(param1, charset), \n     URLEncoder.encode(param2, charset));\n</code></pre>\n\n<p>The query parameters must be in <code>name=value</code> format and be concatenated by <code>&amp;</code>. You would normally also <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\">URL-encode</a> the query parameters with the specified charset using <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html\"><code>URLEncoder#encode()</code></a>.</p>\n\n<p><sup>The <code>String#format()</code> is just for convenience. I prefer it when I would need the String concatenation operator <code>+</code> more than twice.</sup></p>\n\n<hr>\n\n<h3>Firing a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3\">HTTP GET</a> request with (optionally) query parameters</h3>\n\n<p>It's a trivial task. It's the default request method.</p>\n\n<pre><code>URLConnection connection = new URL(url + \"?\" + query).openConnection();\nconnection.setRequestProperty(\"Accept-Charset\", charset);\nInputStream response = connection.getInputStream();\n// ...\n</code></pre>\n\n<p>Any query string should be concatenated to the URL using <code>?</code>. The <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\"><code>Accept-Charset</code></a> header may hint the server what encoding the parameters are in. If you don't send any query string, then you can leave the <code>Accept-Charset</code> header away. If you don't need to set any headers, then you can even use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URL.html#openStream%28%29\"><code>URL#openStream()</code></a> shortcut method.</p>\n\n<pre><code>InputStream response = new URL(url).openStream();\n// ...\n</code></pre>\n\n<p>Either way, if the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doGet()</code></a> method will be called and the parameters will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29\"><code>HttpServletRequest#getParameter()</code></a>.</p>\n\n<hr>\n\n<h3>Firing a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5\">HTTP POST</a> request with query parameters</h3>\n\n<p>Setting the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29\"><code>URLConnection#setDoOutput()</code></a> to <code>true</code> implicitly sets the request method to POST. The standard HTTP POST as web forms do is of type <code>application/x-www-form-urlencoded</code> wherein the query string is written to the request body.</p>\n\n<pre><code>URLConnection connection = new URL(url).openConnection();\nconnection.setDoOutput(true); // Triggers POST.\nconnection.setRequestProperty(\"Accept-Charset\", charset);\nconnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded;charset=\" + charset);\n\ntry (OutputStream output = connection.getOutputStream()) {\n    output.write(query.getBytes(charset));\n}\n\nInputStream response = connection.getInputStream();\n// ...\n</code></pre>\n\n<p>Note: whenever you'd like to submit a HTML form programmatically, don't forget to take the <code>name=value</code> pairs of any <code>&lt;input type=\"hidden\"&gt;</code> elements into the query string and of course also the <code>name=value</code> pair of the <code>&lt;input type=\"submit\"&gt;</code> element which you'd like to \"press\" programmatically (because that's usually been used in the server side to distinguish if a button was pressed and if so, which one).</p>\n\n<p>You can also cast the obtained <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html\"><code>URLConnection</code></a> to <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\"><code>HttpURLConnection</code></a> and use its <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29\"><code>HttpURLConnection#setRequestMethod()</code></a> instead. But if you're trying to use the connection for output you still need to set <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29\"><code>URLConnection#setDoOutput()</code></a> to <code>true</code>.</p>\n\n<pre><code>HttpURLConnection httpConnection = (HttpURLConnection) new URL(url).openConnection();\nhttpConnection.setRequestMethod(\"POST\");\n// ...\n</code></pre>\n\n<p>Either way, if the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doPost()</code></a> method will be called and the parameters will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29\"><code>HttpServletRequest#getParameter()</code></a>.</p>\n\n<hr>\n\n<h3>Actually firing the HTTP request</h3>\n\n<p>You can fire the HTTP request explicitly with <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#connect%28%29\"><code>URLConnection#connect()</code></a>, but the the request will automatically be fired on demand when you want to get any information about the HTTP response, such as the response body using <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getInputStream%28%29\"><code>URLConnection#getInputStream()</code></a> and so on. The above examples does exactly that, so the <code>connect()</code> call is in fact superfluous.</p>\n\n<hr>\n\n<h3>Gathering HTTP response information</h3>\n\n<p>1) <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">HTTP response status</a>:</p>\n\n<p>You need a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\"><code>HttpURLConnection</code></a> here. Cast it first if necessary.</p>\n\n<pre><code>int status = httpConnection.getResponseCode();\n</code></pre>\n\n<p>2) <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">HTTP response headers</a>:</p>\n\n<pre><code>for (Entry&lt;String, List&lt;String&gt;&gt; header : connection.getHeaderFields().entrySet()) {\n    System.out.println(header.getKey() + \"=\" + header.getValue());\n}\n</code></pre>\n\n<p>3) <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">HTTP response encoding</a>:</p>\n\n<p>When the <code>Content-Type</code> contains a <code>charset</code> parameter, then the response body is likely text based and we'd like to process the response body with the server-side specified character encoding then.</p>\n\n<pre><code>String contentType = connection.getHeaderField(\"Content-Type\");\nString charset = null;\n\nfor (String param : contentType.replace(\" \", \"\").split(\";\")) {\n    if (param.startsWith(\"charset=\")) {\n        charset = param.split(\"=\", 2)[1];\n        break;\n    }\n}\n\nif (charset != null) {\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader(response, charset))) {\n        for (String line; (line = reader.readLine()) != null;) {\n            // ... System.out.println(line) ?\n        }\n    }\n}\nelse {\n    // It's likely binary content, use InputStream/OutputStream.\n}\n</code></pre>\n\n<hr>\n\n<h3>Maintaining the session</h3>\n\n<p>The server side session is usually backed by a cookie. Some web forms require that you're logged in and/or are tracked by a session. You can use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html\"><code>CookieHandler</code></a> API to maintain cookies. You need to prepare a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html\"><code>CookieManager</code></a> with a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html\"><code>CookiePolicy</code></a> of <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL\"><code>ACCEPT_ALL</code></a> before sending all HTTP requests.</p>\n\n<pre><code>// First set the default cookie manager.\nCookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));\n\n// All the following subsequent URLConnections will use the same cookie manager.\nURLConnection connection = new URL(url).openConnection();\n// ...\n\nconnection = new URL(url).openConnection();\n// ...\n\nconnection = new URL(url).openConnection();\n// ...\n</code></pre>\n\n<p>Note that this is known to not always work properly in all circumstances. If it fails for you, then best is to manually gather and set the cookie headers. You basically need to grab all <code>Set-Cookie</code> headers from the response of the login or the first <code>GET</code> request and then pass this through the subsequent requests.</p>\n\n<pre><code>// Gather all cookies on the first request.\nURLConnection connection = new URL(url).openConnection();\nList&lt;String&gt; cookies = connection.getHeaderFields().get(\"Set-Cookie\");\n// ...\n\n// Then use the same cookies on all subsequent requests.\nconnection = new URL(url).openConnection();\nfor (String cookie : cookies) {\n    connection.addRequestProperty(\"Cookie\", cookie.split(\";\", 2)[0]);\n}\n// ...\n</code></pre>\n\n<p>The <code>split(\";\", 2)[0]</code> is there to get rid of cookie attributes which are irrelevant for the server side like <code>expires</code>, <code>path</code>, etc. Alternatively, you could also use <code>cookie.substring(0, cookie.indexOf(';'))</code> instead of <code>split()</code>.</p>\n\n<hr>\n\n<h3>Streaming mode</h3>\n\n<p>The <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\"><code>HttpURLConnection</code></a> will by default buffer the <em>entire</em> request body before actually sending it, regardless of whether you've set a fixed content length yourself using <code>connection.setRequestProperty(\"Content-Length\", contentLength);</code>. This may cause <code>OutOfMemoryException</code>s whenever you concurrently send large POST requests (e.g. uploading files). To avoid this, you would like to set the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29\"><code>HttpURLConnection#setFixedLengthStreamingMode()</code></a>.</p>\n\n<pre><code>httpConnection.setFixedLengthStreamingMode(contentLength);\n</code></pre>\n\n<p>But if the content length is really not known beforehand, then you can make use of chunked streaming mode by setting the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29\"><code>HttpURLConnection#setChunkedStreamingMode()</code></a> accordingly. This will set the HTTP <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41\"><code>Transfer-Encoding</code></a> header to <code>chunked</code> which will force the request body being sent in chunks. The below example will send the body in chunks of 1KB.</p>\n\n<pre><code>httpConnection.setChunkedStreamingMode(1024);\n</code></pre>\n\n<hr>\n\n<h3>User-Agent</h3>\n\n<p>It can happen that a request returns an unexpected response, while it works fine with a real web browser. The server side is probably blocking requests based on the <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43\"><code>User-Agent</code></a> request header. The <code>URLConnection</code> will by default set it to <code>Java/1.6.0_19</code> where the last part is obviously the JRE version. You can override this as follows:</p>\n\n<pre><code>connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"); // Do as if you're using Chrome 41 on Windows 7.\n</code></pre>\n\n<p>Use the User-Agent string from a <a href=\"http://www.useragentstring.com/pages/useragentstring.php\">recent browser</a>.</p>\n\n<hr>\n\n<h3>Error handling</h3>\n\n<p>If the HTTP response code is <code>4nn</code> (Client Error) or <code>5nn</code> (Server Error), then you may want to read the <code>HttpURLConnection#getErrorStream()</code> to see if the server has sent any useful error information.</p>\n\n<pre><code>InputStream error = ((HttpURLConnection) connection).getErrorStream();\n</code></pre>\n\n<p>If the HTTP response code is -1, then something went wrong with connection and response handling. The <code>HttpURLConnection</code> implementation is in older JREs somewhat buggy with keeping connections alive. You may want to turn it off by setting the <code>http.keepAlive</code> system property to <code>false</code>. You can do this programmatically in the beginning of your application by:</p>\n\n<pre><code>System.setProperty(\"http.keepAlive\", \"false\");\n</code></pre>\n\n<hr>\n\n<h3>Uploading files</h3>\n\n<p>You'd normally use <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2\"><code>multipart/form-data</code></a> encoding for mixed POST content (binary and character data). The encoding is in more detail described in <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">RFC2388</a>.</p>\n\n<pre><code>String param = \"value\";\nFile textFile = new File(\"/path/to/file.txt\");\nFile binaryFile = new File(\"/path/to/file.bin\");\nString boundary = Long.toHexString(System.currentTimeMillis()); // Just generate some unique random value.\nString CRLF = \"\\r\\n\"; // Line separator required by multipart/form-data.\nURLConnection connection = new URL(url).openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n\ntry (\n    OutputStream output = connection.getOutputStream();\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);\n) {\n    // Send normal param.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"param\\\"\").append(CRLF);\n    writer.append(\"Content-Type: text/plain; charset=\" + charset).append(CRLF);\n    writer.append(CRLF).append(param).append(CRLF).flush();\n\n    // Send text file.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"textFile\\\"; filename=\\\"\" + textFile.getName() + \"\\\"\").append(CRLF);\n    writer.append(\"Content-Type: text/plain; charset=\" + charset).append(CRLF); // Text file itself must be saved in this charset!\n    writer.append(CRLF).flush();\n    Files.copy(textFile.toPath(), output);\n    output.flush(); // Important before continuing with writer!\n    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n\n    // Send binary file.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"binaryFile\\\"; filename=\\\"\" + binaryFile.getName() + \"\\\"\").append(CRLF);\n    writer.append(\"Content-Type: \" + URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);\n    writer.append(\"Content-Transfer-Encoding: binary\").append(CRLF);\n    writer.append(CRLF).flush();\n    Files.copy(binaryFile.toPath(), output);\n    output.flush(); // Important before continuing with writer!\n    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n\n    // End of multipart/form-data.\n    writer.append(\"--\" + boundary + \"--\").append(CRLF).flush();\n}\n</code></pre>\n\n<p>If the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doPost()</code></a> method will be called and the parts will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29\"><code>HttpServletRequest#getPart()</code></a> (note, thus <strong>not</strong> <code>getParameter()</code> and so on!). The <code>getPart()</code> method is however relatively new, it's introduced in Servlet 3.0 (Glassfish 3, Tomcat 7, etc). Prior to Servlet 3.0, your best choice is using <a href=\"http://commons.apache.org/fileupload\">Apache Commons FileUpload</a> to parse a <code>multipart/form-data</code> request. Also see <a href=\"http://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824\">this answer</a> for examples of both the FileUpload and the Servelt 3.0 approaches.</p>\n\n<hr>\n\n<h3>Dealing with untrusted or misconfigured HTTPS sites</h3>\n\n<p>Sometimes you need to connect a HTTPS URL, perhaps because you're writing a web scraper. In that case, you may likely face a <code>javax.net.ssl.SSLException: Not trusted server certificate</code> on some HTTPS sites who doesn't keep their SSL certificates up to date, or a <code>java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found</code> or <code>javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name</code> on some misconfigured HTTPS sites.</p>\n\n<p>The following one-time-run <code>static</code> initializer in your web scraper class should make <code>HttpsURLConnection</code> more lenient as to those HTTPS sites and thus not throw those exceptions anymore.</p>\n\n<pre><code>static {\n    TrustManager[] trustAllCertificates = new TrustManager[] {\n        new X509TrustManager() {\n            @Override\n            public X509Certificate[] getAcceptedIssuers() {\n                return null; // Not relevant.\n            }\n            @Override\n            public void checkClientTrusted(X509Certificate[] certs, String authType) {\n                // Do nothing. Just allow them all.\n            }\n            @Override\n            public void checkServerTrusted(X509Certificate[] certs, String authType) {\n                // Do nothing. Just allow them all.\n            }\n        }\n    };\n\n    HostnameVerifier trustAllHostnames = new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true; // Just allow them all.\n        }\n    };\n\n    try {\n        System.setProperty(\"jsse.enableSNIExtension\", \"false\");\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, trustAllCertificates, new SecureRandom());\n        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n        HttpsURLConnection.setDefaultHostnameVerifier(trustAllHostnames);\n    }\n    catch (GeneralSecurityException e) {\n        throw new ExceptionInInitializerError(e);\n    }\n}\n</code></pre>\n\n<hr>\n\n<h3>Last words</h3>\n\n<p>The <a href=\"http://hc.apache.org/httpcomponents-client-ga/\">Apache HttpComponents HttpClient</a> is <em>much</em> more convenient in this all :)</p>\n\n<ul>\n<li><a href=\"http://hc.apache.org/httpcomponents-client-ga/tutorial/html/\">HttpClient Tutorial</a></li>\n<li><a href=\"http://hc.apache.org/httpcomponents-client-ga/examples.html\">HttpClient Examples</a></li>\n</ul>\n\n<hr>\n\n<h3>Parsing and extracting HTML</h3>\n\n<p>If all you want is parsing and extracting data from HTML, then better use a HTML parser like <a href=\"http://jsoup.org\">Jsoup</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/3152138/what-are-the-pros-and-cons-of-the-leading-java-html-parsers/3154281#3154281\">What are the pros/cons of leading HTML parsers in Java</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2835505/how-to-scan-a-website-or-page-for-info-and-bring-it-into-my-program/2835555#2835555\">How to scan and extract a webpage in Java</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When working with HTTP it's almost always more useful to refer to <code>HttpURLConnection</code> rather than the base class <code>URLConnection</code> (since <code>URLConnection</code> is an abstract class when you ask for <code>URLConnection.openConnection()</code> on a HTTP URL that's what you'll get back anyway).</p>\n\n<p>Then you can instead of relying on <code>URLConnection#setDoOutput(true)</code> to implicitly set the request method to <em>POST</em> instead do <code>httpURLConnection.setRequestMethod(\"POST\")</code> which some might find more natural (and which also allows you to specify other request methods such as <em>PUT</em>, <em>DELETE</em>, ...).</p>\n\n<p>It also provides useful HTTP constants so you can do:</p>\n\n<pre><code>int responseCode = httpURLConnection.getResponseCode();\n\nif (responseCode == HttpURLConnection.HTTP_OK) {\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Inspired by this and other questions on SO, I've created a minimal open source <a href=\"http://code.google.com/p/basic-http-client/\">basic-http-client</a> that embodies most of the techniques found here.</p>\n\n<p><a href=\"https://code.google.com/p/google-http-java-client/\">google-http-java-client</a> is also a great open source resource.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I suggest you take a look at the code on <a href=\"https://github.com/kevinsawicki/http-request\">kevinsawicki/http-request</a>, its basically a wrapper on top of <code>HttpUrlConnection</code> it provides a much simpler API in case you just want to make the requests right now or you can take a look at the sources (it's not too big) to take a look at how connections are handled.</p>\n\n<p>Example: Make a <code>GET</code> request with content type <code>application/json</code> and some query parameters:</p>\n\n<pre><code>// GET http://google.com?q=baseball%20gloves&amp;size=100\nString response = HttpRequest.get(\"http://google.com\", true, \"q\", \"baseball gloves\", \"size\", 100)\n        .accept(\"application/json\")\n        .body();\nSystem.out.println(\"Response was: \" + response);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I was also very inspired by this response.</p>\n\n<p>I am often on projects where I need to do some HTTP, and I may not want to bring in a lot of 3rd party dependencies (which bring in others and so on and so on, etc.)</p>\n\n<p>I started to write my own utilities based on some of this conversation (not any where done):</p>\n\n<pre><code>package org.boon.utils;\n\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.Map;\n\nimport static org.boon.utils.IO.read;\n\npublic class HTTP {\n</code></pre>\n\n<p>Then there are just a bunch or static methods.</p>\n\n<pre><code>public static String get(\n        final String url) {\n\n    Exceptions.tryIt(() -&gt; {\n        URLConnection connection;\n        connection = doGet(url, null, null, null);\n        return extractResponseString(connection);\n    });\n    return null;\n}\n\npublic static String getWithHeaders(\n        final String url,\n        final Map&lt;String, ? extends Object&gt; headers) {\n    URLConnection connection;\n    try {\n        connection = doGet(url, headers, null, null);\n        return extractResponseString(connection);\n    } catch (Exception ex) {\n        Exceptions.handle(ex);\n        return null;\n    }\n}\n\npublic static String getWithContentType(\n        final String url,\n        final Map&lt;String, ? extends Object&gt; headers,\n        String contentType) {\n    URLConnection connection;\n    try {\n        connection = doGet(url, headers, contentType, null);\n        return extractResponseString(connection);\n    } catch (Exception ex) {\n        Exceptions.handle(ex);\n        return null;\n    }\n}\npublic static String getWithCharSet(\n        final String url,\n        final Map&lt;String, ? extends Object&gt; headers,\n        String contentType,\n        String charSet) {\n    URLConnection connection;\n    try {\n        connection = doGet(url, headers, contentType, charSet);\n        return extractResponseString(connection);\n    } catch (Exception ex) {\n        Exceptions.handle(ex);\n        return null;\n    }\n}\n</code></pre>\n\n<p>Then post...</p>\n\n<pre><code>public static String postBody(\n        final String url,\n        final String body) {\n    URLConnection connection;\n    try {\n        connection = doPost(url, null, \"text/plain\", null, body);\n        return extractResponseString(connection);\n    } catch (Exception ex) {\n        Exceptions.handle(ex);\n        return null;\n    }\n}\n\npublic static String postBodyWithHeaders(\n        final String url,\n        final Map&lt;String, ? extends Object&gt; headers,\n        final String body) {\n    URLConnection connection;\n    try {\n        connection = doPost(url, headers, \"text/plain\", null, body);\n        return extractResponseString(connection);\n    } catch (Exception ex) {\n        Exceptions.handle(ex);\n        return null;\n    }\n}\n\n\n\npublic static String postBodyWithContentType(\n        final String url,\n        final Map&lt;String, ? extends Object&gt; headers,\n        final String contentType,\n        final String body) {\n\n    URLConnection connection;\n    try {\n        connection = doPost(url, headers, contentType, null, body);\n\n\n        return extractResponseString(connection);\n\n\n    } catch (Exception ex) {\n        Exceptions.handle(ex);\n        return null;\n    }\n\n\n}\n\n\npublic static String postBodyWithCharset(\n        final String url,\n        final Map&lt;String, ? extends Object&gt; headers,\n        final String contentType,\n        final String charSet,\n        final String body) {\n\n    URLConnection connection;\n    try {\n        connection = doPost(url, headers, contentType, charSet, body);\n\n\n        return extractResponseString(connection);\n\n\n    } catch (Exception ex) {\n        Exceptions.handle(ex);\n        return null;\n    }\n\n\n}\n\nprivate static URLConnection doPost(String url, Map&lt;String, ? extends Object&gt; headers,\n                                    String contentType, String charset, String body\n                                    ) throws IOException {\n    URLConnection connection;/* Handle output. */\n    connection = new URL(url).openConnection();\n    connection.setDoOutput(true);\n    manageContentTypeHeaders(contentType, charset, connection);\n\n    manageHeaders(headers, connection);\n\n\n    IO.write(connection.getOutputStream(), body, IO.CHARSET);\n    return connection;\n}\n\nprivate static void manageHeaders(Map&lt;String, ? extends Object&gt; headers, URLConnection connection) {\n    if (headers != null) {\n        for (Map.Entry&lt;String, ? extends Object&gt; entry : headers.entrySet()) {\n            connection.setRequestProperty(entry.getKey(), entry.getValue().toString());\n        }\n    }\n}\n\nprivate static void manageContentTypeHeaders(String contentType, String charset, URLConnection connection) {\n    connection.setRequestProperty(\"Accept-Charset\", charset == null ? IO.CHARSET : charset);\n    if (contentType!=null &amp;&amp; !contentType.isEmpty()) {\n        connection.setRequestProperty(\"Content-Type\", contentType);\n    }\n}\n\nprivate static URLConnection doGet(String url, Map&lt;String, ? extends Object&gt; headers,\n                                    String contentType, String charset) throws IOException {\n    URLConnection connection;/* Handle output. */\n    connection = new URL(url).openConnection();\n    manageContentTypeHeaders(contentType, charset, connection);\n\n    manageHeaders(headers, connection);\n\n    return connection;\n}\n\nprivate static String extractResponseString(URLConnection connection) throws IOException {\n/* Handle input. */\n    HttpURLConnection http = (HttpURLConnection)connection;\n    int status = http.getResponseCode();\n    String charset = getCharset(connection.getHeaderField(\"Content-Type\"));\n\n    if (status==200) {\n        return readResponseBody(http, charset);\n    } else {\n        return readErrorResponseBody(http, status, charset);\n    }\n}\n\nprivate static String readErrorResponseBody(HttpURLConnection http, int status, String charset) {\n    InputStream errorStream = http.getErrorStream();\n    if ( errorStream!=null ) {\n        String error = charset== null ? read( errorStream ) :\n            read( errorStream, charset );\n        throw new RuntimeException(\"STATUS CODE =\" + status + \"\\n\\n\" + error);\n    } else {\n        throw new RuntimeException(\"STATUS CODE =\" + status);\n    }\n}\n\nprivate static String readResponseBody(HttpURLConnection http, String charset) throws IOException {\n    if (charset != null) {\n        return read(http.getInputStream(), charset);\n    } else {\n        return read(http.getInputStream());\n    }\n}\n\nprivate static String getCharset(String contentType) {\n    if (contentType==null)  {\n        return null;\n    }\n    String charset = null;\n    for (String param : contentType.replace(\" \", \"\").split(\";\")) {\n        if (param.startsWith(\"charset=\")) {\n            charset = param.split(\"=\", 2)[1];\n            break;\n        }\n    }\n    charset = charset == null ?  IO.CHARSET : charset;\n\n    return charset;\n}\n</code></pre>\n\n<p>Well you get the idea....</p>\n\n<p>Here are the tests:</p>\n\n<pre><code>static class MyHandler implements HttpHandler {\n    public void handle(HttpExchange t) throws IOException {\n\n        InputStream requestBody = t.getRequestBody();\n        String body = IO.read(requestBody);\n        Headers requestHeaders = t.getRequestHeaders();\n        body = body + \"\\n\" + copy(requestHeaders).toString();\n        t.sendResponseHeaders(200, body.length());\n        OutputStream os = t.getResponseBody();\n        os.write(body.getBytes());\n        os.close();\n    }\n}\n\n\n@Test\npublic void testHappy() throws Exception {\n\n    HttpServer server = HttpServer.create(new InetSocketAddress(9212), 0);\n    server.createContext(\"/test\", new MyHandler());\n    server.setExecutor(null); // creates a default executor\n    server.start();\n\n    Thread.sleep(10);\n\n\n    Map&lt;String,String&gt; headers = map(\"foo\", \"bar\", \"fun\", \"sun\");\n\n    String response = HTTP.postBodyWithContentType(\"http://localhost:9212/test\", headers, \"text/plain\", \"hi mom\");\n\n    System.out.println(response);\n\n    assertTrue(response.contains(\"hi mom\"));\n    assertTrue(response.contains(\"Fun=[sun], Foo=[bar]\"));\n\n\n    response = HTTP.postBodyWithCharset(\"http://localhost:9212/test\", headers, \"text/plain\", \"UTF-8\", \"hi mom\");\n\n    System.out.println(response);\n\n    assertTrue(response.contains(\"hi mom\"));\n    assertTrue(response.contains(\"Fun=[sun], Foo=[bar]\"));\n\n    response = HTTP.postBodyWithHeaders(\"http://localhost:9212/test\", headers, \"hi mom\");\n\n    System.out.println(response);\n\n    assertTrue(response.contains(\"hi mom\"));\n    assertTrue(response.contains(\"Fun=[sun], Foo=[bar]\"));\n\n\n    response = HTTP.get(\"http://localhost:9212/test\");\n\n    System.out.println(response);\n\n\n    response = HTTP.getWithHeaders(\"http://localhost:9212/test\", headers);\n\n    System.out.println(response);\n\n    assertTrue(response.contains(\"Fun=[sun], Foo=[bar]\"));\n\n\n\n    response = HTTP.getWithContentType(\"http://localhost:9212/test\", headers, \"text/plain\");\n\n    System.out.println(response);\n\n    assertTrue(response.contains(\"Fun=[sun], Foo=[bar]\"));\n\n\n\n    response = HTTP.getWithCharSet(\"http://localhost:9212/test\", headers, \"text/plain\", \"UTF-8\");\n\n    System.out.println(response);\n\n    assertTrue(response.contains(\"Fun=[sun], Foo=[bar]\"));\n\n    Thread.sleep(10);\n\n    server.stop(0);\n\n\n}\n\n@Test\npublic void testPostBody() throws Exception {\n\n    HttpServer server = HttpServer.create(new InetSocketAddress(9220), 0);\n    server.createContext(\"/test\", new MyHandler());\n    server.setExecutor(null); // creates a default executor\n    server.start();\n\n    Thread.sleep(10);\n\n\n    Map&lt;String,String&gt; headers = map(\"foo\", \"bar\", \"fun\", \"sun\");\n\n    String response = HTTP.postBody(\"http://localhost:9220/test\", \"hi mom\");\n\n    assertTrue(response.contains(\"hi mom\"));\n\n\n    Thread.sleep(10);\n\n    server.stop(0);\n\n\n}\n\n@Test(expected = RuntimeException.class)\npublic void testSad() throws Exception {\n\n    HttpServer server = HttpServer.create(new InetSocketAddress(9213), 0);\n    server.createContext(\"/test\", new MyHandler());\n    server.setExecutor(null); // creates a default executor\n    server.start();\n\n    Thread.sleep(10);\n\n\n    Map&lt;String,String&gt; headers = map(\"foo\", \"bar\", \"fun\", \"sun\");\n\n    String response = HTTP.postBodyWithContentType(\"http://localhost:9213/foo\", headers, \"text/plain\", \"hi mom\");\n\n    System.out.println(response);\n\n    assertTrue(response.contains(\"hi mom\"));\n    assertTrue(response.contains(\"Fun=[sun], Foo=[bar]\"));\n\n    Thread.sleep(10);\n\n    server.stop(0);\n\n\n}\n</code></pre>\n\n<p>You can find the rest here:</p>\n\n<p><a href=\"https://github.com/RichardHightower/boon\">https://github.com/RichardHightower/boon</a></p>\n\n<p>My goal is to provide the common things one would want to do in a bit more easier way then....</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are 2 options you can go with HTTP URL Hits : GET / POST</p>\n\n<p>GET Request :-</p>\n\n<pre><code>String url = \"https://name_of_the_url\";\nURL request_url = new URL(url);\nhttp_conn = (HttpURLConnection)request_url.openConnection();\nhttp_conn.setFollowRedirects(true);\nhttp_conn.setConnectTimeout(100000);\nhttp_conn.setReadTimeout(100000);\nhttp_conn.setInstanceFollowRedirects(true);\nSystem.out.println(String.valueOf(http_conn.getResponseCode());\n</code></pre>\n\n<p>POST request :-</p>\n\n<pre><code>String url = \"https://name_of_the_url\"\nURL request_url = new URL(url);\nHttpURLConnection http_conn = (HttpURLConnection) request_url.openConnection();\nHttpURLConnection.setFollowRedirects(true);\nhttp_conn.setConnectTimeout(100000);\nhttp_conn.setReadTimeout(100000);\nhttp_conn.setDoOutput(true);\nPrintWriter out = new PrintWriter(http_conn.getOutputStream());\nif (urlparameter != null) {\n   out.println(urlparameter);\n}\nout.close();\nout = null;\nSystem.out.println(String.valueOf(http_conn.getResponseCode()));\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also use <a href=\"http://http.jcabi.com/apidocs-1.0/com/jcabi/http/request/JdkRequest.html\" rel=\"nofollow\"><code>JdkRequest</code></a> from <a href=\"http://http.jcabi.com\" rel=\"nofollow\">jcabi-http</a> (I'm a developer), which does all this work for you, decorating HttpURLConnection, firing HTTP requests and parsing responses, for example:</p>\n\n<pre><code>String html = new JdkRequest(\"http://www.google.com\").fetch().body();\n</code></pre>\n\n<p>Check this blog post for more info: <a href=\"http://www.yegor256.com/2014/04/11/jcabi-http-intro.html\" rel=\"nofollow\">http://www.yegor256.com/2014/04/11/jcabi-http-intro.html</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Initially I was misled by this <a href=\"http://www.innovation.ch/java/HTTPClient/urlcon_vs_httpclient.html\" rel=\"nofollow\">article</a> which favours HttpClient. </p>\n\n<p>Later I have been realized that HttpURLConnection is going to stay from this <a href=\"https://github.com/loopj/android-async-http/issues/75\" rel=\"nofollow\">article</a></p>\n\n<p>As per the Google blog:</p>\n\n<blockquote>\n  <p>\u201cApache HTTP client has fewer bugs on Eclair and Froyo. It is the best choice for these releases. For Gingerbread , HttpURLConnection is the best choice. Its simple API and small size makes it great fit for Android.</p>\n  \n  <p>Transparent compression and response caching reduce network use, improve speed and save battery. New applications should use HttpURLConnection; it is where we will be spending our energy going forward.\u201d</p>\n</blockquote>\n\n<p>After reading <a href=\"http://www.rapidvaluesolutions.com/tech_blog/introduction-to-httpurlconnection-http-client-for-performing-efficient-network-operations/\" rel=\"nofollow\">this article</a> and some other stack over flow questions, I am convinced that HttpURLConnection is going to stay for longer durations.</p>\n\n<p>Some of the SE questions favoring HttpURLConnections:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/4330392/on-android-make-a-post-request-with-url-encoded-form-data-without-using-urlenco/4794289#4794289\">On Android, make a POST request with URL Encoded Form data without using UrlEncodedFormEntity</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/4221420/httppost-works-in-java-project-not-in-android\">HttpPost works in Java project, not in Android</a></p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Tips about writing micro benchmarks <a href=\"http://wikis.oracle.com/display/HotSpotInternals/Home\">from the creators of Java HotSpot</a>:</p>\n\n<p><strong>Rule 0:</strong> Read a reputable paper on JVMs and micro-benchmarking. A good one is <a href=\"http://www.ibm.com/developerworks/java/library/j-jtp02225\">Brian Goetz, 2005</a>. Do not expect too much from micro-benchmarks; they measure only a limited range of JVM performance characteristics.</p>\n\n<p><strong>Rule 1:</strong> Always include a warmup phase which runs your test kernel all the way through, enough to trigger all initializations and compilations before timing phase(s). (Fewer iterations is OK on the warmup phase. The rule of thumb is several tens of thousands of inner loop iterations.)</p>\n\n<p><strong>Rule 2:</strong> Always run with <code>-XX:+PrintCompilation</code>, <code>-verbose:gc</code>, etc., so you can verify that the compiler and other parts of the JVM are not doing unexpected work during your timing phase.</p>\n\n<p><strong>Rule 2.1:</strong> Print messages at the beginning and end of timing and warmup phases, so you can verify that there is no output from Rule 2 during the timing phase.</p>\n\n<p><strong>Rule 3:</strong> Be aware of the difference between -client and -server, and OSR and regular compilations. The <code>-XX:+PrintCompilation</code> flag reports OSR compilations with an at-sign to denote the non-initial entry point, for example: <code>Trouble$1::run @ 2 (41 bytes)</code>. Prefer server to client, and regular to OSR, if you are after best performance.</p>\n\n<p><strong>Rule 4:</strong> Be aware of initialization effects. Do not print for the first time during your timing phase, since printing loads and initializes classes. Do not load new classes outside of the warmup phase (or final reporting phase), unless you are testing class loading specifically (and in that case load only the test classes). Rule 2 is your first line of defense against such effects.</p>\n\n<p><strong>Rule 5:</strong> Be aware of deoptimization and recompilation effects. Do not take any code path for the first time in the timing phase, because the compiler may junk and recompile the code, based on an earlier optimistic assumption that the path was not going to be used at all. Rule 2 is your first line of defense against such effects.</p>\n\n<p><strong>Rule 6:</strong> Use appropriate tools to read the compiler's mind, and expect to be surprised by the code it produces. Inspect the code yourself before forming theories about what makes something faster or slower.</p>\n\n<p><strong>Rule 7:</strong> Reduce noise in your measurements. Run your benchmark on a quiet machine, and run it several times, discarding outliers. Use <code>-Xbatch</code> to serialize the compiler with the application, and consider setting <code>-XX:CICompilerCount=1</code> to prevent the compiler from running in parallel with itself.</p>\n\n<p><strong>Rule 8:</strong> Use a library for your benchmark as it is probably more efficient and was already debugged for this sole purpose. Such as <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>, <a href=\"https://code.google.com/p/caliper/\">Caliper</a> or <a href=\"http://cseweb.ucsd.edu/users/wgg/JavaProf/javaprof.html\">Bill and Paul's Excellent UCSD Benchmarks for Java</a>.  </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I know this question has been marked as answered but I wanted to mention two libraries that enable us to write micro benchmarks</p>\n\n<p><strong><a href=\"http://code.google.com/p/caliper/\">Caliper from Google</a></strong></p>\n\n<p><em>Getting started tutorials</em></p>\n\n<ol>\n<li><a href=\"http://codingjunkie.net/micro-benchmarking-with-caliper/\">http://codingjunkie.net/micro-benchmarking-with-caliper/</a></li>\n<li><a href=\"http://vertexlabs.co.uk/blog/caliper\">http://vertexlabs.co.uk/blog/caliper</a></li>\n</ol>\n\n<p><strong><a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH from OpenJDK</a></strong></p>\n\n<p><em>Getting started tutorials</em></p>\n\n<ol>\n<li><a href=\"http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html\">Avoiding Benchmarking Pitfalls on the JVM</a></li>\n<li><a href=\"http://nitschinger.at/Using-JMH-for-Java-Microbenchmarking\">http://nitschinger.at/Using-JMH-for-Java-Microbenchmarking</a></li>\n<li><a href=\"http://java-performance.info/jmh/\">http://java-performance.info/jmh/</a></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Important things for Java benchmarks are:</p>\n\n<ul>\n<li>Warm up the JIT first by running the code several times before timing it</li>\n<li>Make sure you run it for long enough to be able to measure the results in seconds or (better) tens of seconds</li>\n<li>While you can't call <code>System.gc()</code> between iterations, it's a good idea to run it between tests, so that each test will hopefully get a \"clean\" memory space to work with. (Yes, <code>gc()</code> is more of a hint than a guarantee, but it's very <em>likely</em> that it really will garbage collect in my experience.)</li>\n<li>I like to display iterations and time, and a score of time/iteration which can be scaled such that the \"best\" algorithm gets a score of 1.0 and others are scored in a relative fashion. This means you can run <em>all</em> algorithms for a longish time, varying both number of iterations and time, but still getting comparable results.</li>\n</ul>\n\n<p>I'm just in the process of blogging about the design of a benchmarking framework in .NET. I've got a <a href=\"http://msmvps.com/blogs/jon_skeet/archive/2009/01/26/benchmarking-made-easy.aspx\">couple</a> of <a href=\"http://msmvps.com/blogs/jon_skeet/archive/2009/01/29/for-vs-foreach-on-arrays-and-lists.aspx\">earlier posts</a> which may be able to give you some ideas - not everything will be appropriate, of course, but some of it may be.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://openjdk.java.net/projects/code-tools/jmh/\" rel=\"nofollow\">jmh</a> is a recent addition to OpenJDK and has been written by some performance engineers from Oracle. Certainly worth having a look.</p>\n\n<blockquote>\n  <p>The jmh is a Java harness for building, running, and analysing nano/micro/macro benchmarks written in Java and other languages targetting the JVM.</p>\n</blockquote>\n\n<p>Very interesting pieces of information buried in the sample tests comments.</p>\n\n<p>See also <a href=\"https://groups.google.com/forum/#!msg/mechanical-sympathy/m4opvy4xq3U/7lY8x8SvHgwJ\" rel=\"nofollow\">a discussion on the main strengths of jmh</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Make sure you somehow use results which are computed in benchmarked code. Otherwise your code can be optimized away.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>Should the benchmark measure time/iteration or iterations/time, and why?</p>\n</blockquote>\n\n<p>It depends on what you are trying to test.  If you are interested in latency, use time/iteration and if you are interested in throughput use iterations/time.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are trying to compare two algorithms, do at least two benchmarks on each, alternating the order.  i.e.:</p>\n\n<pre><code>for(i=1..n)\n  alg1();\nfor(i=1..n)\n  alg2();\nfor(i=1..n)\n  alg2();\nfor(i=1..n)\n  alg1();\n</code></pre>\n\n<p>I have found some noticeable differences (5-10% sometimes) in the runtime of the same algorithm in different passes..</p>\n\n<p>Also, make sure that <em>n</em> is very large, so that the runtime of each loop is at the very least 10 seconds or so.  The more iterations, the more significant figures in your benchmark time and the more reliable that data is.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are many possible pitfalls for writing micro-benchmarks in Java.</p>\n\n<p>First: You have to calculate with all sorts of events that take time more or less random: Garbage collection, caching effects (of OS for files and of CPU for memory), IO etc.</p>\n\n<p>Second: You cannot trust the accuracy of the measured times for very short intervals.</p>\n\n<p>Third: The JVM optimizes your code while executing. So different runs in the same JVM-instance will become faster and faster.</p>\n\n<p>My recommendations: Make your benchmark run some seconds, that is more reliable than a runtime over milliseconds. Warm up the JVM (means running the benchmark at least once without measuring, that the JVM can run optimizations). And run your benchmark multiple times (maybe 5 times) and take the median-value. Run every micro-benchmark in a new JVM-instance (call for every benchmark new Java) otherwise optimization effects of the JVM can influence later running tests. Don't execute things, that aren't executed in the warmup-phase (as this could trigger class-load and recompilation).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://opt.sourceforge.net/\" rel=\"nofollow\">http://opt.sourceforge.net/</a> Java Micro Benchmark - control tasks required to determine the comparative performance characteristics of the computer system on different platforms. Can be used to guide optimization decisions and to compare different Java implementations.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It should also be noted that it might also be important to analyze the results of the micro benchmark when comparing different implementations. Therefore a <a href=\"http://en.wikipedia.org/wiki/Significance_testing\" rel=\"nofollow\">significance test</a> should be made.</p>\n\n<p>This is because implementation <code>A</code> might be faster during most of the runs of the benchmark than implementation <code>B</code>. But <code>A</code> might also have a higher spread, so the measured performance benefit of <code>A</code> won't be of any significance when compared with <code>B</code>.</p>\n\n<p>So it is also important to write and run a micro benchmark correctly, but also to analyze it correctly.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Introduction</h2>\n\n<p>To browse and select a file for upload you need a HTML <code>&lt;input type=\"file\"&gt;</code> field in the form. As stated in the <a href=\"http://www.w3.org/TR/html4/interact/forms.html\">HTML specification</a> you have to use the <code>POST</code> method and the <code>enctype</code> attribute of the form has to be set to <code>\"multipart/form-data\"</code>.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form action=\"upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"text\" name=\"description\" /&gt;\n    &lt;input type=\"file\" name=\"file\" /&gt;\n    &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>After submitting such a form, the binary multipart form data is available in the request body in <a href=\"http://stackoverflow.com/questions/13372775/servlet-handling-file-upload-why-bigger-than-the-original/13399437#13399437\">a different format</a> than when the <code>enctype</code> isn't set.</p>\n\n<p>Before Servlet 3.0, the Servlet API didn't natively support <code>multipart/form-data</code>. It supports only the default form enctype of <code>application/x-www-form-urlencoded</code>. The <code>request.getParameter()</code> and consorts would all return <code>null</code> when using multipart form data. This is where the well known <a href=\"http://commons.apache.org/fileupload\">Apache Commons FileUpload</a> came into the picture.</p>\n\n<h2>Don't manually parse it!</h2>\n\n<p>You can in theory parse the request body yourself based on <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html#getInputStream%28%29\"><code>ServletRequest#getInputStream()</code></a>. However, this is a precise and tedious work which requires precise knowledge of <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">RFC2388</a>. You shouldn't try to do this on your own or copypaste some homegrown library-less code found elsewhere on the Internet. Many online sources have failed hard in this, such as roseindia.net. See also <a href=\"http://stackoverflow.com/questions/5038798/uploading-of-pdf-file\">uploading of pdf file</a>. You should rather use a real library which is used (and implicitly tested!) by millions of users for years. Such a library has proven its robustness.</p>\n\n<h2>When you're already on Servlet 3.0 or newer, use native API</h2>\n\n<p>If you're using at least Servlet 3.0 (Tomcat 7, JBoss AS 6, GlassFish 3, etc), then you can just use standard API provided <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getParts()\"><code>HttpServletRequest#getPart()</code></a> to collect the individual multipart form data items (most Servlet 3.0 implementations actually use Apache Commons FileUpload under the covers for this!). Also, normal form fields are available by <code>getParameter()</code> the usual way.</p>\n\n<p>First annotate your servlet with <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/MultipartConfig.html\"><code>@MultipartConfig</code></a> in order to let it recognize and support <code>multipart/form-data</code> requests and thus get <code>getPart()</code> to work:</p>\n\n<pre><code>@WebServlet(\"/upload\")\n@MultipartConfig\npublic class UploadServlet extends HttpServlet {\n    // ...\n}\n</code></pre>\n\n<p>Then, implement its <code>doPost()</code> as follows:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String description = request.getParameter(\"description\"); // Retrieves &lt;input type=\"text\" name=\"description\"&gt;\n    Part filePart = request.getPart(\"file\"); // Retrieves &lt;input type=\"file\" name=\"file\"&gt;\n    String fileName = filePart.getSubmittedFileName();\n    InputStream fileContent = filePart.getInputStream();\n    // ... (do your job here)\n}\n</code></pre>\n\n<h2>When you're not on Servlet 3.1 yet, manually get submitted file name</h2>\n\n<p>Note that <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName()\"><code>Part#getSubmittedFileName()</code></a> was introduced in Servlet 3.1 (Tomcat 8, WildFly 8, GlassFish 4, etc). If you're not on Servlet 3.1 yet, then you need an additional utility method to obtain the submitted file name.</p>\n\n<pre><code>private static String getSubmittedFileName(Part part) {\n    for (String cd : part.getHeader(\"content-disposition\").split(\";\")) {\n        if (cd.trim().startsWith(\"filename\")) {\n            String fileName = cd.substring(cd.indexOf('=') + 1).trim().replace(\"\\\"\", \"\");\n            return fileName.substring(fileName.lastIndexOf('/') + 1).substring(fileName.lastIndexOf('\\\\') + 1); // MSIE fix.\n        }\n    }\n    return null;\n}\n</code></pre>\n\n\n\n<pre><code>String fileName = getSubmittedFileName(filePart);\n</code></pre>\n\n<p>Note the MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</p>\n\n<h2>When you're not on Servlet 3.0 yet, use Apache Commons FileUpload</h2>\n\n<p>If you're not on Servlet 3.0 yet (isn't it about time to upgrade?), the common practice is to make use of <a href=\"http://commons.apache.org/fileupload\">Apache Commons FileUpload</a> to parse the multpart form data requests. It has an excellent <a href=\"http://commons.apache.org/fileupload/using.html\">User Guide</a> and <a href=\"http://commons.apache.org/fileupload/faq.html\">FAQ</a> (carefully go through both). There's also the O'Reilly (\"<a href=\"http://www.servlets.com/cos/\">cos</a>\") <code>MultipartRequest</code>, but it has some (minor) bugs and isn't actively maintained anymore for years. I wouldn't recommend using it. Apache Commons FileUpload is still actively maintained and currently very mature.</p>\n\n<p>In order to use Apache Commons FileUpload, you need to have at least the following files in your webapp's <code>/WEB-INF/lib</code>: </p>\n\n<ul>\n<li><a href=\"http://commons.apache.org/proper/commons-fileupload/download_fileupload.cgi\"><code>commons-fileupload.jar</code></a> </li>\n<li><a href=\"http://commons.apache.org/proper/commons-io/download_io.cgi\"><code>commons-io.jar</code></a> </li>\n</ul>\n\n<p>Your initial attempt failed most likely because you forgot the commons IO. </p>\n\n<p>Here's a kickoff example how the <code>doPost()</code> of your <code>UploadServlet</code> may look like when using Apache Commons FileUpload:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        List&lt;FileItem&gt; items = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request);\n        for (FileItem item : items) {\n            if (item.isFormField()) {\n                // Process regular form field (input type=\"text|radio|checkbox|etc\", select, etc).\n                String fieldName = item.getFieldName();\n                String fieldValue = item.getString();\n                // ... (do your job here)\n            } else {\n                // Process form file field (input type=\"file\").\n                String fieldName = item.getFieldName();\n                String fileName = FilenameUtils.getName(item.getName());\n                InputStream fileContent = item.getInputStream();\n                // ... (do your job here)\n            }\n        }\n    } catch (FileUploadException e) {\n        throw new ServletException(\"Cannot parse multipart request.\", e);\n    }\n\n    // ...\n}\n</code></pre>\n\n<p>It's very important that you don't call <code>getParameter()</code>, <code>getParameterMap()</code>, <code>getParameterValues()</code>, <code>getInputStream()</code>, <code>getReader()</code>, etc on the same request beforehand. Otherwise the servlet container will read and parse the request body and thus Apache Commons FileUpload will get an empty request body. See also a.o. <a href=\"http://stackoverflow.com/questions/13881272/servletfileuploadparserequestrequest-returns-an-empty-list\">ServletFileUpload#parseRequest(request) returns an empty list</a>.</p>\n\n<p>Note the <code>FilenameUtils#getName()</code>. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name.</p>\n\n<p>Alternatively you can also wrap this all in a <code>Filter</code> which parses it all automagically and put the stuff back in the parametermap of the request so that you can continue using <code>request.getParameter()</code> the usual way and retrieve the uploaded file by <code>request.getAttribute()</code>. <a href=\"http://balusc.blogspot.com/2007/11/multipartfilter.html\">You can find an example in this blog article</a>.</p>\n\n<h2>Workaround for GlassFish3 bug of <code>getParameter()</code> still returning <code>null</code></h2>\n\n<p>Note that Glassfish versions older than 3.1.2 had <a href=\"http://java.net/jira/browse/GLASSFISH-16740\">a bug</a> wherein the <code>getParameter()</code> still returns <code>null</code>. If you are targeting such a container and can't upgrade it, then you need to extract the value from <code>getPart()</code> with help of this utility method:</p>\n\n<pre><code>private static String getValue(Part part) throws IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(part.getInputStream(), \"UTF-8\"));\n    StringBuilder value = new StringBuilder();\n    char[] buffer = new char[1024];\n    for (int length = 0; (length = reader.read(buffer)) &gt; 0;) {\n        value.append(buffer, 0, length);\n    }\n    return value.toString();\n}\n</code></pre>\n\n\n\n<pre><code>String description = getValue(request.getPart(\"description\")); // Retrieves &lt;input type=\"text\" name=\"description\"&gt;\n</code></pre>\n\n<h2>Saving uploaded file (don't use <code>getRealPath()</code> nor <code>part.write()</code>!)</h2>\n\n<p>Head to the following answers for detail on properly saving the obtained <code>InputStream</code> (the <code>fileContent</code> variable as shown in the above code snippets) to disk or database:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/18664579/recommended-way-to-save-files-uploaded-to-a-tomcat-servlet/18664715#18664715\">Recommended way to save uploaded files in a servlet application</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7033676/how-to-upload-an-image-and-save-it-in-database/7033945#7033945\">How to upload an image and save it in database?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/19138706/how-to-convert-part-to-blob-so-i-can-store-it-in-mysql/19139125#19139125\">How to convert Part to Blob, so I can store it in MySQL?</a></li>\n</ul>\n\n<h2>Serving uploaded file</h2>\n\n<p>Head to the following answers for detail on properly serving the saved file from disk or database back to the client:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4543936/load-images-from-outside-of-webapps-webcontext-deploy-folder-using-hgraphi/4543951#4543951\">Load images from outside of webapps / webcontext / deploy folder using &lt;h:graphicImage&gt; or &lt;img&gt; tag</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2340406/how-to-retrieve-and-display-images-from-a-database-in-a-jsp-page/2341322#2341322\">How to retrieve and display images from a database in a JSP page?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1812244/simplest-way-to-serve-static-data-from-outside-the-application-server-in-a-java/1812356#1812356\">Simplest way to serve static data from outside the application server in a Java web application</a></li>\n<li><a href=\"http://stackoverflow.com/questions/132052/servlet-for-serving-static-content/29991447#29991447\">Abstract template for static resource servlet supporting HTTP caching</a></li>\n</ul>\n\n<h2>Ajaxifying the form</h2>\n\n<p>Head to the following answers how to upload using Ajax (and jQuery). Do note that the servlet code to collect the form data does not need to be changed for this! Only the way how you respond may be changed, but this is rather trivial (i.e. instead of forwarding to JSP, just print some JSON or XML or even plain text depending on whatever the script responsible for the Ajax call is expecting).</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/6914152/how-to-upload-files-to-server-using-jsp-servlet-and-ajax\">How to upload files to server using JSP/Servlet and Ajax?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9395911/sending-a-file-as-multipart-through-xmlhttprequest\">sending a file as multipart through xmlHttpRequest</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7114087/html5-file-upload-to-java-servlet\">HTML5 File Upload to Java Servlet</a></li>\n</ul>\n\n<hr>\n\n<p>Hope this all helps :)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need the <code>common-io.1.4.jar</code> file to be included in your <code>lib</code> directory, or if you're working in any editor, like NetBeans, then you need to go to project properties and just add the JAR file and you will be done. </p>\n\n<p>To get the <code>common.io.jar</code> file just google it or just go to the Apache <a href=\"http://en.wikipedia.org/wiki/Apache_Tomcat\" rel=\"nofollow\">Tomcat</a> website where you get the option for a free download of this file. But remember one thing: download the binary ZIP file if you're a Windows user.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am Using common Servlet for <strong>every</strong> Html Form whether it has attachments or not.\nThis Servlet returns a <code>TreeMap</code> where the keys are jsp name Parameters and values are User Inputs and saves all attachments in fixed directory and later you rename the directory of your choice.Here Connections is our custom interface having connection object. I think this will help you</p>\n\n<pre><code>public class ServletCommonfunctions extends HttpServlet implements\n        Connections {\n\n    private static final long serialVersionUID = 1L;\n\n    public ServletCommonfunctions() {}\n\n    protected void doPost(HttpServletRequest request,\n            HttpServletResponse response) throws ServletException,\n            IOException {}\n\n    public SortedMap&lt;String, String&gt; savefilesindirectory(\n            HttpServletRequest request, HttpServletResponse response)\n            throws IOException {\n        // Map&lt;String, String&gt; key_values = Collections.synchronizedMap( new\n        // TreeMap&lt;String, String&gt;());\n        SortedMap&lt;String, String&gt; key_values = new TreeMap&lt;String, String&gt;();\n        String dist = null, fact = null;\n        PrintWriter out = response.getWriter();\n        File file;\n        String filePath = \"E:\\\\FSPATH1\\\\2KL06CS048\\\\\";\n        System.out.println(\"Directory Created   ????????????\"\n            + new File(filePath).mkdir());\n        int maxFileSize = 5000 * 1024;\n        int maxMemSize = 5000 * 1024;\n        // Verify the content type\n        String contentType = request.getContentType();\n        if ((contentType.indexOf(\"multipart/form-data\") &gt;= 0)) {\n            DiskFileItemFactory factory = new DiskFileItemFactory();\n            // maximum size that will be stored in memory\n            factory.setSizeThreshold(maxMemSize);\n            // Location to save data that is larger than maxMemSize.\n            factory.setRepository(new File(filePath));\n            // Create a new file upload handler\n            ServletFileUpload upload = new ServletFileUpload(factory);\n            // maximum file size to be uploaded.\n            upload.setSizeMax(maxFileSize);\n            try {\n                // Parse the request to get file items.\n                @SuppressWarnings(\"unchecked\")\n                List&lt;FileItem&gt; fileItems = upload.parseRequest(request);\n                // Process the uploaded file items\n                Iterator&lt;FileItem&gt; i = fileItems.iterator();\n                while (i.hasNext()) {\n                    FileItem fi = (FileItem) i.next();\n                    if (!fi.isFormField()) {\n                        // Get the uploaded file parameters\n                        String fileName = fi.getName();\n                        // Write the file\n                        if (fileName.lastIndexOf(\"\\\\\") &gt;= 0) {\n                            file = new File(filePath\n                                + fileName.substring(fileName\n                                        .lastIndexOf(\"\\\\\")));\n                        } else {\n                            file = new File(filePath\n                                + fileName.substring(fileName\n                                        .lastIndexOf(\"\\\\\") + 1));\n                        }\n                        fi.write(file);\n                    } else {\n                        key_values.put(fi.getFieldName(), fi.getString());\n                    }\n                }\n            } catch (Exception ex) {\n                System.out.println(ex);\n            }\n        }\n        return key_values;\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another source of this problem occurs if you are using Geronimo with its embedded Tomcat. In this case, after many iterations of testing commons-io and commons-fileupload, the problem arises from a parent classloader handling the commons-xxx jars. This has to be prevented. The crash always occurred at: </p>\n\n<pre><code>fileItems = uploader.parseRequest(request);\n</code></pre>\n\n<p>Note that the List type of fileItems has changed with the current version of commons-fileupload to be specifically <code>List&lt;FileItem&gt;</code> as opposed to prior versions where it was generic <code>List</code>. </p>\n\n<p>I added the source code for commons-fileupload and commons-io into my Eclipse project to trace the actual error and finally got some insight. First, the exception thrown is of type Throwable not the stated FileIOException nor even Exception (these will not be trapped). Second, the error message is obfuscatory in that it stated class not found because axis2 could not find commons-io.  Axis2 is not used in my project at all but exists as a folder in the Geronimo repository subdirectory as part of standard installation.</p>\n\n<p>Finally, I found 1 place that posed a working solution which successfully solved my problem. You must hide the jars from parent loader in the deployment plan. This was put into geronimo-web.xml with my full file shown below.</p>\n\n<pre><code>Pasted from &lt;http://osdir.com/ml/user-geronimo-apache/2011-03/msg00026.html&gt; \n\n\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;\n&lt;web:web-app xmlns:app=\"http://geronimo.apache.org/xml/ns/j2ee/application-2.0\" xmlns:client=\"http://geronimo.apache.org/xml/ns/j2ee/application-client-2.0\" xmlns:conn=\"http://geronimo.apache.org/xml/ns/j2ee/connector-1.2\" xmlns:dep=\"http://geronimo.apache.org/xml/ns/deployment-1.2\" xmlns:ejb=\"http://openejb.apache.org/xml/ns/openejb-jar-2.2\" xmlns:log=\"http://geronimo.apache.org/xml/ns/loginconfig-2.0\" xmlns:name=\"http://geronimo.apache.org/xml/ns/naming-1.2\" xmlns:pers=\"http://java.sun.com/xml/ns/persistence\" xmlns:pkgen=\"http://openejb.apache.org/xml/ns/pkgen-2.1\" xmlns:sec=\"http://geronimo.apache.org/xml/ns/security-2.0\" xmlns:web=\"http://geronimo.apache.org/xml/ns/j2ee/web-2.0.1\"&gt;\n    &lt;dep:environment&gt;\n        &lt;dep:moduleId&gt;\n            &lt;dep:groupId&gt;DataStar&lt;/dep:groupId&gt;\n            &lt;dep:artifactId&gt;DataStar&lt;/dep:artifactId&gt;\n            &lt;dep:version&gt;1.0&lt;/dep:version&gt;\n            &lt;dep:type&gt;car&lt;/dep:type&gt;\n        &lt;/dep:moduleId&gt;\n\n&lt;!--Don't load commons-io or fileupload from parent classloaders--&gt;\n        &lt;dep:hidden-classes&gt;\n            &lt;dep:filter&gt;org.apache.commons.io&lt;/dep:filter&gt;\n            &lt;dep:filter&gt;org.apache.commons.fileupload&lt;/dep:filter&gt;\n        &lt;/dep:hidden-classes&gt;\n        &lt;dep:inverse-classloading/&gt;        \n\n\n    &lt;/dep:environment&gt;\n    &lt;web:context-root&gt;/DataStar&lt;/web:context-root&gt;\n&lt;/web:web-app&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Without component or external Library in Tomcat 6 o 7</strong></p>\n\n<p>Enabling Upload in the <strong>web.xml</strong> file:</p>\n\n<p><a href=\"http://joseluisbz.wordpress.com/2014/01/17/manually-installing-php-tomcat-and-httpd-lounge/#Enabling%20File%20Uploads\" rel=\"nofollow\">http://joseluisbz.wordpress.com/2014/01/17/manually-installing-php-tomcat-and-httpd-lounge/#Enabling%20File%20Uploads</a>.</p>\n\n<pre><code>&lt;servlet&gt;\n    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;\n    &lt;multipart-config&gt;\n      &lt;max-file-size&gt;3145728&lt;/max-file-size&gt;\n      &lt;max-request-size&gt;5242880&lt;/max-request-size&gt;\n    &lt;/multipart-config&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;fork&lt;/param-name&gt;\n        &lt;param-value&gt;false&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;xpoweredBy&lt;/param-name&gt;\n        &lt;param-value&gt;false&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;load-on-startup&gt;3&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n</code></pre>\n\n<p><em>AS YOU CAN SEE</em>:</p>\n\n<pre><code>    &lt;multipart-config&gt;\n      &lt;max-file-size&gt;3145728&lt;/max-file-size&gt;\n      &lt;max-request-size&gt;5242880&lt;/max-request-size&gt;\n    &lt;/multipart-config&gt;\n</code></pre>\n\n<p><strong>Uploading Files using JSP. Files:</strong></p>\n\n<p><em>In the html file</em></p>\n\n<pre><code>&lt;form method=\"post\" enctype=\"multipart/form-data\" name=\"Form\" &gt;\n\n  &lt;input type=\"file\" name=\"fFoto\" id=\"fFoto\" value=\"\" /&gt;&lt;/td&gt;\n  &lt;input type=\"file\" name=\"fResumen\" id=\"fResumen\" value=\"\"/&gt;\n</code></pre>\n\n<p><em>In the JSP File</em> or <em>Servlet</em></p>\n\n<pre><code>    InputStream isFoto = request.getPart(\"fFoto\").getInputStream();\n    InputStream isResu = request.getPart(\"fResumen\").getInputStream();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte buf[] = new byte[8192];\n    int qt = 0;\n    while ((qt = isResu.read(buf)) != -1) {\n      baos.write(buf, 0, qt);\n    }\n    String sResumen = baos.toString();\n</code></pre>\n\n<p>Edit your code to servlet requirements, like <em>max-file-size</em>, <em>max-request-size</em>  and other options that you can to set...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you happen to use Spring MVC, this is how to: \n(I'm leaving this here in case someone find it useful).</p>\n\n<p>Use a form with <code>enctype</code> attribute set to \"<code>multipart/form-data</code>\" (Same as BalusC's Answer)</p>\n\n<pre><code>&lt;form action=\"upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"file\" name=\"file\" /&gt;\n    &lt;input type=\"submit\" value=\"Upload\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>In your controller, map the request parameter <code>file</code> to <code>MultipartFile</code> type as follows:</p>\n\n<pre><code>@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic void handleUpload(@RequestParam(\"file\") MultipartFile file) throws IOException {\n    if (!file.isEmpty()) {\n            byte[] bytes = file.getBytes(); // alternatively, file.getInputStream();\n            // application logic\n    }\n}\n</code></pre>\n\n<p>You can get the filename and size using <code>MultipartFile</code>'s <code>getOriginalFilename()</code> and <code>getSize()</code>.</p>\n\n<p>I've tested this with Spring version <code>4.1.1.RELEASE</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sending multiple file for file we have to use <code>enctype=\"multipart/form-data\"</code><br>\nand to send multiple file use  <code>multiple=\"multiple\"</code> in input tag  </p>\n\n<pre><code>&lt;form action=\"upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n &lt;input type=\"file\" name=\"fileattachments\"  multiple=\"multiple\"/&gt;\n &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>you can upload file using jsp /servlet.</p>\n\n<pre><code>&lt;form action=\"UploadFileServlet\" method=\"post\"&gt;\n  &lt;input type=\"text\" name=\"description\" /&gt;\n  &lt;input type=\"file\" name=\"file\" /&gt;\n  &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>on the other hand server side.\nuse following code.</p>\n\n<pre><code>     package com.abc..servlet;\n\nimport java.io.File;\n---------\n--------\n\n\n/**\n * Servlet implementation class UploadFileServlet\n */\npublic class UploadFileServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n\n    public UploadFileServlet() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // TODO Auto-generated method stub\n        response.sendRedirect(\"../jsp/ErrorPage.jsp\");\n    }\n\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // TODO Auto-generated method stub\n\n            PrintWriter out = response.getWriter();\n            HttpSession httpSession = request.getSession();\n            String filePathUpload = (String) httpSession.getAttribute(\"path\")!=null ? httpSession.getAttribute(\"path\").toString() : \"\" ;\n\n            String path1 =  filePathUpload;\n            String filename = null;\n            File path = null;\n            FileItem item=null;\n\n\n            boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n\n            if (isMultipart) {\n                FileItemFactory factory = new DiskFileItemFactory();\n                ServletFileUpload upload = new ServletFileUpload(factory);\n                String FieldName = \"\";\n                try {\n                    List items = upload.parseRequest(request);\n                    Iterator iterator = items.iterator();\n                    while (iterator.hasNext()) {\n                         item = (FileItem) iterator.next();\n\n                            if (fieldname.equals(\"description\")) {\n                                description = item.getString();\n                            }\n                        }\n                        if (!item.isFormField()) {\n                            filename = item.getName();\n                            path = new File(path1 + File.separator);\n                            if (!path.exists()) {\n                                boolean status = path.mkdirs();\n                            }\n                            /* START OF CODE FRO PRIVILEDGE*/\n\n                            File uploadedFile = new File(path + Filename);  // for copy file\n                            item.write(uploadedFile);\n                            }\n                        } else {\n                            f1 = item.getName();\n                        }\n\n                    } // END OF WHILE \n                    response.sendRedirect(\"welcome.jsp\");\n                } catch (FileUploadException e) {\n                    e.printStackTrace();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } \n            }   \n    }\n\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>DiskFileUpload upload=new DiskFileUpload();\n</code></pre>\n\n<p>from this object you have to get file items and fields then yo can store into server like followed</p>\n\n<pre><code>  String loc=\"./webapps/prjct name/server folder/\"+contentid+extension;\n\n\n                            File uploadFile=new File(loc);\n                            item.write(uploadFile);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's an example using apache commons-fileupload:</p>\n\n<pre><code>// apache commons-fileupload to handle file upload\nDiskFileItemFactory factory = new DiskFileItemFactory();\nfactory.setRepository(new File(DataSources.TORRENTS_DIR()));\nServletFileUpload fileUpload = new ServletFileUpload(factory);\n\nList&lt;FileItem&gt; items = fileUpload.parseRequest(req.raw());\nFileItem item = items.stream()\n  .filter(e -&gt;\n  \"the_upload_name\".equals(e.getFieldName()))\n  .findFirst().get();\nString fileName = item.getName();\n\nitem.write(new File(dir, fileName));\nlog.info(fileName);\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using various <code>LayoutManagers</code> one can provide spacing between various components. </p>\n\n<h2> 1.) BorderLayout :</h2>\n\n<ul>\n<li><strong>Overloaded Constructor :</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#BorderLayout%28int,%20int%29\">BorderLayout(int horizontalGap, int verticalGap)</a></li>\n<li><p><strong>Getter and setter methods</strong></p>\n\n<p>For Horizontal Spacing <strong>:</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#getHgap%28%29\">BorderLayout.getHgap()</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#setHgap%28int%29\">BorderLayout.setHgap(int hgap)</a></p>\n\n<p>For Vertical Spacing <strong>:</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#getVgap%28%29\">BorderLayout.getVgap()</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/BorderLayout.html#setVgap%28int%29\">BorderLayout.setVgap()</a></p></li>\n</ul>\n\n<h2> 2.) FlowLayout :</h2>\n\n<ul>\n<li><strong>Overloaded Constructor :</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#FlowLayout%28int,%20int,%20int%29\">FlowLayout(int align, int hgap, int vgap)</a></li>\n<li><p><strong>Getter and setter methods</strong></p>\n\n<p>For Horizontal Spacing <strong>:</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#getHgap%28%29\">FlowLayout.getHgap()</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#setHgap%28int%29\">FlowLayout.setHgap(int hgap)</a></p>\n\n<p>For Vertical Spacing <strong>:</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#getVgap%28%29\">FlowLayout.getVgap()</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/FlowLayout.html#setVgap%28int%29\">FlowLayout.setVgap()</a></p></li>\n</ul>\n\n<h2> 3.) GridLayout :</h2>\n\n<ul>\n<li><strong>Overloaded Constructor :</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#GridLayout%28int,%20int,%20int,%20int%29\">GridLayout(int rows, int columns, int hgap, int vgap)</a></li>\n<li><p><strong>Getter and setter methods</strong></p>\n\n<p>For Horizontal Spacing <strong>:</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#getHgap%28%29\">GridLayout.getHgap()</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#setHgap%28int%29\">GridLayout.setHgap(int hgap)</a></p>\n\n<p>For Vertical Spacing <strong>:</strong> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#getVgap%28%29\">GridLayout.getVgap()</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#setVgap%28int%29\">GridLayout.setVgap()</a></p></li>\n</ul>\n\n<h2> 4.) GridBagLayout :</h2>\n\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridBagConstraints.html#insets\">GridBagConstraints.insets</a></p>\n\n<h2> 5.) CardLayout (<a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#setHgap%28int%29\">example</a>) :</h2>\n\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/GridLayout.html#getVgap%28%29\">CardLayout(int hGap, int vGap)</a></p>\n\n<h2>Example to display all constructors in action :</h2>\n\n<pre><code>import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class LayoutExample {\n\n    private final int hGap = 5;\n    private final int vGap = 5;\n\n    private String[] borderConstraints = {\n        BorderLayout.PAGE_START,\n        BorderLayout.LINE_START,\n        BorderLayout.CENTER,\n        BorderLayout.LINE_END,\n        BorderLayout.PAGE_END\n    };\n\n    private JButton[] buttons;\n\n    private GridBagConstraints gbc;\n\n    private JPanel borderPanel;\n    private JPanel flowPanel;\n    private JPanel gridPanel;\n    private JPanel gridBagPanel;\n    private JPanel cardPanel;\n\n    public LayoutExample() {\n        buttons = new JButton[16];\n        gbc = new GridBagConstraints();\n        gbc.anchor = GridBagConstraints.FIRST_LINE_START;   \n        gbc.insets = new Insets(hGap, vGap, hGap, vGap);        \n    }\n\n    private void displayGUI() {\n        JFrame frame = new JFrame(\"Layout Example\");\n        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n        JPanel contentPane = new JPanel(\n                        new GridLayout(0, 1, hGap, vGap));\n        contentPane.setBorder(\n            BorderFactory.createEmptyBorder(hGap, vGap, hGap, vGap));\n        borderPanel = new JPanel(new BorderLayout(hGap, vGap));\n        borderPanel.setBorder(\n            BorderFactory.createTitledBorder(\"BorderLayout\"));\n        borderPanel.setOpaque(true);\n        borderPanel.setBackground(Color.WHITE);\n        for (int i = 0; i &lt; 5; i++) {\n            buttons[i] = new JButton(borderConstraints[i]);\n            borderPanel.add(buttons[i], borderConstraints[i]);\n        }\n        contentPane.add(borderPanel);\n\n        flowPanel = new JPanel(new FlowLayout(\n                    FlowLayout.CENTER, hGap, vGap));\n        flowPanel.setBorder(\n            BorderFactory.createTitledBorder(\"FlowLayout\"));\n        flowPanel.setOpaque(true);\n        flowPanel.setBackground(Color.WHITE);\n        for (int i = 5; i &lt; 8; i++) {\n            buttons[i] = new JButton(Integer.toString(i));\n            flowPanel.add(buttons[i]);\n        }\n        contentPane.add(flowPanel);\n\n        gridPanel = new JPanel(new GridLayout(2, 2, hGap, vGap));\n        gridPanel.setBorder(\n            BorderFactory.createTitledBorder(\"GridLayout\"));\n        gridPanel.setOpaque(true);\n        gridPanel.setBackground(Color.WHITE);\n        for (int i = 8; i &lt; 12; i++) {\n            buttons[i] = new JButton(Integer.toString(i));\n            gridPanel.add(buttons[i]);\n        }\n        contentPane.add(gridPanel);\n\n        gridBagPanel = new JPanel(new GridBagLayout());\n        gridBagPanel.setBorder(\n            BorderFactory.createTitledBorder(\"GridBagLayout\"));\n        gridBagPanel.setOpaque(true);\n        gridBagPanel.setBackground(Color.WHITE);\n        buttons[12] = new JButton(Integer.toString(12));\n        addComp(gridBagPanel, buttons[12], 0, 0, 1, 1\n                            , GridBagConstraints.BOTH, 0.33, 0.5);\n        buttons[13] = new JButton(Integer.toString(13));\n        addComp(gridBagPanel, buttons[13], 1, 0, 1, 1\n                            , GridBagConstraints.BOTH, 0.33, 0.5);\n        buttons[14] = new JButton(Integer.toString(14));\n        addComp(gridBagPanel, buttons[14], 0, 1, 2, 1\n                            , GridBagConstraints.BOTH, 0.66, 0.5);\n        buttons[15] = new JButton(Integer.toString(15));\n        addComp(gridBagPanel, buttons[15], 2, 0, 1, 2\n                            , GridBagConstraints.BOTH, 0.33, 1.0);\n        contentPane.add(gridBagPanel);\n\n        cardPanel = new JPanel(new CardLayout(hGap, vGap));\n        cardPanel.setBorder(\n            BorderFactory.createTitledBorder(\"CardLayout\"));\n        cardPanel.setOpaque(true);\n        cardPanel.setBackground(Color.WHITE);\n        cardPanel.add(getPanel(Color.BLUE));\n        cardPanel.add(getPanel(Color.GREEN));\n        contentPane.add(cardPanel);\n\n        frame.setContentPane(contentPane);\n        frame.pack();\n        frame.setLocationByPlatform(true);\n        frame.setVisible(true);\n    }\n\n    private JPanel getPanel(Color bColor) {\n        JPanel panel = new JPanel(new FlowLayout(\n                    FlowLayout.CENTER, hGap, vGap));\n        panel.setOpaque(true);\n        panel.setBackground(bColor.darker().darker());\n        JButton swapperButton = new JButton(\"Next\");\n        swapperButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent ae) {\n                CardLayout cardLayout = (CardLayout) cardPanel.getLayout();\n                cardLayout.next(cardPanel);\n            }\n        });\n\n        panel.add(swapperButton);\n\n        return panel;\n    }\n\n    private void addComp(JPanel panel, JComponent comp\n                                , int x, int y, int gWidth\n                                    , int gHeight, int fill\n                                        , double weightx, double weighty) {\n        gbc.gridx = x;\n        gbc.gridy = y;\n        gbc.gridwidth = gWidth;\n        gbc.gridheight = gHeight;\n        gbc.fill = fill;\n        gbc.weightx = weightx;\n        gbc.weighty = weighty;      \n\n        panel.add(comp, gbc);\n    }\n\n    public static void main(String[] args) {\n        Runnable runnable = new Runnable(){\n            @Override\n            public void run() {\n                new LayoutExample().displayGUI();\n            }\n        };\n        EventQueue.invokeLater(runnable);\n    }\n}\n</code></pre>\n\n<h2>OUTPUT :</h2>\n\n<p><img src=\"http://i.stack.imgur.com/9mKG9.png\" alt=\"LAYOUTIMAGE\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are a number of ways in a Swing GUI to provide a separation between components, and white space around components:</p>\n\n<ul>\n<li><code>JToolBar</code> has the methods <a href=\"http://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator--\"><code>addSeparator()</code></a> &amp; <a href=\"http://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator-java.awt.Dimension-\"><code>addSeparator(Dimension)</code></a>.</li>\n<li><code>JMenu</code> uses a spacing component better suited to menus, available through <a href=\"http://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#addSeparator--\"><code>addSeparator()</code></a>.  </li>\n</ul>\n\n<p>But more generally, look to:</p>\n\n<ul>\n<li>The spacing as can be defined in the layout constructors.</li>\n<li>Borders.  </li>\n</ul>\n\n<p>Here is an example of using the layout separator <code>hGap</code> &amp; <code>vGap</code> values &amp; borders (specifically an <code>EmptyBorder</code>) to provide 'white' (actually shown as 'red' to make it very obvious) space.  Adjust the spinners to see the result.</p>\n\n<p><img src=\"http://i.stack.imgur.com/lYyOZ.png\" alt=\"With no GUI white space\"></p>\n\n<p><img src=\"http://i.stack.imgur.com/NVtKI.png\" alt=\"With GUI white space\"></p>\n\n<pre><code>import java.awt.*;\nimport javax.swing.*;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.event.*;\n\npublic class WhiteSpace {\n\n    private JPanel gui = null;\n    private BorderLayout mainLayout;\n    private FlowLayout buttonLayout;\n    private EmptyBorder border;\n\n    public Container getGui() {\n        if (gui==null) {\n            mainLayout = new BorderLayout(0,0);\n            gui = new JPanel(mainLayout);\n            gui.setBackground(Color.RED);\n            border = new EmptyBorder(0,0,0,0);\n\n            JTree tree = new JTree();\n            tree.setVisibleRowCount(10);\n            for (int ii = tree.getRowCount(); ii&gt;-1; ii--) {\n                tree.expandRow(ii);\n            }\n            gui.add(new JScrollPane(\n                    tree, \n                    JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n                    JScrollPane.HORIZONTAL_SCROLLBAR_NEVER), \n                    BorderLayout.LINE_START);\n            gui.add(new JScrollPane(new JTextArea(10,30)));\n\n            buttonLayout = new FlowLayout(FlowLayout.CENTER,0,0);\n            JPanel buttonPanel = new JPanel(buttonLayout);\n            gui.add(buttonPanel, BorderLayout.PAGE_START);\n\n            buttonPanel.add(new JLabel(\"H Gap\"));\n            final JSpinner hSpinner = \n                    new JSpinner(new SpinnerNumberModel(0,0,15,1));\n            buttonPanel.add(hSpinner);\n\n            buttonPanel.add(new JLabel(\"V Gap\"));\n            final JSpinner vSpinner = \n                    new JSpinner(new SpinnerNumberModel(0,0,15,1));\n            buttonPanel.add(vSpinner);\n\n            buttonPanel.add(new JLabel(\"H Border\"));\n            final JSpinner hBorderSpinner = \n                    new JSpinner(new SpinnerNumberModel(0,0,15,1));\n            buttonPanel.add(hBorderSpinner);\n\n            buttonPanel.add(new JLabel(\"V Border\"));\n            final JSpinner vBorderSpinner = \n                    new JSpinner(new SpinnerNumberModel(0,0,15,1));\n            buttonPanel.add(vBorderSpinner);\n\n            ChangeListener changeListener = new ChangeListener() {\n\n                @Override\n                public void stateChanged(ChangeEvent e) {\n                    int hGap = ((Integer)hSpinner.getValue()).intValue();\n                    int vGap = ((Integer)vSpinner.getValue()).intValue();\n                    int hBorder = ((Integer)hBorderSpinner.getValue()).intValue();\n                    int vBorder = ((Integer)vBorderSpinner.getValue()).intValue();\n                    adjustWhiteSpace(hGap,vGap,hBorder,vBorder);\n                }\n            };\n\n            hSpinner.addChangeListener(changeListener);\n            vSpinner.addChangeListener(changeListener);\n            hBorderSpinner.addChangeListener(changeListener);\n            vBorderSpinner.addChangeListener(changeListener);\n        }\n\n        return gui;\n    }\n\n    private void adjustWhiteSpace(int hGap, int vGap, int hBorder, int vBorder) {\n        mainLayout.setHgap(hGap);\n        mainLayout.setVgap(vGap);\n        buttonLayout.setHgap(hGap);\n        gui.setBorder(new EmptyBorder(vBorder,hBorder,vBorder,hBorder));\n        Container c = gui.getTopLevelAncestor();\n        if (c instanceof Window) {\n            Window w = (Window)c;\n            w.pack();\n        }\n    }\n\n    public static void main(String[] args) {\n        Runnable r = new Runnable() {\n\n            @Override\n            public void run() {\n                WhiteSpace ws = new WhiteSpace();\n                // the GUI as seen by the user (without frame)\n                Container gui = ws.getGui();\n\n                JFrame f = new JFrame(\"White (OK Red) Space\");\n                f.add(gui);\n                // Ensures JVM closes after frame(s) closed and\n                // all non-daemon threads are finished\n                f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n                // See http://stackoverflow.com/a/7143398/418556 for demo.\n                f.setLocationByPlatform(true);\n\n                // ensures the frame is the minimum size it needs to be\n                // in order display the components within it\n                f.setResizable(false);\n                f.pack();\n                // should be done last, to avoid flickering, moving,\n                // resizing artifacts.\n                f.setVisible(true);\n            }\n        };\n        SwingUtilities.invokeLater(r);\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you use <code>BoxLayout</code>, <code>Box.createVerticalGlue()</code> method can help you to make some white space.</p>\n\n<p>Another method is <code>BorderFactory.createEmptyBorder(int top, int left, int bottom, int right)</code>. It can help you to make some white space around component.</p>\n\n<p>Thanks for Andrew Thompson's remind.I've revised BoxLayout in recent days and I     find that <code>Box.createVerticalGlue()</code> can add some white space depend on the panel's size and you can not set the explicit pixel value of the length of white space.But <code>Box.createVerticalStrut()</code> can do that.  Here is a MCTaRE and show the    effect of those two methods.</p>\n\n<p><img src=\"http://i.stack.imgur.com/qOIZ5.gif\" alt=\"enter image description here\"></p>\n\n<pre><code>import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport javax.swing.event.*;\n\npublic class WhiteSpace extends JFrame{\n    static WhiteSpace whiteSpace;\n    DemoPanel demoPanel;\n    boolean withGlue;\n    JSpinner spinner;\n\n    public WhiteSpace(){\n        initialWindow();\n        demoPanel = new DemoPanel();\n        ActionPanel actionPanel = new ActionPanel();\n\n        setLayout(new BorderLayout());\n\n        getContentPane().add(actionPanel,BorderLayout.NORTH);\n        getContentPane().add(demoPanel,BorderLayout.CENTER);\n            setVisible(true);\n    }\n\n    public void initialWindow(){\n        setSize(220, 300);\n        setTitle(\"White Space\");\n        setResizable(false);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setLocationRelativeTo(null);\n        //Show the window in the middle of the screen\n    }\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                whiteSpace = new WhiteSpace();\n            }\n        };\n        SwingUtilities.invokeLater(runnable);\n    }\n\n    class DemoPanel extends JPanel{\n        //Show the vertical white space between label1 and label2\n        JLabel label1;\n        JLabel label2;\n        public void initialDemoPanel(){\n            setBorder(BorderFactory.createTitledBorder(getBorder(), \"DemoPanel\", TitledBorder.LEADING, TitledBorder.TOP, new Font(\"Default\",Font.PLAIN,10), Color.gray));\n            setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n\n            label1 = new JLabel(\"This is first line\");\n            label2 = new JLabel(\"This is second line\");\n        }\n\n        public DemoPanel(){\n            initialDemoPanel();\n            add(label1);\n            if(withGlue){\n                add(Box.createVerticalGlue());\n            }\n            add(label2);\n        }\n\n        public DemoPanel(int strutValue){\n            initialDemoPanel();\n            add(label1);\n            add(Box.createVerticalStrut(strutValue));\n            add(label2);\n        }\n    }\n\n    class ActionPanel extends JPanel{\n        public ActionPanel(){\n            setBorder(BorderFactory.createTitledBorder(getBorder(), \"ActionPanel\", TitledBorder.LEADING, TitledBorder.TOP, new Font(\"Default\",Font.PLAIN,10), Color.gray));\n\n            setLayout(new BoxLayout(this,BoxLayout.X_AXIS));\n            JRadioButton glueButton = new JRadioButton(\"With Glue\");\n            glueButton.addActionListener(new glueButtonListener());\n            add(glueButton);\n\n            add(Box.createHorizontalStrut(10));\n            //To create horizontal white space\n            JLabel strutLabel = new JLabel(\"Strut Value\");\n            add(strutLabel);\n            spinner = new JSpinner(new SpinnerNumberModel(0,0,50,1));\n            spinner.addChangeListener(new spinnerListener());\n            add(spinner);\n            //public SpinnerNumberModel(Number value,Comparable minimum,Comparable maximum,Number stepSize)\n        }\n    }\n\n    class glueButtonListener implements ActionListener{\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            spinner.setValue(new Integer(0));\n            withGlue = (withGlue == true ? false:true);\n            whiteSpace.getContentPane().remove(demoPanel);\n            demoPanel = new DemoPanel();\n            whiteSpace.getContentPane().add(demoPanel,BorderLayout.CENTER);\n            whiteSpace.getContentPane().validate();\n        }\n    }\n\n    class spinnerListener implements ChangeListener{\n\n        @Override\n        public void stateChanged(ChangeEvent e) {\n            int strutValue = (Integer) spinner.getValue();\n            whiteSpace.getContentPane().remove(demoPanel);\n            demoPanel = new DemoPanel(strutValue);\n            whiteSpace.getContentPane().add(demoPanel,BorderLayout.CENTER);\n            whiteSpace.getContentPane().validate();\n        }\n    }\n}\n</code></pre>\n\n<p><code>Box.createHorizontalGlue()</code> and <code>Box.createHorizontalStrut(int height)</code> can be used too. Besides, <code>Box.createRigidArea(Dimension d)</code> has the ability too create white space too.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>MigLayout</code> has multiple ways of creating space. (A space is called a gap in this layout.)\nGaps can be created at the highest level with layout constraints, it is possible to\ncreate gaps between rows and column and gaps can be also set between individual \ncomponents with component constraints. There are also specific gaps around the borders\nof a container called insets which have their own specific keyword to be set.</p>\n\n<p>The following example creates all these kinds of gaps:</p>\n\n<pre><code>package com.zetcode;\n\nimport java.awt.EventQueue;\nimport javax.swing.BorderFactory;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport net.miginfocom.swing.MigLayout;\n\n\npublic class MigLayoutGaps2 extends JFrame {\n\n    public MigLayoutGaps2() {\n\n        initUI();\n\n        setTitle(\"Gaps\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setLocationRelativeTo(null);\n    }\n\n    private void initUI() {\n\n        JPanel base = new JPanel(new MigLayout(\"flowy, ins 30, gap 15\"));\n        setContentPane(base);\n\n        JPanel pnl1 = new JPanel();\n        pnl1.setBorder(\n                BorderFactory.createTitledBorder(\"Grid gaps\")\n        );\n\n        pnl1.setLayout(new MigLayout(\"gap 5 5, ins 10, wrap 3\"));\n\n        pnl1.add(new JButton(\"1\"));\n        pnl1.add(new JButton(\"2\"));\n        pnl1.add(new JButton(\"3\"));\n        pnl1.add(new JButton(\"4\"));\n        pnl1.add(new JButton(\"5\"));\n        pnl1.add(new JButton(\"6\"));\n\n        JPanel pnl2 = new JPanel();\n        pnl2.setBorder(\n                BorderFactory.createTitledBorder(\"Column gaps\")\n        );\n\n        pnl2.setLayout(new MigLayout(\"wrap 3\", \"[]10[]\"));\n\n        JLabel lbl1 = new JLabel();\n        lbl1.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        JLabel lbl2 = new JLabel();\n        lbl2.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        JLabel lbl3 = new JLabel();\n        lbl3.setBorder(\n            BorderFactory.createEtchedBorder()\n        );        \n\n        pnl2.add(lbl1, \"w 40, h 110\");\n        pnl2.add(lbl2, \"w 40, h 110\");\n        pnl2.add(lbl3, \"w 40, h 110\");\n\n        JPanel pnl3 = new JPanel();\n        pnl3.setBorder(\n                BorderFactory.createTitledBorder(\"Row gaps\")\n        );\n\n        pnl3.setLayout(new MigLayout(\"wrap\", \"\", \"[]15[]\"));\n\n        JLabel lbl4 = new JLabel();\n        lbl4.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        JLabel lbl5 = new JLabel();\n        lbl5.setBorder(\n            BorderFactory.createEtchedBorder()\n        );\n\n        JLabel lbl6 = new JLabel();\n        lbl6.setBorder(\n            BorderFactory.createEtchedBorder()\n        );        \n\n        pnl3.add(lbl4, \"w 150, h 20\");\n        pnl3.add(lbl5, \"w 150, h 20\");\n        pnl3.add(lbl6, \"w 150, h 20\");        \n\n        JPanel pnl4 = new JPanel();\n        pnl4.setBorder(\n                BorderFactory.createTitledBorder(\"Component gaps\")\n        );\n\n        pnl4.setLayout(new MigLayout());\n\n        pnl4.add(new JLabel(\"Name:\"), \"gapright 5\");\n        pnl4.add(new JTextField(10), \"gapbottom 20, gaptop 20\");\n\n        base.add(pnl1);\n        base.add(pnl2);\n        base.add(pnl3);\n        base.add(pnl4);\n\n        pack();\n    }\n\n    public static void main(String[] args) {\n\n        EventQueue.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                MigLayoutGaps2 ex = new MigLayoutGaps2();\n                ex.setVisible(true);\n            }\n        });\n    }\n}\n</code></pre>\n\n<p>We have four panels in the layout. Each of this panels has a <code>MigLayout</code> manager.</p>\n\n<pre><code>JPanel base = new JPanel(new MigLayout(\"flowy, ins 30, gap 15\"));\n</code></pre>\n\n<p>This line creates container insets and vertical gaps between panels.</p>\n\n<pre><code>pnl1.setLayout(new MigLayout(\"gap 5 5, ins 10, wrap 3\"));\n</code></pre>\n\n<p>Here we apply gaps for the whole grid structure and also set container gaps.</p>\n\n<pre><code>pnl2.setLayout(new MigLayout(\"wrap 3\", \"[]10[]\"));\n</code></pre>\n\n<p>This line creates gaps between columns.</p>\n\n<pre><code>pnl3.setLayout(new MigLayout(\"wrap\", \"\", \"[]15[]\"));\n</code></pre>\n\n<p>Row gaps are defined with this code.</p>\n\n<pre><code>pnl4.add(new JLabel(\"Name:\"), \"gapright 5\");\npnl4.add(new JTextField(10), \"gapbottom 20, gaptop 20\");\n</code></pre>\n\n<p>Finally, it is possible to create gaps between individual components.</p>\n\n<p><img src=\"http://i.stack.imgur.com/tfA8d.png\" alt=\"Gaps\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://www.jgoodies.com/freeware/libraries/forms/\" rel=\"nofollow\">JGoodies <strong>FormLayout</strong>.</a>  </p>\n\n<p>Author Karsten Lentzsch has a collection of <a href=\"http://www.jgoodies.com/downloads/articles-and-presentations/\" rel=\"nofollow\">presentations</a> on UI design.   In particular <a href=\"http://www.jgoodies.com/download/presentations/Swing%20with%20Style.pdf\" rel=\"nofollow\">this PDF</a> speaks to the need for aesthetic whitespace.  Adding meaningful space while also paying attention to clutter separates the wheat from the chaff.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Thats because the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextInt%28%29\"><code>Scanner#nextInt</code></a> method does not consume the <em>last newline</em> character of your input, and thus that <em>newline</em> is consumed in the next call to <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#nextLine%28%29\"><code>Scanner#nextLine</code></a></p>\n\n<p><strong>Workaround:</strong></p>\n\n<ul>\n<li><p>Either fire a blank <code>Scanner#nextLine</code> call after <code>Scanner#nextInt</code> to consume rest of that line including <em>newline</em> </p>\n\n<pre><code>int option = input.nextInt();\ninput.nextLine();  // Consume newline left-over\nString str1 = input.nextLine();\n</code></pre></li>\n<li><p>Or, it would be even better, if you read the input through <code>Scanner#nextLine</code> and convert your input to integer using <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#parseInt(java.lang.String)\"><code>Integer#parseInt(String)</code></a> method.</p>\n\n<pre><code>int option = 0;\ntry {\n    option = Integer.parseInt(input.nextLine());\n} catch (NumberFormatException e) {\n    e.printStackTrace();\n}\nString str1 = input.nextLine();\n</code></pre></li>\n</ul>\n\n<p>You will encounter the similar behaviour when you use <code>Scanner#nextLine</code> after <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#next%28%29\"><code>Scanner#next()</code></a> or any <code>Scanner#nextFoo</code> method (except <code>nextLine</code> itself).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The problem is with the <strong>input.nextInt()</strong> command it only reads the int value. So when you continue reading with input.nextLine() you receive the \"\\n\" Enter key. So to skip this you have to add the <strong>input.nextLine()</strong>. Hope this should be clear now.</p>\n\n<p>Try it like that:</p>\n\n<pre><code>   System.out.print(\"Insert a number: \");\n   int number = input.nextInt();\n   input.nextLine(); // This line you have to add (It consumes the \\n character)\n   System.out.print(\"Text1: \");\n   String text1 = input.nextLine();\n   System.out.print(\"Text2: \");\n   String text2 = input.nextLine();\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's because when you enter a number then press <kbd>Enter</kbd>, <code>input.nextInt()</code> consumes only the number, not the \"end of line\". When <code>input.nextLine()</code> executes, it consumes the \"end of line\" still in the buffer from the first input.</p>\n\n<p>Instead, use <code>input.nextLine()</code> immediately after <code>input.nextInt()</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There seem to be many questions about this issue with <code>java.util.Scanner</code>. I think a more readable/idiomatic solution would be to call <code>scanner.skip(\"[\\r\\n]+\")</code> to drop any newline characters after calling <code>nextInt()</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It does that because <code>input.nextInt();</code> doesn't capture the newline. you could do like the others proposed by adding an <code>input.nextLine();</code> underneath.<br>\nAlternatively you can do it C# style and parse a nextLine to an integer like so:  </p>\n\n<pre><code>int number = Integer.parseInt(input.nextLine()); \n</code></pre>\n\n<p>Doing this works just as well, and it saves you a line of code.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Why not use a new Scanner for every reading? Like below. With this approach you will not confront your problem.</p>\n\n<pre><code>int i = new Scanner(System.in).nextInt();\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Instead of <code>input.nextLine()</code> use <code>input.next()</code>, that should solve the problem.</p>\n\n<p>Modified code:</p>\n\n<pre><code>public static Scanner input = new Scanner(System.in);\n\npublic static void main(String[] args)\n{\n    System.out.print(\"Insert a number: \");\n    int number = input.nextInt();\n    System.out.print(\"Text1: \");\n    String text1 = input.next();\n    System.out.print(\"Text2: \");\n    String text2 = input.next();\n}\n</code></pre>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Nested Layout Example</h1>\n\n<p>The Java Tutorial has comprehensive information on using layout managers. See the <a href=\"http://download.oracle.com/javase/tutorial/uiswing/layout/index.html\">Laying Out Components Within a Container</a> lesson for further details.</p>\n\n<p>One aspect of layouts that is <em>not</em> covered well by the tutorial is that of nested layouts, putting one layout inside another to get complex effects.</p>\n\n<p>The following code puts a variety of components into a frame to demonstrate how to use nested layouts.  All the layouts that are explicitly set are shown as a titled-border for the panel on which they are used.</p>\n\n<p>Notable aspects of the code are:</p>\n\n<ul>\n<li>There is a combo-box to change PLAF (Pluggable Look and Feel) at run-time.</li>\n<li>The GUI is expandable to the user's need.</li>\n<li>The image in the bottom of the split-pane is centered in the scroll-pane.</li>\n<li>The label instances on the left are dynamically added using the button.</li>\n</ul>\n\n<h3>Nimbus PLAF</h3>\n\n<p><img src=\"http://i.stack.imgur.com/RljPH.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with Nimbus PLAF\"></p>\n\n<h2>NestedLayoutExample.java</h2>\n\n<pre><code>import java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableModel;\nimport javax.swing.border.TitledBorder;\n\n/** A short example of a nested layout that can change PLAF at runtime.\nThe TitledBorder of each JPanel shows the layouts explicitly set.\n@author Andrew Thompson\n@version 2011-04-12 */\nclass NestedLayoutExample {\n\n    public static void main(String[] args) {\n\n        Runnable r = new Runnable() {\n\n            public void run() {\n                final JFrame frame = new JFrame(\"Nested Layout Example\");\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n                final JPanel gui = new JPanel(new BorderLayout(5,5));\n                gui.setBorder( new TitledBorder(\"BorderLayout(5,5)\") );\n\n                //JToolBar tb = new JToolBar();\n                JPanel plafComponents = new JPanel(\n                    new FlowLayout(FlowLayout.RIGHT, 3,3));\n                plafComponents.setBorder(\n                    new TitledBorder(\"FlowLayout(FlowLayout.RIGHT, 3,3)\") );\n\n                final UIManager.LookAndFeelInfo[] plafInfos =\n                    UIManager.getInstalledLookAndFeels();\n                String[] plafNames = new String[plafInfos.length];\n                for (int ii=0; ii&lt;plafInfos.length; ii++) {\n                    plafNames[ii] = plafInfos[ii].getName();\n                }\n                final JComboBox plafChooser = new JComboBox(plafNames);\n                plafComponents.add(plafChooser);\n\n                final JCheckBox pack = new JCheckBox(\"Pack on PLAF change\", true);\n                plafComponents.add(pack);\n\n                plafChooser.addActionListener( new ActionListener(){\n                    public void actionPerformed(ActionEvent ae) {\n                        int index = plafChooser.getSelectedIndex();\n                        try {\n                            UIManager.setLookAndFeel(\n                                plafInfos[index].getClassName() );\n                            SwingUtilities.updateComponentTreeUI(frame);\n                            if (pack.isSelected()) {\n                                frame.pack();\n                                frame.setMinimumSize(frame.getSize());\n                            }\n                        } catch(Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                } );\n\n                gui.add(plafComponents, BorderLayout.NORTH);\n\n                JPanel dynamicLabels = new JPanel(new BorderLayout(4,4));\n                dynamicLabels.setBorder(\n                    new TitledBorder(\"BorderLayout(4,4)\") );\n                gui.add(dynamicLabels, BorderLayout.WEST);\n\n                final JPanel labels = new JPanel(new GridLayout(0,2,3,3));\n                labels.setBorder(\n                    new TitledBorder(\"GridLayout(0,2,3,3)\") );\n\n                JButton addNew = new JButton(\"Add Another Label\");\n                dynamicLabels.add( addNew, BorderLayout.NORTH );\n                addNew.addActionListener( new ActionListener(){\n\n                    private int labelCount = 0;\n\n                    public void actionPerformed(ActionEvent ae) {\n                        labels.add( new JLabel(\"Label \" + ++labelCount) );\n                        frame.validate();\n                    }\n                } );\n\n                dynamicLabels.add( new JScrollPane(labels), BorderLayout.CENTER );\n\n                String[] header = {\"Name\", \"Value\"};\n                String[] a = new String[0];\n                String[] names = System.getProperties().\n                    stringPropertyNames().toArray(a);\n                String[][] data = new String[names.length][2];\n                for (int ii=0; ii&lt;names.length; ii++) {\n                    data[ii][0] = names[ii];\n                    data[ii][1] = System.getProperty(names[ii]);\n                }\n                DefaultTableModel model = new DefaultTableModel(data, header);\n                JTable table = new JTable(model);\n                try {\n                    // 1.6+\n                    table.setAutoCreateRowSorter(true);\n                } catch(Exception continuewithNoSort) {\n                }\n                JScrollPane tableScroll = new JScrollPane(table);\n                Dimension tablePreferred = tableScroll.getPreferredSize();\n                tableScroll.setPreferredSize(\n                    new Dimension(tablePreferred.width, tablePreferred.height/3) );\n\n                JPanel imagePanel = new JPanel(new GridBagLayout());\n                imagePanel.setBorder(\n                    new TitledBorder(\"GridBagLayout()\") );\n\n                BufferedImage bi = new BufferedImage(\n                    200,200,BufferedImage.TYPE_INT_ARGB);\n                Graphics2D g = bi.createGraphics();\n                GradientPaint gp = new GradientPaint(\n                    20f,20f,Color.red, 180f,180f,Color.yellow);\n                g.setPaint(gp);\n                g.fillRect(0,0,200,200);\n                ImageIcon ii = new ImageIcon(bi);\n                JLabel imageLabel = new JLabel(ii);\n                imagePanel.add( imageLabel, null );\n\n                JSplitPane splitPane = new JSplitPane(\n                    JSplitPane.VERTICAL_SPLIT,\n                    tableScroll,\n                    new JScrollPane(imagePanel));\n                gui.add( splitPane, BorderLayout.CENTER );\n\n                frame.setContentPane(gui);\n\n                frame.pack();\n\n                frame.setLocationRelativeTo(null);\n                try {\n                    // 1.6+\n                    frame.setLocationByPlatform(true);\n                    frame.setMinimumSize(frame.getSize());\n                } catch(Throwable ignoreAndContinue) {\n                }\n\n                frame.setVisible(true);\n            }\n        };\n        SwingUtilities.invokeLater(r);\n    }\n}\n</code></pre>\n\n<h2>Other Screen Shots</h2>\n\n<h3>Windows PLAF</h3>\n\n<p><img src=\"http://i.stack.imgur.com/fHnCI.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with Windows PLAF\"></p>\n\n<h3>Mac OS X Aqua PLAF</h3>\n\n<p><img src=\"http://i.stack.imgur.com/Jaqap.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with Aqua PLAF\"></p>\n\n<h3>Ubuntu GTK+ PLAF</h3>\n\n<p><img src=\"http://i.stack.imgur.com/521zz.png\" width=\"681\" height=\"580\" title=\"GUI screen shot with GTK+ PLAF\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Don't use a null layout.  Learn to use LayoutManagers:</p>\n\n<p><a href=\"http://download.oracle.com/javase/tutorial/uiswing/layout/using.html\">http://download.oracle.com/javase/tutorial/uiswing/layout/using.html</a></p>\n\n<p>LayoutManagers allow you to properly handle things window resizing or dynamic component counts.  They might seem intimidating at first, but they are worth the effort to learn.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are using null layout manager you always need to set the bounds of a component.\nThat is the problem in your case.</p>\n\n<p>You should do what everyone suggest here and go and use some layout manager believe they save time.\nGo and check out the tutorial in @jzd's post.</p>\n\n<p>Enjoy, Boro.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As I can remember, the <strong>null</strong> layout means an absolute position so it will be pretty hard you to count the X point for your JTable left upper corner location. But if you just want to have all panel components one by one you can use FlowLayout() manager as</p>\n\n<pre><code>JPanel panel=new JPanel(new FlowLayout());\npanel.add(new aComponent());\npanel.add(new bComponent());\npanel.add(new JTable());\n</code></pre>\n\n<p>or if you need to fill the panel you should use GridLayout() as...</p>\n\n<pre><code>int x=2,y=2;\nJPanel panel=new JPanel(new GridLayout(y,x));\npanel.add(new aComponent());\npanel.add(new bComponent());\npanel.add(new JTable());\n</code></pre>\n\n<p>Good luck</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>JTable should be added into the JScrollPane which actually should be added into the JPanel.</p>\n\n<p>The JPanel should have some layout manager.</p>\n\n<p>If you don't care about the precision of components size you can use pure BorderLayout and combine it with FlowLayout and GridLayout. if you need precision - use jgoodies FormLayout.</p>\n\n<p>The FormLayout is really tricky one, but you can play a little with WindowBuilder (which is embedded into Eclipse) and a look at the code it generates. It may look complicated but it is just an ignorance.</p>\n\n<p>Good luck. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can make use of the following code. To add JTable to JPanel.</p>\n\n<pre><code>JPanel panel = new JPanel();\nthis.setContentPane(panel);\npanel.setLayout(null);\nString data[][] = {{\"1.\", \"ABC\"}, {\"2.\", \"DEF\"}, {\"3.\", \"GHI\" }};\nString col[] = {\"Sr. No\", \"Name\"};\nJTable table = new JTable(data,col);\ntable.setBounds(100, 100, 100, 80);\npanel.add(table);\nsetVisible(true);\nsetSize(300,300);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>JPanel panel = new JPanel();\nJTable table = new JTable(rowData, colData);\nJScrollPane scrollPane = new JScrollPane(table);\npanel.add(scrollPane, BorderLayout.CENTER);\npanel.setSize(800, 150);\npanel.add(table);\npanel.setLocationRelativeTo(null);\npanel.setVisible(true);\n</code></pre>\n\n<p>Hope this helps.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>JFrame frame = new JFrame(\"Sample Frame\");\nframe.setSize(600, 600);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JPanel panel = new JPanel();\n        DefaultTableModel dfm = new DefaultTableModel(data, columnNames);\n        JTable table = new JTable(dfm);\n        JScrollPane scrollPane = new JScrollPane(table);\n    panel.add(scrollPane);\nframe.add(panel);\nframe.setVisible(true);\n</code></pre>\n\n<p>table model depends on your requirement</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li><blockquote>\n  <p>Should I completely avoid the use of those methods?</p>\n</blockquote>\n\n<p>Yes for application code.</p></li>\n<li><blockquote>\n  <p>The methods have been defined for a reason. So when should I use them? In which context? For what purposes?</p>\n</blockquote>\n\n<p>I don't know, personally I think of it as an API design accident. Slightly forced by compound components having special ideas about child sizes. \"Slightly\", because they should have implemented their needs with a custom LayoutManager.</p></li>\n<li><blockquote>\n  <p>What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution.)</p>\n</blockquote>\n\n<p>Some (incomplete, and unfortunately the links are broken due to migration of SwingLabs to java.net) technical reasons are for instance mentioned in the <a href=\"http://web.archive.org/web/20110614145256/http://wiki.java.net/twiki/bin/view/Javadesktop/SwingLabsImperialRules?TWIKISID=e1a6667476691b56753dc9b0744828c6#Do_not_use_component_setXXSize\">Rules (hehe)</a> or in the <a href=\"http://web.archive.org/web/20100207211337/http://www.jguru.com/faq/view.jsp?EID=237070\">link</a> @bendicott found in his/her comment to <a href=\"http://stackoverflow.com/questions/7074514/images-in-jtable-cells-off-by-one-pixel\">my answer</a>. Socially, posing tons of work onto your unfortunate fellow who has to maintain the code and has to track down a broken layout.</p></li>\n<li><blockquote>\n  <p>I don't think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout?</p>\n</blockquote>\n\n<p>Yes, there are LayoutManagers powerful enough to satisfy a very good approximation to \"all layout needs\". The big three are JGoodies FormLayout, MigLayout, DesignGridLayout. So no, in practice, you rarely write LayoutManagers except for simple highly specialized environments.</p></li>\n<li><blockquote>\n  <p>If the answer to 4 is \"yes\", won't this lead to a proliferation of LayoutManager classes which will become difficult to maintain? </p>\n</blockquote>\n\n<p>(The answer to 4 is \"no\".)</p></li>\n<li><blockquote>\n  <p>In a situation where I need to define proportions between children of a Component (for example, child 1 should use 10% of space, child 2 40%, child 3 50%), is it possible to achieve that without implementing a custom LayoutManager?</p>\n</blockquote>\n\n<p>Any of the Big-Three can, can't even GridBag (never bothered to really master, too much trouble for too little power).</p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A few heuristics:</p>\n\n<ul>\n<li><p>Don't use <code>set[Preferred|Maximum|Minimum]Size()</code> when you really mean to override <code>get[Preferred|Maximum|Minimum]Size()</code>, as might be done in creating your own component, shown <a href=\"http://stackoverflow.com/a/10110232/230513\">here</a>.</p></li>\n<li><p>Don't use <code>set[Preferred|Maximum|Minimum]Size()</code> when you could rely on a component's carefully overridden <code>getPreferred|Maximum|Minimum]Size</code>, as shown <a href=\"http://stackoverflow.com/questions/3174765/variable-layout-in-swing/3175280#3175280\">here</a> and below.</p></li>\n<li><p>Do use <code>set[Preferred|Maximum|Minimum]Size()</code> to derive post-<code>validate()</code> geometry, as shown below and <a href=\"http://stackoverflow.com/questions/3174765/variable-layout-in-swing/3175280#3175280\">here</a>.</p></li>\n<li><p>If a component has no preferred size, e.g. <code>JDesktopPane</code>, you may have to size the container, but any such choice is arbitrary. A comment may help clarify the intent.</p></li>\n<li><p>Consider alternate or custom layouts when you find that you would have to loop through many components to obtain derived sizes, as mentioned in these <a href=\"http://stackoverflow.com/questions/3174765/variable-layout-in-swing/3175280#3175280\">comments</a>.</p></li>\n</ul>\n\n<p><img src=\"http://i.stack.imgur.com/hYh36.png\" alt=\"enter image description here\"></p>\n\n<pre><code>import java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.GridLayout;\nimport java.awt.KeyboardFocusManager;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JComponent;\nimport javax.swing.JDesktopPane;\nimport javax.swing.JFrame;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\n\n/**\n * @see http://stackoverflow.com/questions/7229226\n * @see http://stackoverflow.com/questions/7228843\n */\npublic class DesignTest {\n\n    private List&lt;JTextField&gt; list = new ArrayList&lt;JTextField&gt;();\n    private JPanel panel = new JPanel();\n    private JScrollPane sp = new JScrollPane(panel);\n\n    public static void main(String args[]) {\n        EventQueue.invokeLater(new Runnable() {\n\n            @Override\n            public void run() {\n                DesignTest id = new DesignTest();\n                id.create(\"My Project\");\n            }\n        });\n    }\n\n    private void addField(String name) {\n        JTextField jtf = new JTextField(16);\n        panel.add(new JLabel(name, JLabel.LEFT));\n        panel.add(jtf);\n        list.add(jtf);\n    }\n\n    private void create(String strProjectName) {\n        panel.setLayout(new GridLayout(0, 1));\n        addField(\"First Name:\");\n        addField(\"Last Name:\");\n        addField(\"Address:\");\n        addField(\"City:\");\n        addField(\"Zip Code:\");\n        addField(\"Phone:\");\n        addField(\"Email Id:\");\n        KeyboardFocusManager.getCurrentKeyboardFocusManager()\n            .addPropertyChangeListener(\"permanentFocusOwner\",\n            new FocusDrivenScroller(panel));\n        // Show half the fields\n        sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        sp.validate();\n        Dimension d = sp.getPreferredSize();\n        d.setSize(d.width, d.height / 2);\n        sp.setPreferredSize(d);\n\n        JInternalFrame internaFrame = new JInternalFrame();\n        internaFrame.add(sp);\n        internaFrame.pack();\n        internaFrame.setVisible(true);\n\n        JDesktopPane desktopPane = new JDesktopPane();\n        desktopPane.add(internaFrame);\n\n        JFrame frmtest = new JFrame();\n        frmtest.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frmtest.add(desktopPane);\n        frmtest.pack();\n        // User's preference should be read from java.util.prefs.Preferences\n        frmtest.setSize(400, 300);\n        frmtest.setLocationRelativeTo(null);\n        frmtest.setVisible(true);\n        list.get(0).requestFocusInWindow();\n    }\n\n    private static class FocusDrivenScroller implements PropertyChangeListener {\n\n        private JComponent parent;\n\n        public FocusDrivenScroller(JComponent parent) {\n            this.parent = parent;\n        }\n\n        @Override\n        public void propertyChange(PropertyChangeEvent evt) {\n            Component focused = (Component) evt.getNewValue();\n            if (focused != null\n                &amp;&amp; SwingUtilities.isDescendingFrom(focused, parent)) {\n                parent.scrollRectToVisible(focused.getBounds());\n            }\n        }\n    }\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>Should I completely avoid the use of those methods?</p>\n</blockquote>\n\n<p>No, there is no formal evidence to suggest calling or overriding these methods is not allowed. In fact Oracle says these methods are used for giving size hints: <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/layout/using.html#sizealignment\">http://docs.oracle.com/javase/tutorial/uiswing/layout/using.html#sizealignment</a>.</p>\n\n<p>They may also be overriden (which is the best practice for Swing) when <em>extending</em> a Swing component (rather then calling the method on the custom component instance)</p>\n\n<p>Most importatly no matter how you specify your component's size, be sure that your component's container uses a layout manager that respects the requested size of the component. </p>\n\n<blockquote>\n  <p>The methods have been defined for a reason. So when should I use them?\n  In which context? For what purposes?</p>\n</blockquote>\n\n<p>When you need to provide customized size hints to the containers Layout manager, so that the component will be laid out well</p>\n\n<blockquote>\n  <p>What exactly are the negative consequences of using those methods? (I\n  can only think adding portability between systems with different\n  screen resolution).</p>\n</blockquote>\n\n<ul>\n<li><p>Many layout managers do not pay attention to a component's requested maximum size. However, <code>BoxLayout</code> and <code>SpringLayout</code> do. Furthermore, <code>GroupLayout</code> provides the ability to set the minimum, preferred or maximum size explicitly, without touching the component.</p></li>\n<li><p>Make sure that you really need to set the component's exact size. Each Swing component has a different preferred size, depending on the font it uses and the look and feel. Thus having a set size might produce varied <em>looks</em> of the UI on different Systems</p></li>\n<li><p>sometimes problems can be encountered with <code>GridBagLayout</code> and text fields, wherein if the size of the container is smaller than the preferred size, the minimum size gets used, which can cause text fields to shrink quite substantially.</p></li>\n<li><p><code>JFrame</code> does not enforce overriden <code>getMinimumSize()</code> only calling <code>setMinimumSize(..)</code> on its works</p></li>\n</ul>\n\n<blockquote>\n  <p>I don't think any LayoutManager can exactly satisfy all desired layout\n  needs. Do I really need to implement a new LayoutManager for every\n  little variation on my layout ?</p>\n</blockquote>\n\n<p>If by implementing you mean using then yes. Not one <code>LayoutManger</code> can handle everything, each <code>LayoutManager</code> has its pros and cons thus each can be used together to produce the final layout.</p>\n\n<p><strong>Reference:</strong></p>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/layout/problems.html\">http://docs.oracle.com/javase/tutorial/uiswing/layout/problems.html</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are having trouble with layouts in Java Swing, then I can highly recommend the JGoodies <code>FormLayout</code> provided freely as part of the Forms freeware library by Karsten Lentzsch <a href=\"http://www.jgoodies.com/freeware/forms/\">here</a>.</p>\n\n<p>This very popular layout manager is extremely flexible, allowing for very polished Java UIs to be developed.</p>\n\n<p>You'll find Karsten's documentation in this <a href=\"http://www.jgoodies.com/articles/forms.pdf\">pdf</a>, and some rather good documentation from google <a href=\"http://code.google.com/javadevtools/wbpro/layoutmanagers/swing/jgoodies_formlayout.html\">here</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>In a situation where I need to define proportions between children of a Component (child 1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom layout manager?</p>\n</blockquote>\n\n<p>Maybe <code>GridBagLayout</code> would satisfy your needs. Besides that, there's a ton of layout managers on the web, and I bet there's one that fits your requirements.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are a lot of good answers here but I want to add a little more about the reasons <em>why</em> you should normally avoid these (the question just came up again in a duplicate topic):</p>\n\n<p>With few exceptions, if you are using these methods you are probably fine-tuning your GUI to look good on a specific look-and-feel (and with your system-specific settings, e.g. your preferred desktop font, etc.). The methods themselves aren't inherently evil, but the typical reasons for using them <em>are</em>. As soon as you start tuning pixel positions and sizes in a layout you run the risk of your GUI breaking (or at minimum, looking bad), on other platforms.</p>\n\n<p>As an example of this, try changing your application's default look-and-feel. Even just with the options available on your platform, you may be surprised at how poorly the results can be rendered.</p>\n\n<p>So, in the name of keeping your GUI functional and nice-looking on all platforms (remember, one of the major benefits of Java is its cross-platformness), you should rely on layout managers, etc., to automatically adjust the sizes of your components so that it renders correctly outside of your specific development environment.</p>\n\n<p>All that said, you can certainly conceive of situations where these methods are justified. Again, they aren't inherently evil, but their usage is normally a <strong>big</strong> red flag indicating potential GUI issues. Just make sure you are aware of the high potential for complications if/when you use them, and always try and think if there is another look-and-feel-independent solution to your problems -- more often than not you will find that these methods are not necessary.</p>\n\n<p>By the way, if you find yourself getting frustrated with standard layout managers, there are a lot of good free, open-source third-party ones, for example <a href=\"http://www.jgoodies.com/freeware/libraries/forms/\">JGoodies' <code>FormLayout</code></a>, or <a href=\"http://www.miglayout.com/\"><code>MigLayout</code></a>. Some GUI builders even have built-in support for third-party layout managers -- Eclipse's WindowBuilder GUI editor, for example, ships with support for <code>FormLayout</code> and <code>MigLayout</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>These methods are poorly understood by most people. You should absolutely not ignore these methods. It is up to the layout manager if they honor these methods. This page has a table that shows which layout managers honor which of those methods:</p>\n\n<p><a href=\"http://thebadprogrammer.com/swing-layout-manager-sizing/\">http://thebadprogrammer.com/swing-layout-manager-sizing/</a></p>\n\n<p>I have been writing Swing code for 8+ years and the layout managers included in the JDK have always served my needs. I have never needed a 3rd party layout manager to achieve my layouts.</p>\n\n<p>I will say that you shouldn't try to give the layout manager hints with these methods until you are sure you need them. Do your layout without giving any sizing hints (i.e. let the layout manager do its job) and then you can make minor corrections if you need to.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>This answer describes the process of retrieving the stack trace. Already have the stack trace? Read up on stack traces in \"<a href=\"http://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors\">What is a stack trace, and how can I use it to debug my application errors?</a>\"</em></p>\n\n<h1>The Problem</h1>\n\n<p>Your application quit because an uncaught <code>RuntimeException</code> was thrown.<br>\nThe most common of these is the <code>NullPointerException</code>.</p>\n\n<h1>How to solve it?</h1>\n\n<p>Every time an Android application crashes (or any Java application for that matter), a <code>Stack trace</code> is written to the console (in this case, logcat). This stack trace contains vital information for solving your problem.</p>\n\n<h2>Android Studio</h2>\n\n<p><img src=\"http://i.stack.imgur.com/ZL3Y8.png\" alt=\"Finding the stack trace in Android Studio\"></p>\n\n<p>In the bottom bar of the window, click on the <code>Android</code> button. Alternatively, you can press <kbd>alt</kbd>+<kbd>6</kbd>. Make sure your emulator or device is selected in the <code>Devices</code> panel. Next, try to find the stack trace, which is shown in red. There may be a lot of stuff logged into logcat, so you may need to scroll a bit. An easy way to find the stack trace is to clear the logcat (using the recycle bin on the right), and let the app crash again.</p>\n\n<h2>Eclipse</h2>\n\n<p><img src=\"http://i.stack.imgur.com/6qdhO.png\" alt=\"Finding the stack trace in Eclipse\"></p>\n\n<p>In the top right corner, click the <code>DDMS</code> button. If it is not there, you might need to add it first using the <code>Open Perspective</code> button to the left of the <code>Java</code> button. You will find the logcat pane at the bottom. First, make sure your device is selected in the topleft <code>devices</code> panel. Next, try to find the stack trace, which is shown in red. Again, there may be a lot of stuff logged into logcat, so you may need to scroll a bit. An easy way to find the stack trace here is to clear the logcat (using the <code>clear log</code> button on the top right), and let the app crash again. You should also click on the package name of your app, if it is not already selected. This will filter out only the log message made by your app.</p>\n\n<h1>I have found the stack trace, now what?</h1>\n\n<p>Yay! You're halfway to solving your problem.<br>\nYou only need to find out what exactly made your application crash, by analyzing the stack trace.</p>\n\n<p>Read up on stack traces in \"<a href=\"http://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors\">What is a stack trace, and how can I use it to debug my application errors?</a>\"</p>\n\n<h1>I still can't solve my problem!</h1>\n\n<p>If you've found your <code>Exception</code> and the line where it occurred, and still cannot figure out how to fix it, don't hesitate to ask a question on StackOverflow.  </p>\n\n<p>Try to be as concise as possible: post the stack trace, and the <em>relevant</em> code (e.g. a few lines up to the line which threw the <code>Exception</code>).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use Google's adb tool to get logcat file to analyze the issue.</p>\n\n<pre><code>adb logcat &gt; logcat.txt\n</code></pre>\n\n<p>open logcat.txt file and search for your application name. There should be information why it failed.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>first you check which point your app has crashed(Unfortunately, MyApp has stopped.) for this you can use Log.e(\"TAG\",\"Message\"); using this line you can see you app log in logcat.\nAfter that you find which point your app has stopped its very easy to solve at your side. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>check your logcat message. \nand see your menifest file. there should be something missing like defining the activity, user permission, etc.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have to check the <code>Stack trace</code></p>\n\n<p><strong>How to do that?</strong></p>\n\n<p>on Your IDE Check the windows form LOGCAT </p>\n\n<p>If you cant see the logcat windows go to this path and open it </p>\n\n<pre><code>window-&gt;show view-&gt;others-&gt;Android-&gt;Logcat\n</code></pre>\n\n<p>if you are using Google-Api go to this path </p>\n\n<p><em>adb logcat &gt; logcat.txt</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just check the error in log cat. </p>\n\n<p>You get the log cat option from in eclipse:</p>\n\n<blockquote>\n  <p>window-&gt;show view-&gt;others-&gt;Android-&gt;Logcat</p>\n</blockquote>\n\n<p>Log cat contains error.</p>\n\n<p>Other wise you can also check the error by executing an application in debug mode.\nFirstly set breakpoint after that by doing:</p>\n\n<blockquote>\n  <p>right click on project-&gt;debug as-&gt;Android application</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also get this error message on its own, without any stack trace or any further error message.</p>\n\n<p>In this case you need to make sure your Android manifest is configured correctly (including any manifest merging happening from a library and any activity that would come from a library), and pay particular attention to the first activity displayed in your application in your manifest files.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use any of these tools:</p>\n\n<ol>\n<li>adb logcat</li>\n<li>eclipse logcat (If not visible in eclipse, Go to Windows-&gt;Show View-&gt;Others-&gt;Android-&gt;LogCat)</li>\n<li>Android Debug Monitor or Android Device Monitor(type command monitor or open through UI)</li>\n<li>Android Studio</li>\n</ol>\n\n<p>I suggest to use Android Debug Monitor, it is good. Because eclipse hangs when too many logs are there, and through adb logcat filter and all difficult.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Developer mode in emulator</strong></p>\n\n<p>Inside emulator I had selected 'Developer option' and continued. <em>It will just avoids you from exiting from app</em>. Developer mode activates and user can test all conditions inside app. </p>\n\n<p>Log cat provides you which type of error occurred and try to solve that</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>The use of <em>scriptlets</em> (those <code>&lt;% %&gt;</code> things) in <a href=\"http://stackoverflow.com/tags/jsp/info\">JSP</a> is indeed highly discouraged since the birth of <em>taglibs</em> (like <a href=\"http://stackoverflow.com/tags/jstl/info\">JSTL</a>) and <a href=\"http://stackoverflow.com/tags/el/info\">EL</a> (<a href=\"http://stackoverflow.com/tags/el/info\">Expression Language</a>, those <code>${}</code> things) over a decade ago.</p>\n\n<p>The major disadvantages of <em>scriptlets</em> are:</p>\n\n<ol>\n<li><strong>Reusability:</strong> you can't reuse scriptlets.</li>\n<li><strong>Replaceability:</strong> you can't make scriptlets abstract.</li>\n<li><strong>OO-ability:</strong> you can't make use of inheritance/composition.</li>\n<li><strong>Debuggability:</strong> if scriptlet throws an exception halfway, all you get is a blank page.</li>\n<li><strong>Testability:</strong> scriptlets are not unit-testable.</li>\n<li><strong>Maintainability:</strong> per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</li>\n</ol>\n\n<p><strike>Sun</strike> Oracle itself also recommends in the <a href=\"http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html\">JSP coding conventions</a> to avoid use of <em>scriptlets</em> whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</p>\n\n<blockquote>\n  <p>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help <strong>reduce the need for JSP scriptlets</strong> in your pages. Pages that use JSTL are, in general, easier to read and maintain. </p>\n  \n  <p>...</p>\n  \n  <p>Where possible, <strong>avoid JSP scriptlets</strong> whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but deemphasizes the use of scriptlets).</p>\n  \n  <p>...</p>\n  \n  <p>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, <strong>JSP scriptlets should not be used</strong> for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called \"value objects\") returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>How to replace <em>scriptlets</em> entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:</strong></p>\n\n<ul>\n<li><p>If you want to invoke the <strong>same</strong> Java code on <em>every</em> request, less-or-more regardless of the requested page, e.g. checking if an user is logged in, then implement a <a href=\"http://stackoverflow.com/tags/servlet-filters/info\">filter</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29\"><code>doFilter()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {\n    if (((HttpServletRequest) request).getSession().getAttribute(\"user\") == null) {\n        ((HttpServletResponse) response).sendRedirect(\"login\"); // Not logged in, redirect to login page.\n    } else {\n        chain.doFilter(request, response); // Logged in, just continue request.\n    }\n}\n</code></pre>\n\n<p>When mapped on an appropriate <code>&lt;url-pattern&gt;</code> covering the JSP pages of interest, then you don't need to copypaste the same piece of code over all JSP pages.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>preprocess</strong> a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a <a href=\"http://stackoverflow.com/tags/servlets/info\">servlet</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doGet()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        List&lt;Product&gt; products = productService.list(); // Obtain all products.\n        request.setAttribute(\"products\", products); // Store products in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/products.jsp\").forward(request, response); // Forward to JSP page to display them in a HTML table.\n    } catch (SQLException e) {\n        throw new ServletException(\"Retrieving products failed!\", e);\n    }\n}\n</code></pre>\n\n<p>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <code>&lt;error-page&gt;</code> in <code>web.xml</code>.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>postprocess</strong> a request, e.g. processing a form submit, then implement a <a href=\"http://stackoverflow.com/tags/servlets/info\">servlet</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doPost()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String username = request.getParameter(\"username\");\n    String password = request.getParameter(\"password\");\n    User user = userService.find(username, password);\n\n    if (user != null) {\n        request.getSession().setAttribute(\"user\", user); // Login user.\n        response.sendRedirect(\"home\"); // Redirect to home page.\n    } else {\n        request.setAttribute(\"message\", \"Unknown username/password. Please retry.\"); // Store error message in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/login.jsp\").forward(request, response); // Forward to JSP page to redisplay login form with error.\n    }\n}\n</code></pre>\n\n<p>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using <code>${message}</code> in <a href=\"http://stackoverflow.com/tags/el/info\">EL</a>), or just taking to the desired target page in case of success.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>control</strong> the execution plan and/or the destination of the request and the response, then implement a <a href=\"http://stackoverflow.com/tags/servlets/info\">servlet</a> according the <a href=\"http://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297\">MVC's Front Controller Pattern</a>. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        Action action = ActionFactory.getAction(request);\n        String view = action.execute(request, response);\n\n        if (view.equals(request.getPathInfo().substring(1)) {\n            request.getRequestDispatcher(\"/WEB-INF/\" + view + \".jsp\").forward(request, response);\n        } else {\n            response.sendRedirect(view);\n        }\n    } catch (Exception e) {\n        throw new ServletException(\"Executing action failed.\", e);\n    }\n}\n</code></pre>\n\n<p>Or just adopt a MVC framework like <a href=\"http://stackoverflow.com/tags/jsf/info\">JSF</a>, <a href=\"http://stackoverflow.com/tags/spring-mvc/info\">Spring MVC</a>, <a href=\"http://stackoverflow.com/tags/wicket/info\">Wicket</a>, etc so that you end up with just a JSP/Facelets page and a Javabean class without the need for a custom servlet.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>control the flow</strong> inside a JSP page, then you need to grab an (existing) flow control taglib like <a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html\">JSTL core</a>. E.g. displaying <code>List&lt;Product&gt;</code> in a table:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;\n...\n&lt;table&gt;\n    &lt;c:forEach items=\"${products}\" var=\"product\"&gt;\n        &lt;tr&gt;\n            &lt;td&gt;${product.name}&lt;/td&gt;\n            &lt;td&gt;${product.description}&lt;/td&gt;\n            &lt;td&gt;${product.price}&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/c:forEach&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>With XML-style tags which fits nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (<em>\"Where the heck does this closing brace belong to?\"</em>). An easy aid is to configure your web application to throw an exception whenever <em>scriptlets</em> are still been used by adding the following piece to <code>web.xml</code>:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;jsp-config&gt;\n    &lt;jsp-property-group&gt;\n        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n        &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;\n    &lt;/jsp-property-group&gt;\n&lt;/jsp-config&gt;\n</code></pre>\n\n<p>In <a href=\"http://stackoverflow.com/tags/facelets/info\">Facelets</a>, the successor of JSP, which is part of the Java EE provided MVC framework <a href=\"http://stackoverflow.com/tags/jsf/info\">JSF</a>, it is already <strong>not</strong> possible to use <em>scriptlets</em>. This way you're automatically forced to do things \"the right way\".</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>access and display</strong> \"backend\" data inside a JSP page, then you need to use EL (Expression Language), those <code>${}</code> things. E.g. redisplaying submitted input values:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input type=\"text\" name=\"foo\" value=\"${param.foo}\" /&gt;\n</code></pre>\n\n<p>The <code>${param.foo}</code> displays the outcome of <code>request.getParameter(\"foo\")</code>.</p>\n\n<hr></li>\n<li><p>If you want to invoke some <strong>utility</strong> Java code directly in the JSP page (typically <code>public static</code> methods), then you need to define them as EL functions. There's a standard <a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html\">functions taglib</a> in JSTL, but <a href=\"http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq\">you can also easily create functions yourself</a>. Here's an example how JSTL <code>fn:escapeXml</code> is useful to prevent <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">XSS</a> <a href=\"http://ha.ckers.org/xss.html\">attacks</a>.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %&gt;\n...\n&lt;input type=\"text\" name=\"foo\" value=\"${fn:escapeXml(param.foo)}\" /&gt;\n</code></pre>\n\n<p>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in <strong>every</strong> webapplication you develop. The problem of <em>scriptlets</em> is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</p></li>\n</ul>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp/2097732#2097732\">What's the difference between JSP, Servlet and JSF?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3106452/java-servlet-instantiation-and-session-variables/3106909#3106909\">How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5003142/jsp-using-mvc-and-jdbc\">Basic MVC example with JSP, Servlet and JDBC</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/\">Design patterns in Java web applications</a></li>\n<li><a href=\"http://balusc.blogspot.com/2010/01/hidden-features-of-jspservlet.html\">Hidden features of JSP/Servlet</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>As a Safeguard: Disable Scriptlets For Good</strong></p>\n\n<p>As <a href=\"http://stackoverflow.com/questions/2188706/how-to-avoid-using-scriptlets-in-my-jsp-page\">another question</a> is discussing, you can and always should disable scriptlets in your <code>web.xml</code> web application descriptor.</p>\n\n<p>I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The <code>web.xml</code> settings look like this:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;jsp-config&gt;\n  &lt;jsp-property-group&gt;\n    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n     &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;\n  &lt;/jsp-property-group&gt;\n&lt;/jsp-config&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://java.sun.com/products/jsp/jstl/\">JSTL</a> offers tags for conditionals, loops, sets, gets, etc. For example:</p>\n\n<pre><code>&lt;c:if test=\"${someAttribute == 'something'}\"&gt;\n   ...\n&lt;/c:if&gt;\n</code></pre>\n\n<p>JSTL works with request attributes - they are most often set in the request by a Servlet, which <em>forwards</em> to the JSP.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm not sure if i get this correct. </p>\n\n<p>You should read something about MVC. <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html\">Spring MVC</a> &amp; <a href=\"http://struts.apache.org/2.1.8.1/index.html\">Struts 2</a> are the two most common solutions. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;\n&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;c:out value=\"${x + 1}\" /&gt;\n&lt;c:out value=\"${param.name}\" /&gt;\n// and so on\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are also component-based frameworks such as <strong>Wicket</strong> that generate a lot of the HTML for you.  The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in.  The result is almost empty-like HTML pages with typical HTML elements.  The downside is that there are a lot of components in the <strong>Wicket</strong> API to learn and some things can be difficult to achieve under those constraints.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.</p>\n\n<p>If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the <code>#{bean.method(argument)}</code> approach.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Wicket is also an alternative which completely separates java from html, so a designer and programmer can work together and on different sets of code with little understanding of each other.</p>\n\n<p>Look at Wicket.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In MVC Design pattern , jsp pages represents the View layer. embeding java code in jsp pages  is a considered such a bad  practice.\nyou can use <a href=\"http://www.oracle.com/technetwork/java/index-jsp-135995.html\">JSTL</a>  , <a href=\"http://freemarker.sourceforge.net/\">freeMarker</a>,<a href=\"http://velocity.apache.org/\">velocity</a> with jsp page as \"template engine\".\nThe data provioder to those Tags Depends on Frameworks That you are dealing with. Struts 2 and webwork as an implementation for MVC Pattern uses <a href=\"http://struts.apache.org/2.0.11.1/docs/ognl.html\">OGNL</a> \"very interesting technique to expose Beans Proprities to JSP Page\" </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>if you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page. </p>\n\n<pre><code>&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;%\n//instantiate a JSP controller\nMyController clr = new MyController(request, response);\n\n//process action if any\nclr.process(request);\n\n//process page forwaring if necessary\n\n//do all variable assignment here\nString showMe = clr.getShowMe();\n\n%&gt;\n\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form name=\"frm1\"&gt;\n&lt;p&gt;\n&lt;%= showMe %&gt;\n\n&lt;p&gt;\n&lt;% for(String str : clr.listOfStrings()) { %&gt;\n&lt;p&gt;\n&lt;%= str %&gt;\n\n&lt;% } %&gt;\n\n// and so on\n\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.</p>\n\n<p>And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>in order to avoid java code in JSP files java now provides tag libraries like JSTL also java has come up with JSF into which u can write all programming structures in the form of tags</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Learn to customize and write your own tags using JSTL</strong><br>\nNote that EL is <strong>EviL</strong> (runtime exceptions, refactoring)<br>\nWicket may be evil too (performance, toilsome for small apps or simple view tier)<br><br>\nexample from <em>java2s</em></p>\n\n<pre>\n\n    &lt;!-- this must be added to the web application's web.xml --&gt;\n\n    &lt;taglib&gt;\n      &lt;taglib-uri&gt;/java2s&lt;/taglib-uri&gt;\n      &lt;taglib-location&gt;/WEB-INF/java2s.tld&lt;/taglib-location&gt;\n    &lt;/taglib&gt;\n\n\n    // create File:java2s.tld in the /WEB-INF/\n    &lt;!DOCTYPE taglib\n      PUBLIC \"-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN\"\n       \"http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd\"&gt;\n\n        &lt;!-- a tab library descriptor --&gt;\n    &lt;taglib xmlns=\"http://java.sun.com/JSP/TagLibraryDescriptor\"&gt;\n      &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;\n      &lt;jsp-version&gt;1.2&lt;/jsp-version&gt;\n      &lt;short-name&gt;Java2s Simple Tags&lt;/short-name&gt;\n\n      &lt;!-- this tag manipulates its body content by converting it to upper case\n        --&gt;\n      &lt;tag&gt;\n        &lt;name&gt;bodyContentTag&lt;/name&gt;\n        &lt;tag-class&gt;com.java2s.BodyContentTag&lt;/tag-class&gt;\n        &lt;body-content&gt;JSP&lt;/body-content&gt;\n        &lt;attribute&gt;\n          &lt;name&gt;howMany&lt;/name&gt;\n        &lt;/attribute&gt;\n      &lt;/tag&gt;\n    &lt;/taglib&gt;\n\n\n    //compile the following code into WEB-INF\\classes\\com\\java2s\n    package com.java2s;\n\n    import java.io.IOException;\n    import javax.servlet.jsp.JspWriter;\n    import javax.servlet.jsp.tagext.BodyContent;\n    import javax.servlet.jsp.tagext.BodyTagSupport;\n\n    public class BodyContentTag extends BodyTagSupport\n    {\n      private int iterations, howMany;\n\n      public void setHowMany(int i)\n      {\n        this.howMany = i;\n      }\n\n      public void setBodyContent(BodyContent bc)\n      {\n        super.setBodyContent(bc);\n        System.out.println(\"BodyContent = '\" + bc.getString() + \"'\");\n      }\n\n      public int doAfterBody()\n      {\n        try \n        {    \n          BodyContent bodyContent = super.getBodyContent();\n          String      bodyString  = bodyContent.getString();\n          JspWriter   out         = bodyContent.getEnclosingWriter();\n\n          if ( iterations % 2 == 0 ) \n            out.print(bodyString.toLowerCase());\n          else\n            out.print(bodyString.toUpperCase());\n\n          iterations++;\n          bodyContent.clear(); // empty buffer for next evaluation\n        }\n        catch (IOException e) \n        {\n          System.out.println(\"Error in BodyContentTag.doAfterBody()\" + e.getMessage());\n          e.printStackTrace();\n        } // end of catch\n\n        int retValue = SKIP_BODY;\n\n        if ( iterations &lt; howMany ) \n          retValue = EVAL_BODY_AGAIN;\n\n        return retValue;\n      }\n    }\n    // start comcat and load the bodyContent.jsp in browser\n    &lt;%@ taglib uri=\"/java2s\" prefix=\"java2s\" %&gt;\n\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;A custom tag: body content&lt;/title&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        This page uses a custom tag manipulates its body content.\n        Here is its output:\n        &lt;ol&gt;\n          &lt;java2s:bodyContentTag howMany=\"3\"&gt;\n            &lt;li&gt;java2s.com&lt;/li&gt;\n          &lt;/java2s:bodyContentTag&gt;\n        &lt;/ol&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n\n\n</pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages</p>\n\n<p><strong>Create a master page called base.tag under your WEB-INF/tags with the following content</strong></p>\n\n<blockquote>\n<pre><code>&lt;%@tag description=\"Overall Page template\" pageEncoding=\"UTF-8\"%&gt;\n\n&lt;%@attribute name=\"title\" fragment=\"true\" %&gt;\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;  \n       &lt;jsp:invoke fragment=\"title\"&gt;&lt;/jsp:invoke&gt;\n    &lt;/title&gt;\n\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"page-header\"&gt;\n       ....\n    &lt;/div&gt;\n    &lt;div id=\"page-body\"&gt;\n      &lt;jsp:doBody/&gt;\n    &lt;/div&gt;\n    &lt;div id=\"page-footer\"&gt;\n      .....\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</blockquote>\n\n<p>On this mater page, I created a fragment called \"title\", so that in the child page, I could insert more codes into this place of the master page. Also, the tag <code>&lt;jsp:doBody/&gt;</code> will be replaced by the content of the child page </p>\n\n<p><strong>Create child page (child.jsp) in your WebContent folder:</strong></p>\n\n<blockquote>\n  \n\n<pre><code>&lt;%@ taglib prefix=\"t\" tagdir=\"/WEB-INF/tags\" %&gt;\n\n&lt;t:base&gt;\n    &lt;jsp:attribute name=\"title\"&gt; \n        &lt;bean:message key=\"hello.world\" /&gt;\n    &lt;/jsp:attribute&gt;\n\n    &lt;jsp:body&gt;\n    [Put your content of the child here]\n    &lt;/jsp:body&gt;   \n&lt;/t:base&gt;\n</code></pre>\n</blockquote>\n\n<p><code>&lt;t:base&gt;</code> is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag <code>&lt;jsp:body&gt;</code> here will replace the <code>&lt;jsp:doBody/&gt;</code> on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (<code>&lt;%= request.getParameter(\"name\") %&gt;</code> ...) and try to run this page, you will get a <code>JasperException because  Scripting elements ( &amp;lt;%!, &amp;lt;jsp:declaration, &amp;lt;%=, &amp;lt;jsp:expression, &amp;lt;%, &amp;lt;jsp:scriptlet ) are disallowed here</code>. Therefore, there is no way other people can include the evil code into the jsp file</p>\n\n<p><strong>Calling this page from your controller:</strong></p>\n\n<p>You can easily call the child.jsp file from your controller. This also works nice with the struts framework</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <strong><code>JSTL Tag libraries</code></strong> in JSP, that will work perfect.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just use the JSTL tag and EL expression.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A neat idea from the Python world are <em>Template attribute languages</em>; TAL was introduced by Zope (therefore a.k.a. \"Zope Page Templates\", ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one above example could look like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;table&gt;\n    &lt;tr tal:repeat=\"product products\"&gt;\n        &lt;td tal:content=\"product/name\"&gt;Example product&lt;/td&gt;\n        &lt;td tal:content=\"product/description\"&gt;A nice description&lt;/td&gt;\n        &lt;td tal:content=\"product/price\"&gt;1.23&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.\nThere is support for macros and for i18n as well:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;h1 i18n:translate=\"\"&gt;Our special offers&lt;/h1&gt;\n&lt;table&gt;\n    &lt;tr tal:repeat=\"product products\"&gt;\n        &lt;td tal:content=\"product/name\"\n            i18n:translate=\"\"&gt;Example product&lt;/td&gt;\n        &lt;td tal:content=\"product/description\"\n            i18n:translate=\"\"&gt;A nice description&lt;/td&gt;\n        &lt;td tal:content=\"product/price\"&gt;1.23&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>If translations of the content are available, they are used.</p>\n\n<p>I don't know very much about the <a href=\"http://sourceforge.net/projects/javazpt/\">Java implementation</a>, though.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>If somebody is really against programming in more languages than one</strong>, I suggest GWT, theoretically you can avoid all the JS and HTML elements, because Google Toolkit transforms all the client and shared code to JS, you won't have problem with them, so you have a webservice without coding in any other languages. Even you can use some default CSS from somewhere as it is given by extensions (smartGWT or Vaadin). You don't need to learn dozens of annotations. </p>\n\n<p>Of course if you want, you can hack yourself into the depths of the code and inject JS and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I say worths a try, and the basic GWT is well-documented.</p>\n\n<p>And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimalize it. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using scriptlets in JSPs is not a good practice.</p>\n\n<p>Instead, you can use:</p>\n\n<ol>\n<li>JSTL tags   </li>\n<li>EL expressions</li>\n<li>Custom Tags- you can define your own tags to use.</li>\n</ol>\n\n<p>Please refer to: </p>\n\n<ol>\n<li><a href=\"http://docs.oracle.com/javaee/1.4/tutorial/doc/JSTL3.html\">http://docs.oracle.com/javaee/1.4/tutorial/doc/JSTL3.html</a></li>\n<li><a href=\"http://docs.oracle.com/javaee/1.4/tutorial/doc/JSPIntro7.html\">EL</a> </li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Technically, JSP are all converted to Servlets during runtime</strong>. JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP are technically all java codes during runtime. But to answer the question, Tag Libraries are usually used for applying logic (removing Java codes) to JSP pages.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Its quite simple by using EL and JSTL.</p>\n\n<p>Visit this blog:- <a href=\"http://javadevelopersguide.blogspot.in/search/label/JSTL\" rel=\"nofollow\">http://javadevelopersguide.blogspot.in/search/label/JSTL</a> </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If we use the following things in a java web application, java code can be eliminated from foreground of the JSP.</p>\n\n<ol>\n<li><p>Use MVC architecture for web application</p></li>\n<li><p>Use JSP Tags</p>\n\n<p>a. Standard Tags</p>\n\n<p>b. Custom Tags</p></li>\n<li><p>Expression Language</p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sure, replace &lt;%! counter++; %&gt; by a event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.</p>\n\n<p>I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).</p>\n\n<p>So I consider as procrastination the activity of defining \"layers\" or redundant data structures either early in the project or when not specifically required.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>I'm just wondering whether it is good practice to use multiple JFrames?</p>\n</blockquote>\n\n<p>Bad (bad, bad) practice.  </p>\n\n<ul>\n<li>User unfriendly: The user sees multiple icons in their task bar when expecting to see only one.  Plus the side effects of the coding problems..</li>\n<li>A nightmare to code and maintain:\n<ul>\n<li>A <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/misc/modality.html\">modal dialog</a> offers the easy opportunity to focus attention on the content of that dialog - choose/fix/cancel this, <strong>then</strong> proceed.  Multiple frames do not.</li>\n<li>A dialog (or floating tool-bar) with a parent will come to front when the parent is clicked on - you'd have to implement that in frames if that was the desired behavior.</li>\n</ul></li>\n</ul>\n\n<hr>\n\n<p>There are any number of ways of displaying many elements in one GUI, e.g.:</p>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/layout/card.html\"><code>CardLayout</code></a> (short <a href=\"http://stackoverflow.com/a/5786005/418556\">demo.</a>). Good for:\n<ol>\n<li>Showing wizard like dialogs.</li>\n<li>Displaying list, tree etc. selections for items that have an associated component.</li>\n<li>Flipping between no component and visible component.</li>\n</ol></li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/internalframe.html\"><code>JInternalFrame</code>/<code>JDesktopPane</code></a> typically used for an <a href=\"http://en.wikipedia.org/wiki/Multiple_document_interface\">MDI</a>.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html\"><code>JTabbedPane</code></a> for groups of components.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/splitpane.html\"><code>JSplitPane</code></a> A way to display two components of which the importance between one or the other (the size) varies according to what the user is doing.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html\"><code>JLayeredPane</code></a> far many well ..layered components.</li>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html\"><code>JToolBar</code></a> typically contains groups of actions or controls.  Can be dragged around the GUI, or off it entirely according to user need.  As mentioned above, will minimize/restore according to the parent doing so.</li>\n<li>As items in a <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/list.html\"><code>JList</code></a> (simple example below).</li>\n<li>As nodes in a <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\"><code>JTree</code></a>.</li>\n<li><a href=\"http://stackoverflow.com/a/5630271/418556\">Nested layouts</a>.<br><img src=\"http://i.stack.imgur.com/Jaqap.png\"></li>\n</ul>\n\n<p>But if those strategies do not work for a particular use-case, try the following.  Establish a single main <code>JFrame</code>, then have <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html\"><code>JDialog</code></a> or <a href=\"http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#features\"><code>JOptionPane</code></a> instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.</p>\n\n<h2>Many images</h2>\n\n<p>In this case where the multiple elements are images, it would be better to use either of the following instead:</p>\n\n<ol>\n<li>A single <code>JLabel</code> (centered in a scroll pane) to display whichever image the user is interested in at that moment.  As seen in <a href=\"http://stackoverflow.com/a/13463684/418556\"><code>ImageViewer</code></a>.<br><img src=\"http://i.stack.imgur.com/5JXpC.gif\"></li>\n<li>A single row <code>JList</code>. As seen in <a href=\"http://stackoverflow.com/a/9544652/418556\">this answer</a>.  The 'single row' part of that only works if they are all the same dimensions.  Alternately, if you are prepared to scale the images on the fly, and they are all the same aspect ratio (e.g. 4:3 or 16:9).</li>\n</ol>\n\n<p><img src=\"http://i.stack.imgur.com/q8hEl.jpg\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The multiple <code>JFrame</code> approach has been something I've implemented since I began programming Swing apps. For the most part, I did it in the beginning because I didn't know any better. <strong>However</strong>, as I matured in my experience and knowledge as a developer and as began to read and absorb the opinions of so many more experienced Java devs online, I made an attempt to <strong>shift away</strong> from the multiple <code>JFrame</code> approach (both in current projects and future projects) only to be met with... get this... <em>resistance from my clients!</em> As I began implementing modal dialogs to control \"child\" windows and <code>JInternalFrame</code>s for separate components, <strong>my clients began to complain!</strong> I was quite surprised, as I was doing what I thought was best-practice! But, as they say, \"A happy wife is a happy life.\" Same goes for your clients. Of course, I am a contractor so my end-users have direct access to me, the developer, which is obviously not a common scenario.</p>\n\n<p>So, I'm going to explain the benefits of the multiple <code>JFrame</code> approach, as well as myth-bust some of the cons that others have presented.</p>\n\n<ol>\n<li><strong>Ultimate flexibility in layout</strong> - By allowing separate <code>JFrame</code>s, you give your end-user the ability to spread out and control what's on his/her screen. The concept feels \"open\" and non-constricting. You lose this when you go towards one big <code>JFrame</code> and a bunch of <code>JInternalFrame</code>s.</li>\n<li><strong>Works well for very modularized applications</strong> - In my case, most of my applications have 3 - 5 big \"modules\" that really have nothing to do with each other whatsoever. For instance, one module might be a sales dashboard and one might be an accounting dashboard. They don't talk to each other or anything. However, the executive might want to open both and them being separate frames on the taskbar makes his life easier.</li>\n<li><strong>Makes it easy for end-users to reference outside material</strong> - Once, I had this situation: My app had a \"data viewer,\" from which you could click \"Add New\" and it would open a data entry screen. Initially, both were <code>JFrame</code>s. However, I wanted the data entry screen to be a <code>JDialog</code> whose parent was the data viewer. I made the change, and immediately I received a call from an end-user who relied heavily on the fact that he could minimize or close the <strong>viewer</strong> and keep the <strong>editor</strong> open while he referenced another part of the program (or a website, I don't remember). He's <strong>not</strong> on a multi-monitor, so he needed the entry dialog to be first and <em>something else</em> to be second, with the data viewer completely hidden. This was impossible with a <code>JDialog</code> and certainly would've been impossible with a <code>JInternalFrame</code> as well. I begrudgingly changed it back to being separate <code>JFrames</code> for his sanity, but it taught me an important lesson.</li>\n<li><strong>Myth: Hard to code</strong> - This is not true in my experience. I don't see why it would be any easier to create a <code>JInternalFrame</code> than a <code>JFrame</code>. In fact, in my experience, <code>JInternalFrames</code> offer much less flexibility. I have developed a systematic way of handling the opening &amp; closing of <code>JFrame</code>s in my apps that really works well. I control the frame almost completely from within the frame's code itself; the creation of the new frame, <code>SwingWorker</code>s that control the retrieval of data on background threads and the GUI code on EDT, restoring/bringing to front the frame if the user tries to open it twice, etc. All you need to open my <code>JFrame</code>s is call a public static method <code>open()</code> and the open method, combined with a <code>windowClosing()</code> event handles the rest (is the frame already open? is it not open, but loading? etc.) I made this approach a template so it's not difficult to implement for each frame.</li>\n<li><strong>Myth/Unproven: Resource Heavy</strong> - I'd like to see some facts behind this speculative statement. Although, perhaps, you could say a <code>JFrame</code> needs more space than a <code>JInternalFrame</code>, even if you open up 100 <code>JFrame</code>s, how many more resources would you really be consuming? If your concern is memory leaks because of resources: calling <code>dispose()</code> frees all resources used by the frame for garbage collection (and, again I say, a <code>JInternalFrame</code> should invoke exactly the same concern).</li>\n</ol>\n\n<p>I've written a lot and I feel like I could write more. Anyways, I hope I don't get down-voted simply because it's an unpopular opinion. The question is clearly a valuable one and I hope I've provided a valuable answer, even if it isn't the common opinion.</p>\n\n<p>A great example of multiple frames/single document per frame (<a href=\"http://en.wikipedia.org/wiki/Single_document_interface\">SDI</a>) vs single frame/multiple documents per frame (<a href=\"http://en.wikipedia.org/wiki/Multiple_document_interface\">MDI</a>) is Microsoft Excel. Some of MDI benefits:</p>\n\n<ul>\n<li>it is possible to have a few windows in non rectangular shape - so they don't hide desktop or other window from another process (e.g. web browser)</li>\n<li>it is possible to open a window from another process over one Excel window while writing in second Excel window - with SDI, trying to write in one of internal windows will give focus to the entire Excel window, hence hiding window from another process</li>\n<li>it is possible to have different documents on different screens, which is especially useful when screens do not have the same resolution</li>\n</ul>\n\n<p>MDI:</p>\n\n<p><img src=\"http://i.stack.imgur.com/5iv4S.png\" alt=\"enter image description here\"></p>\n\n<p>SDI:</p>\n\n<p><img src=\"http://i.stack.imgur.com/HeLur.png\" alt=\"enter image description here\"></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'd like to counter the \"not user friendly\" argument with an example that I have just been involved with.</p>\n\n<p>In our application we have a main window where the users run various 'programs' as separate tabs. As much as possible we have tried to keep our application to this single window.</p>\n\n<p>One of the 'programs' they run presents a list of reports that have been generated by the system, and the user can click on an icon on each line to pop open a report viewer dialog. This viewer is showing the equivalent of the portrait/landscape A4 page(s) of the report, so the users like this window to be quite big, almost filling their screens.</p>\n\n<p>A few months ago we started getting requests from our customers to make these report viewer windows modeless, so that they could have multiple reports open at the same time.</p>\n\n<p>For some time I resisted this request as I did not think this was a good solution. However, my mind was changed when I found out how the users were getting around this 'deficiency' of our system.</p>\n\n<p>They were opening a viewer, using the 'Save As' facility to save the report as a PDF to a specific directory, using Acrobat Reader to open the PDF file, and then they would do the same with the next report. They would have multiple Acrobat Readers running with the various report outputs that they wanted to look at.</p>\n\n<p>So I relented and made the viewer modeless. This means that each viewer has a task-bar icon.</p>\n\n<p>When the latest version was released to them last week, the overwhelming response from them is that they LOVE it. It's been one of our most popular recent enhancements to the system.</p>\n\n<p>So you go ahead and tell your users that what they want is bad, but ultimately it won't do you any favours.</p>\n\n<p>SOME NOTES:</p>\n\n<ul>\n<li>It seems to be best practice to use JDialog's for these modeless windows</li>\n<li>Use the constructors that use the new <code>ModalityType</code> rather than the boolean <code>modal</code> argument. This is what gives these dialogs the task-bar icon.</li>\n<li>For modeless dialogs, pass a null parent to the constructor, but locate them relative to their 'parent' window.</li>\n<li>Version 6 of Java on Windows has a <a href=\"http://bugs.sun.com/view_bug.do?bug_id=6829546\">bug</a> which means that your main window can become 'always on top' without you telling it. Upgrade to version 7 to fix this</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Make an jInternalFrame into main frame and make it invisible. Then you can use it for further events.</p>\n\n<pre><code>jInternalFrame.setSize(300,150);\njInternalFrame.setVisible(true);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's been a while since the last time i touch swing but in general is a bad practice to do this. Some of the main disadvantages that comes to mind: </p>\n\n<ul>\n<li><p><strong>It's more expensive:</strong> you will have to allocate way more resources to draw a JFrame that other kind of window container, such as Dialog or JInternalFrame.</p></li>\n<li><p><strong>Not user friendly:</strong> It is not easy to navigate into a bunch of JFrame stuck together, it will look like your application is a set of applications inconsistent and poorly design.</p></li>\n<li><p><strong>It's easy to use JInternalFrame</strong> This is kind of retorical, now it's way easier and other people smarter ( or with more spare time) than us have already think through the Desktop and JInternalFrame pattern, so I would recommend to use it.</p></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Bad practice definitely. One reason is that it is not very 'user-friendly' for the fact that every JFrame shows a new taskbar icon. Controlling multiple JFrames will have you ripping your hair out.</p>\n\n<p>Personally, I would use ONE JFrame for your kind of application. Methods of displaying multiple things is up to you, there are many. Canvases, JInternalFrame, CardLayout, even JPanels possibly.</p>\n\n<p>Multiple JFrame objects = Pain, trouble, and problems.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>i think using multiple Jframes is not a good idea.</p>\n\n<p>Instead we can use jpanels more than one or more jpanel in the same jframe.</p>\n\n<p>also we can switch between this jpanels .so it give us freedom to display more than on thing in the jframe.</p>\n\n<p>for each jpanel we can design different things and all this jpanel can be displayed on the single jframe one at a time.</p>\n\n<p>To switch between this jpanels use menubar with menuitems for each jpanel or jbutton for each jpanel.</p>\n\n<p>more than one jframe is not a good practice.but there is nothing wrong if we waqnt more than one jframe.\nbut its better to change one jframe for our different needs rather than having multiple jframes.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If the frames are going to be the same size, why not create the frame and pass the frame then as a reference to it instead. </p>\n\n<p>When you have passed the frame you can then decide how to populate it. It would be like having a method for calculating the average of a set of figures. Would you create the method over and over again? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is not a good practice but even though you wish to use it you can use the singleton pattern as its good. I have used the singleton patterns in most of my project its good.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> tests for reference equality (whether they are the same object).</p>\n\n<p><code>.equals()</code> tests for value equality (whether they are logically \"equal\"). </p>\n\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)\">Objects.equals()</a> checks for nulls before calling <code>.equals()</code> so you don't have to (available as of JDK7, also available in <a href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained#equals\">Guava</a>).</p>\n\n<p>Consequently, if you want to test whether two strings have the same value you will probably want to use <code>Objects.equals()</code>.</p>\n\n<pre><code>// These two have the same value\nnew String(\"test\").equals(\"test\") // --&gt; true \n\n// ... but they are not the same object\nnew String(\"test\") == \"test\" // --&gt; false \n\n// ... neither are these\nnew String(\"test\") == new String(\"test\") // --&gt; false \n\n// ... but these are because literals are interned by \n// the compiler and thus refer to the same object\n\"test\" == \"test\" // --&gt; true \n\n// checks for nulls and calls .equals()\nObjects.equals(\"test\", new String(\"test\")) // --&gt; true\nObjects.equals(null, \"test\") // --&gt; false\n</code></pre>\n\n<p>You almost <strong>always</strong> want to use<code>Objects.equals()</code>. In the <strong>rare</strong> situation where you <strong>know</strong> you're dealing with <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#intern--\">interned</a> strings, you <em>can</em> use <code>==</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> tests object references, <code>.equals()</code> tests the string values.  </p>\n\n<p>Sometimes it looks as if <code>==</code> compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.</p>\n\n<p>For example:  </p>\n\n<pre><code>String fooString1 = new String(\"foo\");\nString fooString2 = new String(\"foo\");\n\n// Evaluates to false\nfooString1 == fooString2;\n\n// Evaluates to true\nfooString1.equals(fooString2);\n\n// Evaluates to true, because Java uses the same object\n\"bar\" == \"bar\";\n</code></pre>\n\n<p><strong>But beware of nulls!</strong>  </p>\n\n<p><code>==</code> handles <code>null</code> strings fine, but calling <code>.equals()</code> from a null string will cause an exception:  </p>\n\n<pre><code>String nullString1 = null;\nString nullString2 = null;\n\n// Evaluates to true\nnullString1 == nullString2;\n\n// Throws an Exception\nnullString1.equals(nullString2);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> compares Object reference</p>\n\n<p><code>.equals()</code> compares String value</p>\n\n<p>Sometimes <code>==</code> gives illusions of comparing String values, in following cases</p>\n\n<pre><code>String a=\"Test\";\nString b=\"Test\";\nif(a==b) ===&gt; true\n</code></pre>\n\n<p>This is a because when you create any String literal, JVM first searches for that literal in String pool, if it matches, same reference will be given to that new String, because of this we are getting </p>\n\n<p><strong>(a==b) ===&gt; true</strong></p>\n\n<pre><code>                       String Pool\n     b -----------------&gt; \"test\" &lt;-----------------a\n</code></pre>\n\n<p><code>==</code> fails in following case</p>\n\n<pre><code>String a=\"test\";\nString b=new String(\"test\");\nif (a==b) ===&gt; false\n</code></pre>\n\n<p>in this case for <code>new String(\"test\")</code> the statement new String will be created in heap that reference will be given to <code>b</code>, so <code>b</code> will be given reference in heap not in String Pool.\nNow <code>a</code> is pointing to String in String pool while <code>b</code> is pointing to String in heap, because of that we are getting  </p>\n\n<p><strong>if(a==b) ===&gt; false.</strong></p>\n\n<pre><code>                String Pool\n     \"test\" &lt;-------------------- a\n\n                   Heap\n     \"test\" &lt;-------------------- b\n</code></pre>\n\n<p>While <code>.equals()</code> always compares value of String so it gives true in both cases</p>\n\n<pre><code>String a=\"Test\";\nString b=\"Test\";\nif(a.equals(b)) ===&gt; true\n\nString a=\"test\";\nString b=new String(\"test\");\nif(a.equals(b)) ===&gt; true\n</code></pre>\n\n<p>So using <code>.equals()</code> is awalys better.</p>\n\n<p>Hope this will help.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>==</code> operator checks to see if the two strings are exactly the same object.</p>\n\n<p>The <code>.equals()</code> method will check if the two strings have the same value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>String in java are immutable that means whenever you try to change/modify the string you get a new instance. You cannot change the original string. This has been done so that these string instances can be cached. A typical program contains a lot of string references and caching these instances can decrease the memory footprint and increase the performance of the program.</p>\n\n<p>When using == operator for string comparison you are not comparing the contents of the string but are actually comparing the memory address, if they are both equal it will return true and false otherwise. Whereas equals in string compares the string contents.</p>\n\n<p>So the question is if all the strings are cached in the system how come == returns false whereas equals return true. Well this is possible. If you make a new string like <code>String str = new String(\"Testing\")</code> you end up creating a new string in the cache even if the cache already contains a string having the same content. In short <code>\"MyString\" == new String(\"MyString\")</code> will always return false.</p>\n\n<p>Java also talks about the function intern() that can be used on a string to make it part of the cache so <code>\"MyString\" == new String(\"MyString\").intern()</code> will return true.</p>\n\n<p>Note: == operator is much faster that equals just because you are comparing two memory addresses, but you need to be sure that the code isn't creating new String instances in the code otherwise you will encounter bugs.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>String a = new String(\"foo\");\nString b = new String(\"foo\");\nSystem.out.println(a == b); // prints false\nSystem.out.println(a.equals(b)); // prints true\n</code></pre>\n\n<p>Make sure you understand why.  It's because the <code>==</code> comparison only compares references; the <code>equals()</code> method does a character-by-character comparison of the contents.</p>\n\n<p>When you call new for <code>a</code> and <code>b</code>, each one gets a new reference that points to the <code>\"foo\"</code> in the string table.  The references are different, but the content is the same.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yea, it's bad...</p>\n\n<p>\"==\" means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.</p>\n\n<p>Equals does the real comparison for you. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java is having a String pool under which java manages the memory allocation for the String objects. See <a href=\"http://stackoverflow.com/questions/3801343/what-is-string-pool-in-java\"><strong>String Pools in java</strong></a></p>\n\n<p>What happens is when you check(compare) two objects using <code>==</code> operator it compares the address equality into the string-pool. If two String objects having same address references then it returns <code>true</code> otherwise <code>false</code>. But if you want to compare the contents of two String objects then you must override <code>equals</code> method.</p>\n\n<p><code>equals</code> is actually the method of Object class but is Overridden into the String class and new definition is given which compares the contents of object. </p>\n\n<pre><code>Example:\n    stringObjectOne.equals(stringObjectTwo);\n</code></pre>\n\n<p>But mind it respects the case of String. If you want Case insensitive compare then you must go for equalsIgnoreCase method of the String class. </p>\n\n<pre><code>Lets See:\n\nString one   = \"HELLO\"; \nString two   = \"HELLO\"; \nString three = new String(\"HELLO\"); \nString four  = \"hello\"; \n\none == two;   // TRUE\none == three; // FALSE\none == four;  // FALSE\n\none.equals(two);            // TRUE\none.equals(three);          // TRUE\none.equals(four);           // FALSE\none.equalsIgnoreCase(four); // TRUE\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong><code>==</code> compares object references in Java</strong>, and that is no exception for <code>String</code> objects.</p>\n\n<p><strong>For comparing the actual contents of objects (including <code>String</code>), one must use the <code>equals</code> method</strong>.</p>\n\n<p>If a comparison of two <code>String</code> objects using <code>==</code> turns out to be <code>true</code>, that is because the <code>String</code> objects were interned, and the Java Virtual Machine is having multiple references point to the same instance of <code>String</code>. One should not expect that comparing one <code>String</code> object containing the same contents as another <code>String</code> object using <code>==</code> to evaluate as <code>true</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, <code>==</code> is bad for comparing Strings (any objects really, unless you know they're canonical).  <code>==</code> just compares object references.  <code>.equals()</code> tests for equality. For Strings, often they'll be the same but as you've discovered, that's not guaranteed always.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>.equals()</code> compares the data in a class (assuming the function is implemented).\n<code>==</code> compares pointer locations (location of the object in memory).</p>\n\n<p><code>==</code> returns true if both objects (NOT TALKING ABOUT PRIMITIVES) point to the SAME object instance.\n<code>.equals()</code> returns true if the two objects contain the same data <a href=\"http://www.java-samples.com/showtutorial.php?tutorialid=221\"><code>equals()</code> Versus <code>==</code> in Java</a></p>\n\n<p>That may help you.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I agree with the answer from zacherates.</p>\n\n<p>But what you can do is to call intern() on your non-literal strings.</p>\n\n<p>From zacherates example:</p>\n\n<pre><code>// ... but they are not the same object\nnew String(\"test\") == \"test\" ==&gt; false \n</code></pre>\n\n<p>If you intern the non-literal String equality is true</p>\n\n<pre><code>new String(\"test\").intern() == \"test\" ==&gt; true \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> performs a <strong>reference</strong> equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.</p>\n\n<p>The <code>equals()</code> method will check whether the <strong>contents</strong> or the <strong>states</strong> of 2 objects are the same.</p>\n\n<p>Obviously <code>==</code> is faster, but will (might) give false results in many cases if you just want to tell if 2 <code>String</code>s hold the same text.</p>\n\n<p>Definitely the use of <code>equals()</code> method is recommended.</p>\n\n<p>Don't worry about the performance. Some things to encourage using <code>String.equals()</code>:</p>\n\n<ol>\n<li>Implementation of <code>String.equals()</code> first checks for reference equality (using <code>==</code>), and if the 2 strings are the same by reference, no further calculation is performed!</li>\n<li>If the 2 string references are not the same, <code>String.equals()</code> will next check the lengths of the strings. This is also a fast operation because the <code>String</code> class stores the length of the string, no need to count the characters or code points. If the lengths differ, no further check is performed, we know they cannot be equal.</li>\n<li>Only if we got this far will the contents of the 2 strings be actually compared, and this will be a short-hand comparison: not all the characters will be compared, if we find a mismatching character (at the same position in the 2 strings), no further characters will be checked.</li>\n</ol>\n\n<p>When all is said and done, even if we have guarantee that the strings are interns, using the <code>equals()</code> method is still not that overhead that one might think, definitely the recommended way. If you want efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're like me, when I first started using Java, I wanted to use the \"==\" operator to test whether two String instances were equal, but for better or worse, that's not the correct way to do it in Java.</p>\n\n<p>In this tutorial I'll demonstrate several different ways to correctly compare Java strings, starting with the approach I use most of the time. At the end of this Java String comparison tutorial I'll also discuss why the \"==\" operator doesn't work when comparing Java strings.</p>\n\n<p><strong>Option 1: Java String comparison with the equals method</strong>\nMost of the time (maybe 95% of the time) I compare strings with the equals method of the Java String class, like this:</p>\n\n<pre><code>if (string1.equals(string2))\n</code></pre>\n\n<p>This String equals method looks at the two Java strings, and if they contain the exact same string of characters, they are considered equal.</p>\n\n<p>Taking a look at a quick String comparison example with the equals method, if the following test were run, the two strings would not be considered equal because the characters are not the exactly the same (the case of the characters is different):</p>\n\n<pre><code>String string1 = \"foo\";\nString string2 = \"FOO\";\n\nif (string1.equals(string2))\n{\n// this line will not print because the\n// java string equals method returns false:\nSystem.out.println(\"The two strings are the same.\")\n}\n</code></pre>\n\n<p>But, when the two strings contain the exact same string of characters, the equals method will return true, as in this example:</p>\n\n<pre><code>String string1 = \"foo\";\nString string2 = \"foo\";\n\n // test for equality with the java string equals method\nif (string1.equals(string2))\n{\n // this line WILL print\n System.out.println(\"The two strings are the same.\")\n }\n</code></pre>\n\n<p><strong>Option 2: String comparison with the equalsIgnoreCase method</strong></p>\n\n<p>In some string comparison tests you'll want to ignore whether the strings are uppercase or lowercase. When you want to test your strings for equality in this case-insensitive manner, use the equalsIgnoreCase method of the String class, like this:</p>\n\n<pre><code>String string1 = \"foo\";\nString string2 = \"FOO\";\n\n // java string compare while ignoring case\n if (string1.equalsIgnoreCase(string2))\n {\n // this line WILL print\n System.out.println(\"Ignoring case, the two strings are the same.\")\n }\n</code></pre>\n\n<p><strong>Option 3: Java String comparison with the compareTo method</strong></p>\n\n<p>There is also a third, less common way to compare Java strings, and that's with the String class compareTo method. If the two strings are exactly the same, the compareTo method will return a value of 0 (zero). Here's a quick example of what this String comparison approach looks like:</p>\n\n<pre><code>String string1 = \"foo bar\";\nString string2 = \"foo bar\";\n\n// java string compare example\nif (string1.compareTo(string2) == 0)\n{\n// this line WILL print\n System.out.println(\"The two strings are the same.\")\n }\n</code></pre>\n\n<p>While I'm writing about this concept of equality in Java, it's important to note that the Java language includes an equals method in the base Java Object class. Whenever you're creating your own objects and you want to provide a means to see if two instances of your object are \"equal\", you should override (and implement) this equals method in your class (in the same way the Java language provides this equality/comparison behavior in the String equals method).</p>\n\n<p>You may want to have a look at this <a href=\"http://www.ensta-paristech.fr/~diam/java/online/notes-java/data/expressions/22compareobjects.html\">==, .equals(), compareTo(), and compare()</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Function:</p>\n\n<pre><code>// word-by-word fixed-cut similarity\n\npublic static float simple_similarity(String u, String v) {\n        String[] a = u.split(\" \");\n        String[] b = v.split(\" \");\n\n        long correct = 0;\n        int minLen = Math.min(a.length, b.length);\n\n        for (int i = 0; i &lt; minLen; i++) {\n            for (int j = 0; j &lt; Math.min(a[i].size(), b[i].size()); i++) {\n                if (a[i][j] == b[i][j]) {\n                    correct++;\n                }\n            }\n        }\n\n        return (float) (((double) correct) / Math.max(u.size(), v.size()));\n    }\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>String a = \"This is the first string.\";\n\nString b = \"this is not 1st string!\";\n\n// for exact string comparison, use .equals\n\nboolean exact = a.equals(b);\n\n// For similarity check, there are libraries for this\n// Here I'll try a simple example I wrote\n\nfloat similarity = simple_similarity(a,b);\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> compares the reference value of objects whereas the <code>equals()</code> method present in the <code>java.lang.String</code> class compares the contents of the <code>String</code> object (to another object).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think that when you define a <code>String</code> you define an object. So you need to use <code>.equals()</code>. When you use primitive data types you use <code>==</code> but with <code>String</code> (and any object) you must use <code>.equals()</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>always <em>==</em> operator meant for <strong>object reference comparison</strong>,where as String class <em>.equals()</em> method is overridden for <strong>content comparison</strong></p>\n\n<pre><code>String s1= new String(\"abc\");\nString s2= new String(\"abc\");\nSystem.out.println(s1 == s2);//It prints false(reference comparison)\nSystem.out.println(s1.equals(s2));//It prints true (content comparison)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>== operator check if the two references point to the same object or not.\n.equals() check for the actual string content(value).\n</code></pre>\n\n<p>Note that .equals() method belongs to Class Object(Super class of all classes). You need to override it as per you class requirement but for String it is already implemented and it checks whether two string have same value or not.</p>\n\n<pre><code>Case1)\nString s1 = \"StackOverflow\";\nString s2 = \"StackOverflow\";\ns1 == s2;      //true\ns1.equals(s2); //true\nReason:  String literals created without null are stores in String pool in permgen area of heap. So both s1 and s2 point to same object in the pool.\nCase2)\nString s1 = new String(\"StackOverflow\");\nString s2 = new String(\"StackOverflow\");\ns1 == s2;      //false\ns1.equals(s2); //true\nReason: If you create String object using new keyword separate space is allocated to it on heap.\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also use <code>compareTo()</code> method to compare two Strings. If the compareTo result is 0, then the two strings are equal, otherwise the strings being compared are not equal. </p>\n\n<p>The <code>==</code> compares the references and does not compare the actual strings. If you did create every string using <code>new String(somestring).intern()</code> then you can use the <code>==</code> operator to compare two strings, otherwise equals() or compareTo methods can only be used.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>equals()</code> method is present in the <code>java.lang.Object</code> class and it is expected to check for the equivalence of the state of objects!. That means, the contents of the objects. Whereas the <code>==</code> operator is expected to check the actual object instances are same or not.</p>\n\n<p><em>Example</em></p>\n\n<p>Consider two different reference variables <code>str1</code> and <code>str2</code> <br></p>\n\n<pre><code>str1 = new String(\"abc\");\nstr2 = new String(\"abc\");\n</code></pre>\n\n<p>if you use the <code>equals()</code></p>\n\n<pre><code>System.out.println((str1.equals(str2))?\"TRUE\":\"FALSE\");\n</code></pre>\n\n<p>You will get the output as <code>TRUE</code></p>\n\n<p>if you use <code>==</code></p>\n\n<pre><code>System.out.println((str1==str2)?\"TRUE\":\"FALSE\");\n</code></pre>\n\n<p>Now you will get the <code>FALSE</code> as output because both <code>str1</code> and <code>str2</code> are pointing to two different objects even though both of them share the same string content. It is because of <code>new String()</code> everytime a new object is created.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Java, when the <strong>\u201c==\u201d</strong> operator is used to compare 2 objects, it checks to see if the objects refer to the same place in memory. In other words, it checks to see if the 2 object names are basically references to the same memory location. </p>\n\n<p>The Java String class actually overrides the default equals() implementation in the Object class \u2013 and it overrides the method so that it checks only the values of the strings, not their locations in memory.\n This means that if you call the equals() method to compare 2 String objects, then as long as the actual sequence of characters is equal, both objects are considered equal.</p>\n\n<blockquote>\n  <p>The <code>==</code> operator checks if the two strings are exactly the same object.</p>\n  \n  <p>The <code>.equals()</code> method  check if the two strings have the same value.</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>All objects are guaranteed to have a <code>.equals()</code> method since Object contains a method <code>.equals()</code> that returns a boolean. It is the subclass' job to override this method if a further defining definition is required.  Without it(i.e. using <code>==</code>) only memory addresses are checked between two objects for equality.   String overrides this <code>.equals()</code> method and instead of using the memory address it returns the comparison of strings at the character level for equality. </p>\n\n<p>A key note is that strings are stored in one lump pool so once a string is created it is forever stored in a program at the same address. Strings do not change, they are immutable. This is why it is a bad idea to use regular string concatenation if you have a serious of amount of string processing to do. Instead you would use the <code>StringBuilder</code> classes provided. Remember the pointers to this string can change and if you were interested to see if two pointers were the same <code>==</code> would be a fine way to go. Strings themselves do not.</p>\n    </div>"]},
{"answer": ["<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java is always <em>pass-by-value</em>. Unfortunately, they decided to call pointers references, thus confusing newbies. Because those <em>references</em> are passed by value.</p>\n\n<p>It goes like this:</p>\n\n<pre><code>public static void main( String[] args ){\n    Dog aDog = new Dog(\"Max\");\n    foo(aDog);\n\n    if (aDog.getName().equals(\"Max\")) { //true\n        System.out.println( \"Java passes by value.\" );\n\n    } else if (aDog.getName().equals(\"Fifi\")) {\n        System.out.println( \"Java passes by reference.\" );\n    }\n}\n\npublic static void foo(Dog d) {\n    d.getName().equals(\"Max\"); // true\n\n    d = new Dog(\"Fifi\");\n    d.getName().equals(\"Fifi\"); // true\n}\n</code></pre>\n\n<p>In this example <code>aDog.getName()</code> will still return <code>\"Max\"</code>. The value <code>aDog</code> within <code>main</code> is not overwritten in the function <code>foo</code> with the <code>Dog</code> <code>\"Fifi\"</code> as the object reference is passed by value. If it were passed by reference, then the <code>aDog.getName()</code> in <code>main</code> would return <code>\"Fifi\"</code> after the call to <code>foo</code>.</p>\n\n<p>Likewise:</p>\n\n<pre><code>Dog aDog = new Dog(\"Max\");\nfoo(aDog);\naDog.getName().equals(\"Fifi\"); // true\n\npublic void foo(Dog d) {\n    d.getName().equals(\"Max\"); // true\n    d.setName(\"Fifi\");\n}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I just noticed you referenced <a href=\"http://javadude.com/articles/passbyvalue.htm\">my article</a>.</p>\n\n<p>The Java Spec says that everything in Java is pass-by-value. There is no such thing as \"pass-by-reference\" in Java.</p>\n\n<p>The key to understanding this is that something like</p>\n\n<pre><code>Dog myDog;\n</code></pre>\n\n<p>is <em>not</em> a Dog; it's actually a <em>pointer</em> to a Dog.</p>\n\n<p>What that means, is when you have</p>\n\n<pre><code>Dog myDog = new Dog(\"Rover\");\nfoo(myDog);\n</code></pre>\n\n<p>you're essentially passing the <em>address</em> of the created <code>Dog</code> object to the <code>foo</code> method.</p>\n\n<p>(I say essentially because Java pointers aren't direct addresses, but it's easiest to think of them that way)</p>\n\n<p>Suppose the <code>Dog</code> object resides at memory address 42. This means we pass 42 to the method.</p>\n\n<p>if the Method were defined as</p>\n\n<pre><code>public void foo(Dog someDog) {\n    someDog.setName(\"Max\");     // AAA\n    someDog = new Dog(\"Fifi\");  // BBB\n    someDog.setName(\"Rowlf\");   // CCC\n}\n</code></pre>\n\n<p>let's look at what's happening.</p>\n\n<ul>\n<li>the parameter <code>someDog</code> is set to the value 42</li>\n<li>at line \"AAA\"\n\n<ul>\n<li><code>someDog</code> is followed to the <code>Dog</code> it points to (the <code>Dog</code> object at address 42)</li>\n<li>that <code>Dog</code> (the one at address 42) is asked to change his name to Max</li>\n</ul></li>\n<li>at line \"BBB\"\n\n<ul>\n<li>a new <code>Dog</code> is created. Let's say he's at address 74</li>\n<li>we assign the parameter <code>someDog</code> to 74 </li>\n</ul></li>\n<li>at line \"CCC\"\n\n<ul>\n<li>someDog is followed to the <code>Dog</code> it points to (the <code>Dog</code> object at address 74)</li>\n<li>that <code>Dog</code> (the one at address 74) is asked to change his name to Rowlf</li>\n</ul></li>\n<li>then, we return</li>\n</ul>\n\n<p>Now let's think about what happens outside the method:</p>\n\n<p><em>Did <code>myDog</code> change?</em></p>\n\n<p>There's the key.</p>\n\n<p>Keeping in mind that <code>myDog</code> is a <em>pointer</em>, and not an actual <code>Dog</code>, the answer is NO. <code>myDog</code> still has the value 42; it's still pointing to the original <code>Dog</code> (but note that because of line \"AAA\", its name is now \"Max\" - still the same Dog; <code>myDog</code>'s value has not changed.)</p>\n\n<p>It's perfectly valid to <em>follow</em> an address and change what's at the end of it; that does not change the variable, however.</p>\n\n<p>Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, you cannot change where that pointer points.</p>\n\n<p>In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.</p>\n\n<p>If Java had pass-by-reference semantics, the <code>foo</code> method we defined above would have changed where <code>myDog</code> was pointing when it assigned <code>someDog</code> on line BBB.</p>\n\n<p>Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java always passes arguments by value NOT by reference.</p>\n\n<hr>\n\n<p>Let me explain this through an <a href=\"http://stackoverflow.com/a/9404727/597657\">example</a>:\n</p>\n\n<pre><code>public class Main{\n     public static void main(String[] args){\n          Foo f = new Foo(\"f\");\n          changeReference(f); // It won't change the reference!\n          modifyReference(f); // It will modify the object that the reference variable \"f\" refers to!\n     }\n     public static void changeReference(Foo a){\n          Foo b = new Foo(\"b\");\n          a = b;\n     }\n     public static void modifyReference(Foo c){\n          c.setAttribute(\"c\");\n     }\n}\n</code></pre>\n\n<p>I will explain this in steps:</p>\n\n<ol>\n<li><p>Declaring a reference named <code>f</code> of type <code>Foo</code> and assign it to a new object of type <code>Foo</code> with an attribute <code>\"f\"</code>.</p>\n\n<pre><code>Foo f = new Foo(\"f\");\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/arXpP.png\" alt=\"enter image description here\"></p></li>\n<li><p>From the method side, a reference of type <code>Foo</code> with a name <code>a</code> is declared and it's initially assigned to <code>null</code>.</p>\n\n<pre><code>public static void changeReference(Foo a)\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/k2LBD.png\" alt=\"enter image description here\"></p></li>\n<li><p>As you call the method <code>changeReference</code>, the reference <code>a</code> will be assigned to the object which is passed as an argument.</p>\n\n<pre><code>changeReference(f);\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/1Ez74.png\" alt=\"enter image description here\"></p></li>\n<li><p>Declaring a reference named <code>b</code> of type <code>Foo</code> and assign it to a new object of type <code>Foo</code> with an attribute <code>\"b\"</code>.</p>\n\n<pre><code>Foo b = new Foo(\"b\");\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/Krx4N.png\" alt=\"enter image description here\"></p></li>\n<li><p><code>a = b</code> is re-assigning the reference <code>a</code> NOT <code>f</code> to the object whose its attribute is <code>\"b\"</code>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/rCluu.png\" alt=\"enter image description here\"></p>\n\n<hr></li>\n<li><p>As you call <code>modifyReference(Foo c)</code> method, a reference <code>c</code> is created and assigned to the object with attribute <code>\"f\"</code>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/PRZPg.png\" alt=\"enter image description here\"></p></li>\n<li><p><code>c.setAttribute(\"c\");</code> will change the attribute of the object that reference <code>c</code> points to it, and it's same object that reference <code>f</code> points to it.</p>\n\n<p><img src=\"http://i.stack.imgur.com/H9Qsf.png\" alt=\"enter image description here\"></p></li>\n</ol>\n\n<p>I hope you understand now how passing objects as arguments works in Java :)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>This will give you some insights of how Java really works to the point that in your next discussion about Java passing by reference or passing by value you'll just smile :-)</strong></p>\n\n<p>Step one please erase from your mind that word that starts with 'p' \"_ _ _ _ _ _ _\", especially if you come from other programming languages. Java and 'p' cannot be written in the same book, forum, or even txt.</p>\n\n<p>Step two remember that when you pass an Object into a method you're passing the Object reference and not the Object itself.</p>\n\n<ul>\n<li><em>Student</em>: Master, does this mean that Java is pass-by-reference?</li>\n<li><em>Master</em>: Grasshopper, No.</li>\n</ul>\n\n<p>Now think of what an Object's reference/variable does/is:</p>\n\n<ol>\n<li><strong>A variable holds the bits that tell the JVM how to get to the referenced Object in memory (Heap).</strong></li>\n<li>When passing arguments to a method <strong>you ARE NOT passing the reference variable, but a copy of the bits in the reference variable</strong>. Something like this: 3bad086a. 3bad086a represents a way to get to the passed object.</li>\n<li>So you're just passing 3bad086a that it's the value of the reference.</li>\n<li>You're passing the value of the reference and not the reference itself (and not the object).</li>\n<li><em><strong>This value is actually COPIED and given to the method</strong></em>. </li>\n</ol>\n\n<p>In the following (please don't try to compile/execute this...):</p>\n\n<pre><code>1. Person person;\n2. person = new Person(\"Tom\");\n3. changeName(person);\n4.\n5. //I didn't use Person person below as an argument to be nice\n6. static void changeName(Person anotherReferenceToTheSamePersonObject) {\n7.     anotherReferenceToTheSamePersonObject.setName(\"Jerry\");\n8. }\n</code></pre>\n\n<p>What happens?</p>\n\n<ul>\n<li>The variable <em>person</em> is created in line #1 and it's null at the beginning.</li>\n<li>A new Person Object is created in line #2, stored in memory, and the variable <em>person</em> is given the reference to the Person object. That is, its address. Let's say 3bad086a.</li>\n<li>The variable <em>person</em> holding the address of the Object is passed to the function in line #3.</li>\n<li>In line #4 you can listen to the sound of silence </li>\n<li>Check the comment on line #5</li>\n<li>A method local variable -<em>anotherReferenceToTheSamePersonObject</em>- is created and then comes the magic in line #6:\n<ul>\n<li>The variable/reference <em>person</em> is copied bit-by-bit and passed to <em>anotherReferenceToTheSamePersonObject</em> inside the function.</li>\n<li>No new instances of Person are created.</li>\n<li>Both \"<em>person</em>\" and \"<em>anotherReferenceToTheSamePersonObject</em>\" hold the same value of 3bad086a.</li>\n<li>Don't try this but person==anotherReferenceToTheSamePersonObject would be true.</li>\n<li>Both variables have IDENTICAL COPIES of the reference and they both refer to the same Person Object, the SAME Object on the Heap and NOT A COPY.</li>\n</ul></li>\n</ul>\n\n<p>A picture is worth a thousand words:</p>\n\n<p><img src=\"http://i.stack.imgur.com/Ba3hJ.jpg\" alt=\"Pass by Value\"></p>\n\n<p><strong>Note that the anotherReferenceToTheSamePersonObject arrows is directed towards the Object and not towards the variable person!</strong></p>\n\n<p>If you didn't get it then just trust me and remember that it's better to say that <strong>Java is pass by value</strong>. Well, <strong>pass by reference value</strong>. Oh well, even better is <strong><em>pass-by-copy-of-the-variable-value! ;)</em></strong></p>\n\n<p>Now feel free to hate me but note that given this <strong>there is no difference between passing primitive data types and Objects</strong> when talking about method arguments.</p>\n\n<p>You always pass a copy of the bits of the value of the reference!</p>\n\n<ul>\n<li>If it's a primitive data type these bits will contain the value of the primitive data type itself.</li>\n<li>If it's an Object the bits will contain the value of the address that tells the JVM how to get to the Object.</li>\n</ul>\n\n<blockquote>\n  <p>Java is pass-by-value because inside a method you can modify the referenced Object as much as you want but no matter how hard you try you'll never be able to modify the passed variable that will keep referencing (not p _ _ _ _ _ _ _) the same Object no matter what!</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p>The changeName function above will never be able to modify the actual content (the bit values) of the passed reference. In other word changeName cannot make Person person refer to another Object.</p>\n</blockquote>\n\n<hr>\n\n<p>Of course you can cut it short and just say that  <strong>Java is pass-by-value!</strong></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java is always pass by value, with no exceptions, <strong>ever</strong>.</p>\n\n<p>So how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java <strong>never</strong> provides direct access to the values of <em>objects themselves</em>, in <em>any</em> circumstances. The only access to objects is through a <em>reference</em> to that object. Because Java objects are <em>always</em> accessed through a reference, rather than directly, it is common to talk about fields and variables <em>and method arguments</em> as being <em>objects</em>, when pedantically they are only <em>references to objects</em>. <strong>The confusion stems from this (strictly speaking, incorrect) change in nomenclature.</strong></p>\n\n<p>So, when calling a method</p>\n\n<ul>\n<li>For primitive arguments (<code>int</code>, <code>long</code>, etc.), the pass by value is <em>the actual value</em> of the primitive (for example, 3).</li>\n<li>For objects, the pass by value is the value of <em>the reference to the object</em>.</li>\n</ul>\n\n<p>So if you have <code>doSomething(foo)</code> and <code>public void doSomething(Foo foo) { .. }</code> the two Foos have copied <em>references</em> that point to the same objects.</p>\n\n<p>Naturally, passing by value a reference to an object looks very like (indistinguishable in practice) from passing an object by reference.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java passes references by value.</p>\n\n<p>So you can't change the reference that gets passed in.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I can't believe that nobody mentioned Barbara Liskov yet. When she designed CLU in 1974, she ran into this same terminology problem, and she invented the term <em>call by sharing</em> (also known as <em>call by object-sharing</em> and <em>call by object</em>) for this specific case of \"call by value where the value is a reference\".</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just to show the contrast, compare the following <a href=\"https://en.wikipedia.org/wiki/C++\">C++</a> and <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\">Java</a> snippets:</p>\n\n<p>In C++: <strong>Note: Bad code - memory leaks!</strong>  But it demonstrates the point.</p>\n\n<pre><code>void cppMethod(int val, int &amp;ref, Dog obj, Dog &amp;objRef, Dog *objPtr, Dog *&amp;objPtrRef)\n{\n    val = 7; // Modifies the copy\n    ref = 7; // Modifies the original variable\n    obj.SetName(\"obj\"); // Modifies the copy of Dog passed\n    objRef.SetName(\"objRef\"); // Modifies the original Dog passed\n    objPtr-&gt;SetName(\"objPtr\"); // Modifies the original Dog pointed to \n                               // by the copy of the pointer passed.\n    objPtr = new Dog(\"newObjPtr\");  // Modifies the copy of the pointer, \n                                   // leaving the original object alone.\n    objPtrRef-&gt;SetName(\"objRefPtr\"); // Modifies the original Dog pointed to \n                                    // by the original pointer passed. \n    objPtrRef = new Dog(\"newObjRegPtr\"); // Modifies the original pointer passed\n}\n\nint main()\n{\n    int a = 0;\n    int b = 0;\n    Dog d0 = Dog(\"d0\");\n    Dog d1 = Dog(\"d1\");\n    Dog *d2 = new Dog(\"d2\");\n    Dog *d3 = new Dog(\"d3\");\n    cppMethod(a, b, d0, d1, d2, d3);\n    // a is still set to 0\n    // b is now set to 7\n    // d0 still have name \"d0\"\n    // d1 now has name \"objRef\"\n    // d2 now has name \"objPtr\"\n    // d3 now has name \"newObjPtrRef\"\n}\n</code></pre>\n\n<p>In Java, </p>\n\n<pre><code>public static void javaMethod(int val, Dog objPtr)\n{\n   val = 7; // Modifies the copy\n   objPtr.SetName(\"objPtr\") // Modifies the original Dog pointed to \n                            // by the copy of the pointer passed.\n   objPtr = new Dog(\"newObjPtr\");  // Modifies the copy of the pointer, \n                                  // leaving the original object alone.\n}\n\npublic static void main()\n{\n    int a = 0;\n    Dog d0 = new Dog(\"d0\");\n    javaMethod(a, d0);\n    // a is still set to 0\n    // d0 now has name \"objPtr\"\n}\n</code></pre>\n\n<p>Java only has the two types of passing: by value for built-in types, and by value of the pointer for object types.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java passes references to objects by value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Everyone here has missed the point. Some came close, but everyone is dancing around the real issue, which is this: stack vs. heap. It's not reference vs. value. In order to understand how Java handles memory, you need to get a good grasp of stack/heap.</p>\n\n<p>Crash course on stack/heap before we get to the Java implementation:\nValues go on and off the stack in a nice orderly fashion, like a stack of plates at a cafeteria.\nMemory in the heap (also known as dynamic memory) is haphazard and disorganized. The JVM just finds space wherever it can, and frees it up as the variables that use it are no longer needed.</p>\n\n<p>Okay. First off, primitives go on the stack. So this code:</p>\n\n<pre><code>int x = 3;\nfloat y = 101.1f;\nboolean amIAwesome = true;\n</code></pre>\n\n<p>results in this:</p>\n\n<p><img src=\"http://i.stack.imgur.com/7nGKU.png\" alt=\"primitives on the stack\"></p>\n\n<p>When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are racist against the word \"pointer\". Whatever. Just know that the address of the object goes in the stack.</p>\n\n<p>Like so:</p>\n\n<pre><code>int problems = 99;\nString name = \"Jay-Z\";\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/yTIYp.png\" alt=\"a b*7ch aint one!\"></p>\n\n<p>An array is an object, so it goes on the heap as well. And what about the objects in the array? They get their own heap space, and the address of each object goes inside the array.</p>\n\n<pre><code>JButton[] marxBros = new JButton[3];\nmarxBros[0] = new JButton(\"Groucho\");\nmarxBros[1] = new JButton(\"Zeppo\");\nmarxBros[2] = new JButton(\"Harpo\");\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/v2b33.png\" alt=\"marx brothers\"></p>\n\n<p>So, what gets passed in when you call a method? If you pass in an object, what you're actually passing in is the address of the object. Some might say the \"value\" of the address, and some say it's just a reference to the object. This is the genesis of the holy war between \"reference\" and \"value\" proponents. What you call it isn't as important as that you understand that what's getting passed in is the address to the object.</p>\n\n<pre><code>private static void shout(String name){\n    System.out.println(\"There goes \" + name + \"!\");\n}\n\npublic static void main(String[] args){\n    String hisName = \"John J. Jingleheimerschmitz\";\n    String myName = hisName;\n    shout(myName);\n}\n</code></pre>\n\n<p>One String gets created and space for it is allocated in the heap, and the address to the string is stored on the stack and given the identifier <code>hisName</code>, since the address of the second String is the same as the first, no new String is created and no new heap space is allocated, but a new identifier is created on the stack. Then we call <code>shout()</code>: a new stack frame is created and a new identifier, <code>name</code> is created and assigned the address of the already-existing String.</p>\n\n<p><img src=\"http://i.stack.imgur.com/q0prc.png\" alt=\"la da di da da da da\"></p>\n\n<p>So, value, reference? You say \"potato\".</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Basically, reassigning Object parameters doesn't affect the argument, e.g.,</p>\n\n<pre><code>private void foo(Object bar) {\n    bar = null;\n}\n\npublic static void main(String[] args) {\n    String baz = \"Hah!\";\n    foo(baz);\n    System.out.println(baz);\n}\n</code></pre>\n\n<p>will print out <code>\"Hah!\"</code> instead of <code>NULL</code>. The reason this works is because <code>bar</code> is a copy of the value of <code>baz</code>, which is just a reference to <code>\"Hah!\"</code>. If it were the actual reference itself, then <code>foo</code> would have redefined <code>baz</code> to <code>null</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The crux of the matter is that the word <em>reference</em> in the expression \"pass by reference\" means something completely different from the usual mening of the word <em>reference</em> in Java. </p>\n\n<p>Usually in Java <em>reference</em> means a a <em>reference to an object</em>. But the technical terms <em>pass by reference/value</em> from programming language theory is talking about a <em>reference to the memory cell holding the variable</em>, which is someting completely different.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In java everything is reference, so when you have something like:\n    <code>Point pnt1 = new Point(0,0);</code> Java does following:</p>\n\n<ol>\n<li>Creates new Point object</li>\n<li>Creates new Point reference and initialize that reference to <em>point (refer to)</em> on previously created Point object.</li>\n<li>From here, through Point object life, you will access to that object through pnt1\n reference. So we can say that in Java you manipulate object through its reference.<br></li>\n</ol>\n\n<p><img src=\"http://i.stack.imgur.com/jM54f.png\" alt=\"enter image description here\"></p>\n\n<p><strong>Java doesn't pass method arguments by reference; it passes them by value.</strong> I will use example from <a href=\"http://www.javaworld.com/javaqa/2000-05/03-qa-0526-pass.html\">this site</a>: </p>\n\n<pre><code>public static void tricky(Point arg1, Point arg2) {\n  arg1.x = 100;\n  arg1.y = 100;\n  Point temp = arg1;\n  arg1 = arg2;\n  arg2 = temp;\n}\npublic static void main(String [] args) {\n  Point pnt1 = new Point(0,0);\n  Point pnt2 = new Point(0,0);\n  System.out.println(\"X1: \" + pnt1.x + \" Y1: \" +pnt1.y); \n  System.out.println(\"X2: \" + pnt2.x + \" Y2: \" +pnt2.y);\n  System.out.println(\" \");\n  tricky(pnt1,pnt2);\n  System.out.println(\"X1: \" + pnt1.x + \" Y1:\" + pnt1.y); \n  System.out.println(\"X2: \" + pnt2.x + \" Y2: \" +pnt2.y);  \n}\n</code></pre>\n\n<p>Flow of the program:</p>\n\n<pre><code>Point pnt1 = new Point(0,0);\nPoint pnt2 = new Point(0,0);\n</code></pre>\n\n<p>Creating two different Point object with two different reference associated.\n<img src=\"http://i.stack.imgur.com/5LIKC.png\" alt=\"enter image description here\"></p>\n\n<pre><code>System.out.println(\"X1: \" + pnt1.x + \" Y1: \" +pnt1.y); \nSystem.out.println(\"X2: \" + pnt2.x + \" Y2: \" +pnt2.y);\nSystem.out.println(\" \");\n</code></pre>\n\n<p>As expected output will be:</p>\n\n<pre><code>X1: 0     Y1: 0\nX2: 0     Y2: 0\n</code></pre>\n\n<p><strong>On this line 'pass-by-value' goes into the play...</strong> <br></p>\n\n<pre><code>tricky(pnt1,pnt2);           public void tricky(Point arg1, Point arg2);\n</code></pre>\n\n<p>References <code>pnt1</code> and <code>pnt2</code> are <strong>passed by value</strong> to the tricky method, which means that now yours references <code>pnt1</code> and <code>pnt2</code> have their <code>copies</code> named <code>arg1</code> and <code>arg2</code>.So <code>pnt1</code> and <code>arg1</code> <em>points</em> to the same object. (Same for the <code>pnt2</code> and <code>arg2</code>)\n<img src=\"http://i.stack.imgur.com/qd1GH.png\" alt=\"enter image description here\"></p>\n\n<p>In the <code>tricky</code> method:</p>\n\n<pre><code> arg1.x = 100;\n arg1.y = 100;\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/o4WT0.png\" alt=\"enter image description here\"></p>\n\n<p>Next in the <code>tricky</code> method</p>\n\n<pre><code>Point temp = arg1;\narg1 = arg2;\narg2 = temp;\n</code></pre>\n\n<p>Here, you first create new <code>temp</code> Point reference which will <em>point</em> on same place like <code>arg1</code> reference. Then you move reference <code>arg1</code> to <em>point</em> to the same place like <code>arg2</code> reference.\nFinally <code>arg2</code> will <em>point</em> to the same place like <code>temp</code>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/fX5Q3.png\" alt=\"enter image description here\"></p>\n\n<p>From here scope of <code>tricky</code> method is gone and you don't have access any more to the references: <code>arg1</code>, <code>arg2</code>, <code>temp</code>. <strong>But important note is that everything you do with these references when they are 'in life' will permanently affect object on which they are <em>point</em> to.</strong> </p>\n\n<p>So after executing method <code>tricky</code>, when you return to <code>main</code>, you have this situation:\n<img src=\"http://i.stack.imgur.com/LRETe.png\" alt=\"enter image description here\"></p>\n\n<p>So now, completely execution of program will be:</p>\n\n<pre><code>X1: 0         Y1: 0\nX2: 0         Y2: 0\nX1: 100       Y1: 100\nX2: 0         Y2: 0\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>No, it's not pass by reference.</p>\n\n<p>Java is pass by value according to the Java Language Specification:</p>\n\n<blockquote>\n  <p>When the method or constructor is invoked (\u00a715.12), <strong>the values of the actual argument expressions initialize newly created parameter variables</strong>, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.1\" rel=\"nofollow\">formal parameter</a>. </p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As far as I know, Java only knows call by value. This means for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects. However I think there are some pitfalls; for example, this will not work:</p>\n\n<pre><code>public static void swap(StringBuffer s1, StringBuffer s2) {\n    StringBuffer temp = s1;\n    s1 = s2;\n    s2 = temp;\n}\n\n\npublic static void main(String[] args) {\n    StringBuffer s1 = new StringBuffer(\"Hello\");\n    StringBuffer s2 = new StringBuffer(\"World\");\n    swap(s1, s2);\n    System.out.println(s1);\n    System.out.println(s2);\n}\n</code></pre>\n\n<p>This will populate Hello World and not World Hello because in the swap function you use copys which have no impact on the references in the main. But if your objects are not immutable you can change it for example:</p>\n\n<pre><code>public static void appendWorld(StringBuffer s1) {\n    s1.append(\" World\");\n}\n\npublic static void main(String[] args) {\n    StringBuffer s = new StringBuffer(\"Hello\");\n    appendWorld(s);\n    System.out.println(s);\n}\n</code></pre>\n\n<p>This will populate Hello World on the command line. If you change StringBuffer into String it will produce just Hello because String is immutable. For example:</p>\n\n<pre><code>public static void appendWorld(String s){\n    s = s+\" World\";\n}\n\npublic static void main(String[] args) {\n    String s = new String(\"Hello\");\n    appendWorld(s);\n    System.out.println(s);\n}\n</code></pre>\n\n<p>However you could make a wrapper for String like this which would make it able to use it with Strings:</p>\n\n<pre><code>class StringWrapper {\n    public String value;\n\n    public StringWrapper(String value) {\n        this.value = value;\n    }\n}\n\npublic static void appendWorld(StringWrapper s){\n    s.value = s.value +\" World\";\n}\n\npublic static void main(String[] args) {\n    StringWrapper s = new StringWrapper(\"Hello\");\n    appendWorld(s);\n    System.out.println(s.value);\n}\n</code></pre>\n\n<p>edit: i believe this is also the reason to use StringBuffer when it comes to \"adding\" two Strings because you can modifie the original object which u can't with immutable objects like String is.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can never pass by reference in Java, and one of the ways that is obvious is when you want to return more than one value from a method call. Consider the following bit of code in C++:</p>\n\n<pre><code>void getValues(int&amp; arg1, int&amp; arg2) {\n    arg1 = 1;\n    arg2 = 2;\n}\nvoid caller() {\n    int x;\n    int y;\n    getValues(x, y);\n    cout &lt;&lt; \"Result: \" &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;\n}\n</code></pre>\n\n<p>Sometimes you want to use the same pattern in Java, but you can't; at least not directly. Instead you could do something like this:</p>\n\n<pre><code>void getValues(int[] arg1, int[] arg2) {\n    arg1[0] = 1;\n    arg2[0] = 2;\n}\nvoid caller() {\n    int[] x = new int[1];\n    int[] y = new int[1];\n    getValues(x, y);\n    System.out.println(\"Result: \" + x[0] + \" \" + y[0]);\n}\n</code></pre>\n\n<p>As was explained in previous answers, in Java you're passing a pointer to the array as a value into <code>getValues</code>. That is enough, because the method then modifies the array element, and by convention you're expecting element 0 to contain the return value. Obviously you can do this in other ways, such as structuring your code so this isn't necessary, or constructing a class that can contain the return value or allow it to be set. But the simple pattern available to you in C++ above is not available in Java.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>A reference is always a value when represented, no matter what language you use.</h2>\n\n<p>Getting an outside of the box view, let's look at Assembly or some low level memory management. At the CPU level a <em>reference</em> to anything immediately becomes a <em>value</em> if it gets written to memory or to one of the CPU registers. (That is why <em>pointer</em> is a good definition. It is a value, which has a purpose at the same time).</p>\n\n<p>Data in memory has a <strong>Location</strong> and at that location there is a value (byte,word, whatever). In Assembly we have a convenient solution to give a <strong>Name</strong> to certain <strong>Location</strong> (aka variable), but when compiling the code, the assembler simply replaces <strong>Name</strong> with the designated location just like your browser replaces domain names with IP addresses.</p>\n\n<p>Down to the core it is technically impossible to pass a reference to anything in any language without representing it (when it immediately becomes a value).</p>\n\n<p>Lets say we have a variable Foo, its <strong>Location</strong> is at the 47th byte in memory and its <strong>Value</strong> is 5. We create another variable <strong>Ref</strong> which is at 223rd byte in memory, and its value will be 47. If you just look at 5 and 47 without any other information, you will see just two <strong>Values</strong>.\nIf you use them as references then to reach to <code>5</code> we have to travel:</p>\n\n<pre><code>[Location] -&gt; [Value at the Location]\n---------------------\n[223]      -&gt; 47\n[47]       -&gt; 5\n</code></pre>\n\n<p>This is how jump-tables work. </p>\n\n<p>If we want to call a method/function/procedure with Foo's value, there are a few possible way to pass the variable to the method, depending on the <strong>language</strong> and its several method invocation modes:</p>\n\n<ol>\n<li>5 gets copied to one of the CPU registers (ie. EAX).</li>\n<li>5 gets PUSHd to the stack.</li>\n<li>47 gets copied to one of the CPU registers</li>\n<li>47 PUSHd to the stack.</li>\n<li>223 gets copied to one of the CPU registers.</li>\n<li>223 gets PUSHd to the stack.</li>\n</ol>\n\n<p>In every cases above a value - a <strong>copy</strong> of a value - has been created, it is now upto the method to handle it. When you write \"Foo\" inside the method, it is either read out from EAX, or automatically  <strong>dereferenced</strong>, or double dereferenced. This is hidden from the developer until she circumvents the dereferencing process. So a <em>reference</em> is a <em>value</em> when represented, because a reference is a value that has to be processed (at CPU or at language level).</p>\n\n<p>We have Foo inside the method:</p>\n\n<ul>\n<li>in case 1. and 2. if you change Foo (<code>Foo = 9</code>) it only affects local scope. (you have a copy of the Value), from inside the method we cannot even determine where in memory Foo is located.</li>\n<li>in case 3. and 4. if you use default language constructs and change Foo (<code>Foo = 11</code>), it could change Foo globally (depends on the language, ie. Java or like Pascal's <code>procedure findMin(x, y, z: integer;</code><strong>var m</strong><code>: integer);</code>). However if the language allows you to circumvent the dereference process, you can change <code>47</code>, say to <code>49</code>. At that point Foo seems to have been changed if you read it, because you have changed the <strong>local pointer</strong> to it. And if you were to modify Foo inside the method (<code>Foo = 12</code>) you will probably FUBAR the execution of the program (aka. segfault) because you will write to a different memory area that is unknown and unhandled by the compiler (and not at <code>47</code>). BUT Foo's value of <code>47</code> did not change globally, only the one inside the method, because <code>47</code> was also a copy to the method.</li>\n<li>in case 5. and 6. if you modify <code>223</code> inside the method it creates the same mayhem as in 3. or 4. (a pointer, pointing to a now bad value, that is again used as a pointer). However if you are able to dereference Foo (that is <code>223</code>), reach to and modify the pointed value <code>47</code>, say, to <code>49</code>, it will affect Foo <strong>globally</strong>, because in this case the methods got a copy of <code>223</code>  but the referenced <code>47</code> exists once, and changing that to <code>49</code> will lead every Foo double-dereferencing to a wrong value.</li>\n</ul>\n\n<p>Nitpicking on insignificant details, even languages that do pass-by-reference will pass values to functions, but those functions know that they have to use it for dereferencing purposes. This pass-the-reference-as-value is just hidden from the programmer because it is practically useless and the terminology is only <em>pass-by-reference</em>.</p>\n\n<p>Strict <em>pass-by-value</em> is also useless, it would mean that a 100 Mbyte array should have to copied every time we call a method with the array as argument, therefore Java cannot be stricly pass-by-value. Every language would pass a reference to this huge array (as a value) and either employs copy-on-write mechanism if that array can be changed locally inside the method or allows the method (as Java does) to modify the array globally (from the caller's view) and a few languages allows to modify the Value of the reference itself.</p>\n\n<p>So in short and in Java's own terminology, Java is <em>pass-by-value</em> where <em>value</em> can be: either a <strong>real value</strong> or a <strong>value</strong> that is a representation of a <strong>reference</strong>. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Let me try to explain my understanding with the help of four examples. Java is pass-by-value, and not pass-by-reference</p>\n\n<p>/**</p>\n\n<p>Pass By Value</p>\n\n<p>In Java, all parameters are passed by value, i.e. assigning a method argument is not visible to the caller.</p>\n\n<p>*/</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><code>public class PassByValueString {\n    public static void main(String[] args) {\n        new PassByValueString().caller();\n    }\n\n    public void caller() {\n        String value = \"Nikhil\";\n        boolean valueflag = false;\n        String output = method(value, valueflag);\n        /*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'value' and 'valueflag'\n         */\n        System.out.println(\"output : \" + output);\n        System.out.println(\"value : \" + value);\n        System.out.println(\"valueflag : \" + valueflag);\n\n    }\n\n    public String method(String value, boolean valueflag) {\n        value = \"Anand\";\n        valueflag = true;\n        return \"output\";\n    }\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre><code>output : output\nvalue : Nikhil\nvalueflag : false\n</code></pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p>/**\n * \n * Pass By Value\n *\n */</p>\n\n<pre><code>public class PassByValueNewString {\n    public static void main(String[] args) {\n        new PassByValueNewString().caller();\n    }\n\n    public void caller() {\n        String value = new String(\"Nikhil\");\n        boolean valueflag = false;\n        String output = method(value, valueflag);\n        /*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'value' and 'valueflag'\n         */\n        System.out.println(\"output : \" + output);\n        System.out.println(\"value : \" + value);\n        System.out.println(\"valueflag : \" + valueflag);\n\n    }\n\n    public String method(String value, boolean valueflag) {\n        value = \"Anand\";\n        valueflag = true;\n        return \"output\";\n    }\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre><code>output : output\nvalue : Nikhil\nvalueflag : false\n</code></pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p>/**\n  This 'Pass By Value has a feeling of 'Pass By Reference'</p>\n\n<p>Some people say primitive types and 'String' are 'pass by value'\n  and objects are 'pass by reference'.</p>\n\n<p>But from this example, we can understand that it is infact pass by value only,\n  keeping in mind that here we are passing the reference as the value.\n  ie: reference is passed by value.\n  That's why are able to change and still it holds true after the local scope.\n  But we cannot change the actual reference outside the original scope.\n  what that means is demonstrated by next example of PassByValueObjectCase2.</p>\n\n<p>*/</p>\n\n<pre><code>public class PassByValueObjectCase1 {\n\n    private class Student {\n        int id;\n        String name;\n        public Student() {\n        }\n        public Student(int id, String name) {\n            super();\n            this.id = id;\n            this.name = name;\n        }\n        public int getId() {\n            return id;\n        }\n        public void setId(int id) {\n            this.id = id;\n        }\n        public String getName() {\n            return name;\n        }\n        public void setName(String name) {\n            this.name = name;\n        }\n        @Override\n        public String toString() {\n            return \"Student [id=\" + id + \", name=\" + name + \"]\";\n        }\n    }\n\n    public static void main(String[] args) {\n        new PassByValueObjectCase1().caller();\n    }\n\n    public void caller() {\n        Student student = new Student(10, \"Nikhil\");\n        String output = method(student);\n        /*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'student'\n         */\n        System.out.println(\"output : \" + output);\n        System.out.println(\"student : \" + student);\n    }\n\n    public String method(Student student) {\n        student.setName(\"Anand\");\n        return \"output\";\n    }\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre><code>output : output\nstudent : Student [id=10, name=Anand]\n</code></pre>\n\n<p><strong>Example 4:</strong></p>\n\n<p>/**</p>\n\n<p>In addition to what was mentioned in Example3 (PassByValueObjectCase1.java),  we cannot change the actual reference outside the original scope.\"</p>\n\n<p>Note: I am not pasting the code for <code>private class Student</code>. The class definition for <code>Student</code> is same as Example3.</p>\n\n<p>*/</p>\n\n<pre><code>public class PassByValueObjectCase2 {\n\n    public static void main(String[] args) {\n        new PassByValueObjectCase2().caller();\n    }\n\n    public void caller() {\n        // student has the actual reference to a Student object created\n        // can we change this actual reference outside the local scope? Let's see\n        Student student = new Student(10, \"Nikhil\");\n        String output = method(student);\n        /*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'student'\n         */\n        System.out.println(\"output : \" + output);\n        System.out.println(\"student : \" + student); // Will it print Nikhil or Anand?\n    }\n\n    public String method(Student student) {\n        student = new Student(20, \"Anand\");\n        return \"output\";\n    }\n\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre><code>output : output\nstudent : Student [id=10, name=Nikhil]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Java is always pass by values NOT pass by reference</strong> </p>\n\n<p>first of we understand what is pass by value and pass by reference</p>\n\n<p><strong>pass by value means you are making a copy in memory of the actual parameter's value that is passed in, a copy of the contents of the actual parameter</strong></p>\n\n<p><strong>pass by reference (also called pass by address), a copy of the address of the actual parameter is stored</strong></p>\n\n<p>Some time it gives illusion pass by reference.lets see how it works by example</p>\n\n<pre><code>public class Passbyvalue {\n    public static void main(String[] args) {\n        test t=new test();\n        t.name=\"initialvalue\";\n        new Passbyvalue().changeValue(t);\n        System.out.println(t.name);\n    }\n\n    public void changeValue(test f){\n        f.name=\"changevalue\";\n    }\n}\n\nclass test{\n    String name;\n}\n</code></pre>\n\n<p>Output of this program is </p>\n\n<p><strong>changevalue</strong></p>\n\n<p>lets understand step by step</p>\n\n<blockquote>\n  <p>test t=new test();</p>\n</blockquote>\n\n<p>as we all know it will create object in heap and return return reference value back to t. suppose for example value of t is 0x100234(its JVM internal value as we don't about it i have just consider it for example) </p>\n\n<p><img src=\"http://i.stack.imgur.com/AVrhI.png\" alt=\"enter image description here\"></p>\n\n<blockquote>\n  <p>new Passbyvalue().changeValue(t);</p>\n</blockquote>\n\n<p>when passing reference t to function it will not directly pass actual reference value of object test but it will create copy of t and then it pass to function ( as it <strong>pass by value</strong> it passes copy of variable not actual reference of it) . As we consider value of t will be0x100234 . so in this way both t and f will have same value and hence they will point to same object</p>\n\n<p><img src=\"http://i.stack.imgur.com/WwdPh.png\" alt=\"enter image description here\"></p>\n\n<p>so if you change any thing in function using reference f it will modify existing contain of object that why we were getting output \"changevalue\" which is updated in function</p>\n\n<p>to understand this more clearly consider following example</p>\n\n<pre><code>public class Passbyvalue {\n    public static void main(String[] args) {\n        test t=new test();\n        t.name=\"initialvalue\";\n        new Passbyvalue().changerefence(t);\n        System.out.println(t.name);\n    }\n\n    public void changerefence(test f){\n        f=null;\n    }\n}\n\nclass test{\n    String name;\n}\n</code></pre>\n\n<p>will it give null pointer no because it passes only copy of reference .In case of by reference it could have given nullpointer exception </p>\n\n<p><img src=\"http://i.stack.imgur.com/jH6KP.png\" alt=\"enter image description here\"></p>\n\n<p>Hopefully this will help </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The distinction, or perhaps just the way I remember as I used to be under the same impression as the original poster is this: Java is always pass by value. All objects( in Java, anything except for primitives) in Java are references. These references are passed by value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A few corrections to some posts.</p>\n\n<p>C does NOT support pass by reference. It is ALWAYS pass by value. C++ does support pass by reference, but is not the default and is quite dangerous.</p>\n\n<p>It doesn't matter what the value is in Java: primitive or address(roughly) of object, it is ALWAYS passed by value.</p>\n\n<p>If a Java object \"behaves\" like it is being passed by reference, that is a property of mutability and has absolutely nothing to do with passing mechanisms.</p>\n\n<p>I am not sure why this is so confusing, perhaps because so many Java \"programmers\" are not formally trained, and thus do not understand what is really going on in memory?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I always think of it as \"pass by copy\". It is a copy of the value be it primitive or reference. If it is a primitive it is a copy of the bits that are the value and if it is an Object it is a copy of the reference.</p>\n\n<pre><code>public class PassByCopy{\n    public static void changeName(Dog d){\n        d.name = \"Fido\";\n    }\n    public static void main(String[] args){\n        Dog d = new Dog(\"Maxx\");\n        System.out.println(\"name= \"+ d.name);\n        changeName(d);\n        System.out.println(\"name= \"+ d.name);\n    }\n}\nclass Dog{\n    public String name;\n    public Dog(String s){\n        this.name = s;\n    }\n}\n</code></pre>\n\n<p>output of java PassByCopy:</p>\n\n<blockquote>\n  <p>name= Maxx<br>\n  name= Fido</p>\n</blockquote>\n\n<p>Primitive wrapper classes and Strings are immutable so any example using those types will not work the same as other types/objects.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java is pass by constant reference where a copy of the reference is passed which means that it is basically a pass by value. You might change the contents of the reference if the class is mutable but you cannot change the reference itself. In other words the address can not be changed since it is passed by value but the content that is pointed by the address can be changed. In case of immutable classes, the content of the reference cannot be changed either.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have created a thread devoted to these kind of questions for <em>any</em> programming languages <a href=\"http://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value\" rel=\"nofollow\">here</a>.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value#2028\" rel=\"nofollow\">Java is also mentioned</a>. Here is the short summary:</p>\n\n<ul>\n<li>Java passes it parameters by value</li>\n<li>\"by value\" is the only way in java to pass a parameter to a method</li>\n<li>using methods from the object given as parameter will alter the\nobject as the references point to\nthe original objects. (if that\nmethod itself alters some values)</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To make a long story short, <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\">Java</a> objects have some very peculiar properties.</p>\n\n<p>In general, Java has primitive types (<code>int</code>, <code>bool</code>, <code>char</code>, <code>double</code>, etc) that are passed directly by value. Then Java has objects (everything that derives from <code>java.lang.Object</code>). Objects are actually always handled through a reference (a reference being a pointer that you can't touch). That means that in effect, objects are passed by reference, as the references are normally not interesting. It does however mean that you cannot change which object is pointed to as the reference itself is passed by value.</p>\n\n<p>Does this sound strange and confusing? Let's consider how C implements pass by reference and pass by value. In C, the default convention is pass by value. <code>void foo(int x)</code> passes an int by value. <code>void foo(int *x)</code> is a function that does not want an <code>int a</code>, but a pointer to an int: <code>foo(&amp;a)</code>. One would use this with the <code>&amp;</code> operator to pass a variable address.</p>\n\n<p>Take this to C++, and we have references. References are basically (in this context) syntactic sugar that hide the pointer part of the equation: <code>void foo(int &amp;x)</code> is called by <code>foo(a)</code>, where the compiler itself knows that it is a reference and the address of the non-reference <code>a</code> should be passed. In Java, all variables referring to objects are actually of reference type, in effect forcing call by reference for most intends and purposes without the fine grained control (and complexity) afforded by, for example, C++.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I thought I'd contribute this answer to add more details from the Specifications.</p>\n\n<p>First, <a href=\"http://stackoverflow.com/questions/373419/whats-the-difference-between-passing-by-reference-vs-passing-by-value\">What's the difference between passing by reference vs. passing by value?</a></p>\n\n<blockquote>\n  <p>Passing by reference means the called functions' parameter will be the\n  same as the callers' passed argument (not the value, but the identity\n  - the variable itself). </p>\n  \n  <p>Pass by value means the called functions' parameter will be a copy of\n  the callers' passed argument.</p>\n</blockquote>\n\n<p>Or from wikipedia, <a href=\"http://en.wikipedia.org/wiki/Call_by_reference#Call_by_reference\">on the subject of pass-by-reference</a></p>\n\n<blockquote>\n  <p>In call-by-reference evaluation (also referred to as\n  pass-by-reference), a function receives an implicit reference to a\n  variable used as argument, rather than a copy of its value. This\n  typically means that the function can modify (i.e. assign to) the\n  variable used as argument\u2014something that will be seen by its caller.</p>\n</blockquote>\n\n<p>And <a href=\"http://en.wikipedia.org/wiki/Call_by_value#Call_by_value\">on the subject of pass-by-value</a></p>\n\n<blockquote>\n  <p>In call-by-value, the argument expression is evaluated, and the\n  resulting value is bound to the corresponding variable in the function [...]. \n  If the function or procedure is able to assign values to its\n  parameters, only its local copy is assigned [...].</p>\n</blockquote>\n\n<p>Second, we need to know what Java uses in its method invocations. The <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1\">Java Language Specification</a> states</p>\n\n<blockquote>\n  <p>When the method or constructor is invoked (\u00a715.12), <strong>the values of the\n  actual argument expressions initialize newly created parameter\n  variables</strong>, each of the declared type, before execution of the body of\n  the method or constructor.</p>\n</blockquote>\n\n<p>So it assigns (or binds) the value of the argument to the corresponding parameter variable. </p>\n\n<p><strong>What is the value of the argument?</strong></p>\n\n<p>Let's consider reference types, the <a href=\"http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.4\">Java Virtual Machine Specification</a> states</p>\n\n<blockquote>\n  <p>There are three kinds of <strong>reference types</strong>: class types, array types,\n  and interface types. <strong>Their values are references to dynamically\n  created class instances, arrays, or class instances or arrays that\n  implement interfaces, respectively.</strong></p>\n</blockquote>\n\n<p>The <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.3.1\">Java Language Specification</a> also states</p>\n\n<blockquote>\n  <p><strong>The reference values (often just references) are pointers to these objects</strong>, and a special null reference, which refers to no object.</p>\n</blockquote>\n\n<p>The value of an argument (of some reference type) is a pointer to an object. Note that a variable, an invocation of a method with a reference type return type, and an instance creation expression (<code>new ...</code>) all resolve to a reference type value.</p>\n\n<p>So</p>\n\n<pre><code>public void method (String param) {}\n...\nString var = new String(\"ref\");\nmethod(var);\nmethod(var.toString());\nmethod(new String(\"ref\"));\n</code></pre>\n\n<p>all bind the value of a reference to a <code>String</code> instance to the method's newly created parameter, <code>param</code>. This is exactly what the definition of pass-by-value describes. As such, <strong>Java is pass-by-value</strong>.</p>\n\n<p><strong>The fact that you can follow the reference to invoke a method or access a field of the referenced object is completely irrelevant to the conversation.</strong> The definition of pass-by-reference was</p>\n\n<blockquote>\n  <p>This typically means that the function can modify (i.e. assign to) the\n  variable used as argument\u2014something that will be seen by its caller.</p>\n</blockquote>\n\n<p>In Java, modifying the variable means reassigning it. In Java, if you reassigned the variable within the method, it would go unnoticed to the caller. <strong>Modifying the object referenced by the variable is a different concept entirely.</strong> </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As many people mentioned it before, <a href=\"http://academic.regis.edu/dbahr/GeneralPages/IntroToProgramming/JavaPassByValue.htm\">Java is always pass-by-value</a></p>\n\n<p>Here is another example that will help you understand the difference (<a href=\"http://www.javaranch.com/campfire/StoryPassBy.jsp\">the classic swap example</a>):</p>\n\n<pre><code>public class Test {\n  public static void main(String[] args) {\n    Integer a = new Integer(2);\n    Integer b = new Integer(3);\n    System.out.println(\"Before: a = \" + a + \", b = \" + b);\n    swap(a,b);\n    System.out.println(\"After: a = \" + a + \", b = \" + b);\n  }\n\n  public static swap(Integer iA, Integer iB) {\n    Integer tmp = iA;\n    iA = iB;\n    iB = tmp;\n  }\n}\n</code></pre>\n\n<p>Prints:  </p>\n\n<blockquote>\n  <p>Before: a = 2, b = 3<br>\n  After: a = 2, b = 3</p>\n</blockquote>\n\n<p>This happens because iA and iB are new local reference variables that have the same value of the passed references (they point to a and b respectively). So, trying to change the references of iA or iB will only change in the local scope and not outside of this method.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's really quite, quite simple:</p>\n\n<p>For a variable of primitive type (eg. <code>int</code>, <code>boolean</code>, <code>char</code>, etc...), when you use its name for a method argument, you are passing the value contained in it (<code>5</code>, <code>true</code>, or <code>'c'</code>). This value gets \"copied\", and the variable retains its value even after the method invocation.</p>\n\n<p>For a variable of reference type (eg. <code>String</code>, <code>Object</code>, etc...), when you use its name for a method argument, you are passing the value contained in it (<em>the <strong>reference value</strong> that \"points\" to the object</em>). This <strong><em>reference value</em></strong> gets \"copied\", and the variable retains its value even after the method invocation. <strong><em>The reference variable keeps \"pointing\" to the same object.</em></strong></p>\n\n<p>Either way, you're always passing stuff by value.</p>\n\n<hr>\n\n<p>Compare this to say C++ where you can have a method to take an <code>int&amp;</code>, or in C# where you could have take a <code>ref int</code> (although, in this case, you also have to use the <code>ref</code> modifier when passing the variable's name to the method.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java copies the reference by value. So if you change it to something else (e.g, using <code>new</code>) the reference does not change outside the method. For native types, it is always pass by value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Have a look at this code. This code will not throw <code>NullPointerException</code>... It will print \"Vinay\"</p>\n\n<pre><code>public class Main {\n    public static void main(String[] args) {\n        String temp = \"Vinay\";\n        print(temp);\n        System.err.println(temp);\n    }\n\n    private static void print(String temp) {\n        temp = null;\n    }\n}\n</code></pre>\n\n<p>If Java is pass by reference then it should have thrown <code>NullPointerException</code> as reference is set to Null.</p>\n    </div>"]}]